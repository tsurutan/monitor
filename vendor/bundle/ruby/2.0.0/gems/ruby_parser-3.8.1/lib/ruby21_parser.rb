#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.13
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby21Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-288,580,625,-102,-100,-103,270,-288,-288,-288,748,270,220,-288,-288',
'560,-288,557,556,555,816,558,586,-98,-84,-105,661,270,580,661,580,-101',
'783,3,622,849,-288,-288,-70,-288,-288,-288,-288,-288,877,816,217,218',
'221,-100,-106,221,-101,714,-92,580,580,-511,700,270,660,839,717,660',
'-511,624,-99,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-601,728,-288,-288,-288,728,644,-103,217,218,-288,-416',
'269,-288,217,218,621,269,-288,-100,-288,-103,-288,-288,-288,-288,-288',
'-288,-288,-104,-288,-102,-288,269,116,747,-102,-100,-103,115,-92,-102',
'-100,-103,-288,-288,-288,-89,-95,-96,-288,-288,-288,-288,116,221,-288',
'-288,-288,115,-288,116,-104,116,-101,269,115,221,115,-101,-288,-288',
'-288,-91,-97,-92,-92,-94,-92,816,-288,-288,699,-288,-288,-288,-288,-288',
'116,116,-90,929,-92,115,115,-602,-502,-601,221,661,728,116,-509,-502',
'221,116,115,782,527,-509,115,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,-517,-94,-288,-288,-288,-517,785,-288',
'660,-95,-288,-93,-516,-288,-288,241,-288,689,-288,-94,-288,661,-288',
'-288,-288,-288,-288,-288,-288,565,-288,272,-288,94,95,94,95,272,-101',
'-105,568,606,-90,221,-516,-288,-288,-288,-288,456,-288,-605,-288,689',
'-94,660,-99,-94,-605,-605,-605,-99,-104,-605,-605,-605,739,-605,-98',
'539,740,-94,538,576,575,116,-605,-605,-605,-605,115,83,221,504,-605',
'999,-89,-605,-605,84,-605,-605,-605,-605,-605,560,502,557,556,555,-98',
'558,608,607,606,-106,606,569,260,611,-510,760,96,97,96,97,-599,-510',
'-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'787,263,-605,-605,-605,-605,784,-605,264,-264,-605,606,-605,-605,-605',
'221,-605,-601,-605,489,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'-425,-605,-605,-605,608,607,608,607,-505,489,-605,876,841,758,606,-505',
'-605,-605,-605,-605,-599,-605,-502,-605,-505,527,217,218,769,-502,-502',
'-502,-507,-102,-502,-502,-502,-263,-502,-507,565,763,-599,608,607,619',
'-502,-513,-502,-502,-502,568,116,-425,-513,-598,762,115,-502,-502,-425',
'-502,-502,-502,-502,-502,-512,-96,560,-425,557,556,555,-512,558,608',
'607,614,606,-505,639,-105,606,116,576,575,-505,-425,115,-502,-502,-502',
'-502,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502,576,575,-502',
'-502,-502,-502,-502,-502,606,761,-502,731,-502,-502,-502,569,-502,-598',
'-502,-94,-502,-502,-502,-502,-502,-502,-502,-502,-502,408,-502,586,-502',
'-103,410,409,608,607,604,-598,608,607,609,975,215,-502,-502,-502,-502',
'-508,-502,-505,-502,768,638,724,-508,722,-505,-505,-505,263,-502,-505',
'-505,-505,241,-505,264,608,607,626,721,-289,720,-505,241,-505,-505,-505',
'-289,879,539,705,-605,541,-97,-505,-505,-289,-505,-505,-505,-505,-505',
'-91,-92,882,238,885,-106,116,240,239,236,237,115,887,238,-100,-101,116',
'240,239,236,237,115,889,-505,-505,-505,-505,-505,-505,-505,-505,-505',
'-505,-505,-505,-505,-505,221,241,-505,-505,-505,-605,-505,-505,539,891',
'-505,541,-605,-505,-505,892,-505,-601,-505,712,-505,-605,-505,-505,-505',
'-505,-505,-505,-505,116,-505,116,-505,238,115,116,115,240,239,-605,115',
'241,217,218,710,-505,-505,-505,-505,708,-505,-605,-505,119,120,121,122',
'123,-605,-605,-605,706,-505,241,-605,-605,560,-605,557,556,555,565,558',
'238,845,816,-605,240,239,255,256,539,568,689,541,217,218,-605,-605,705',
'-605,-605,-605,-605,-605,238,845,816,900,240,239,236,237,702,563,546',
'560,-262,557,556,555,904,558,573,572,576,575,906,-605,-605,-605,-605',
'-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,217,218,-605,-605',
'-605,560,645,557,556,555,-605,558,714,-605,907,221,705,569,-605,910',
'-605,717,-605,-605,-605,-605,-605,-605,-605,912,-605,-605,-605,914,916',
'916,560,221,557,556,555,221,558,714,922,-605,-605,695,-93,924,-605,293',
'72,73,74,12,60,694,926,588,66,67,-102,689,532,70,589,68,69,71,33,34',
'75,76,714,587,221,678,-84,32,31,30,104,103,105,106,868,869,22,221,870',
'110,111,649,11,48,221,13,108,107,109,98,59,100,99,101,221,102,110,111',
'221,94,95,241,45,46,44,241,245,250,251,252,247,249,257,258,253,254,-515',
'234,235,-514,241,255,256,-515,43,936,-514,36,937,221,61,62,-515,940',
'63,-514,38,238,-265,244,47,240,239,236,237,248,246,242,23,243,241,241',
'1005,91,83,85,86,87,89,1006,648,272,84,92,637,259,636,-239,1004,221',
'65,632,950,81,88,90,-262,630,96,97,8,72,73,74,12,60,623,957,-289,66',
'67,958,620,960,70,-289,68,69,71,33,34,75,76,961,-289,617,613,591,32',
'31,30,104,103,105,106,590,400,22,586,504,543,542,649,11,48,10,13,108',
'107,109,98,59,100,99,101,977,102,110,111,536,94,95,979,45,46,44,241',
'245,250,251,252,247,249,257,258,253,254,-288,234,235,213,980,255,256',
'-288,43,241,214,36,-602,528,61,62,-288,984,63,212,38,238,524,244,47',
'240,239,236,237,248,246,242,23,243,272,705,743,91,83,85,86,87,89,956',
'-280,989,84,92,991,259,993,-280,744,995,65,995,221,81,88,90,-280,275',
'96,97,293,72,73,74,12,60,521,1002,-280,66,67,514,513,221,70,-280,68',
'69,71,33,34,75,76,-69,-280,1007,504,1008,32,31,30,104,103,105,106,916',
'916,22,916,1013,502,977,633,11,48,499,13,108,107,109,98,59,100,99,101',
'272,102,110,111,489,94,95,220,45,46,44,241,245,250,251,252,247,249,257',
'258,253,254,-288,234,235,-514,458,255,256,-288,43,457,-514,36,-602,455',
'61,62,-288,221,63,-514,38,238,411,244,47,240,239,236,237,248,246,242',
'23,243,406,390,-288,91,83,85,86,87,89,-288,743,-602,84,92,-602,259,-601',
'742,-288,694,65,387,384,81,88,90,744,381,96,97,293,72,73,74,12,60,357',
'221,-289,66,67,318,977,317,70,-289,68,69,71,33,34,75,76,1036,-289,1037',
'1038,1039,32,31,30,104,103,105,106,995,953,22,557,556,555,995,558,11',
'48,995,13,108,107,109,98,59,100,99,101,221,102,110,111,260,94,95,216',
'45,46,44,241,245,250,251,252,247,249,257,258,253,254,529,234,235,519',
'211,255,256,530,43,210,520,36,916,977,61,62,454,209,63,518,38,238,112',
'244,47,240,239,236,237,248,246,242,23,243,995,,743,91,83,85,86,87,89',
'956,-515,,84,92,,259,,-515,744,,65,,,81,88,90,-515,,96,97,293,72,73',
'74,12,60,,,452,66,67,,,,70,453,68,69,71,33,34,75,76,,454,,,,32,31,30',
'104,103,105,106,,953,22,557,556,555,,558,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249',
'257,258,253,254,-335,234,235,,,255,256,-335,43,,,36,,,61,62,-335,,63',
',38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87',
'89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,119,120,121,122,123,32,31,30,104,103',
'105,106,,,22,119,120,121,122,123,11,48,,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257,258',
'253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240',
'239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,221,259',
',,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,119,120,121,122,123,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241',
'245,250,251,252,247,249,257,258,253,254,,234,235,,,255,256,,43,,,36',
',,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91',
'83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,293,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,241,245,250,251,252,247,249,257,258,253,254,,234,235,,',
'255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246',
'242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96',
'97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257,258,253',
'254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239',
'236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65',
',,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247',
'249,257,258,253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238',
',244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84',
'92,,259,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245',
'250,251,252,247,249,257,258,253,254,,234,235,,,255,256,,43,,,295,,,61',
'62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83',
'85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,241,245,250,251,252,247,249,257,258,253,254,,234,235,,,255',
'256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242',
'23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97',
'293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257,258,253,254',
',234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236',
'237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81',
'88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249',
'257,258,253,254,,234,235,,,255,256,,43,,,295,,,61,62,,,63,,38,238,,244',
'47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92',
',259,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250',
'251,252,247,249,257,258,253,254,,234,235,,,255,256,,43,,,36,,,61,62',
',,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85',
'86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,241,245,250,251,252,247,249,257,258,253,254,,234,235,,,255',
'256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242',
'23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97',
'293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257,258,253,254',
',234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236',
'237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81',
'88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,560,22,557,556,555,,558,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,560,,557,556',
'555,,558,560,714,557,556,555,,558,,,,921,,43,,,36,,,61,62,,,63,,38,',
',,47,,,714,,,,,23,,714,,,91,83,85,86,87,89,,,,84,92,,560,,557,556,555',
'65,558,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,714,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,-624,-624',
'-624,-624,247,249,,,-624,-624,,,,,,255,256,,43,,,36,,,61,62,,,63,,38',
'238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241',
'245,250,251,252,247,249,,,253,254,,,,,,255,256,,43,,,36,,,61,62,,,63',
',38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'241,245,250,251,252,247,249,257,,253,254,,,,,,255,256,,43,,,295,,,61',
'62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,241,,,,,,,,,,,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,',
'244,47,240,239,236,237,,,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252',
'247,249,257,258,253,254,,-624,-624,,,255,256,,43,,,36,,,61,62,,,63,',
'38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'241,245,250,251,252,247,249,257,258,253,254,,-624,-624,,,255,256,,43',
',,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,293,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,241,,,,,,,,,,,,,,,,255,256,,43,,,36,,,61,62,,,63,,38',
'238,,244,47,240,239,236,237,,,242,23,243,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,,,,,',
',,,,,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236',
'237,,,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,',
',96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,',
'32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,241,,,,,,,,,,,,,,,,255,256,,43,,,36',
',,61,62,,,63,,38,238,,244,47,240,239,236,237,,,242,23,243,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,241,-624,-624,-624,-624,247,249,,,-624,-624,,,,,,255,256,,43,',
',36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,8,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,241,-624,-624,-624,-624,247,249,,,-624,-624,,,,,,255',
'256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242',
'23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,293',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,241,-624,-624,-624,-624,247,249,,,-624,-624,,,',
',,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248',
'246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,241,-624,-624,-624,-624,247,249,,,-624,-624',
',,,,,255,256,,226,,,232,,,61,62,,,63,,,238,,244,47,240,239,236,237,248',
'246,242,231,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,241,-624,-624,-624,-624,247,249,,,-624,-624',
',,,,,255,256,,226,,,232,,,61,62,,,63,,,238,,244,47,240,239,236,237,248',
'246,242,231,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286',
'102,110,111,,94,95,,45,46,44,241,,,,,,,,,,,,,,,,255,256,,226,,,232,',
',61,62,,,63,,,238,282,244,47,240,239,236,237,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241',
',,,,,,,,,,,,,,,255,256,,226,,,232,,,61,62,,,63,,,238,,244,47,240,239',
'236,237,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,221,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,',
'63,,284,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76',
',,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59',
'100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,116,,,,,115,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,',
',,,,308,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,314,,',
',,,,,,,,,,,,,,,,,351,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284',
',282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61',
'62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75',
'76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,304',
',,232,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,316',
',,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,400,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,304',
',,300,,,61,62,,,63,,299,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,416,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,416,,,,47,,,,,,,,231,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,221,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,',
'233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94,95,',
'45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,282,,47,,,,,,',
',231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,673',
',282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,',
',,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75',
'76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,766,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99',
'101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,',
',,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75',
'76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,',
',,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75',
'76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284',
',282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,221,,,,,,65,,287',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76',
',,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59',
'100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,673,,282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308',
',,108,107,109,592,59,100,99,593,,102,110,111,,94,95,,,,314,,,,,,,,,',
',,,,,,,,,,594,,,232,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,',
'233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,',
',,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107,109,592,59',
'100,99,593,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,594,,,232,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36',
',,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311',
'75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,967,',
',232,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59',
'100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,',
'233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,416,,,,47,,,,,',
',,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104',
'103,105,106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,232,,,61,62,,,63,,,,,,,,',
',,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,516,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,',
',,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,894,,,232,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,',
'306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61',
'62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75',
'76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,284,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,226,,,232,,,61,62,,,63,,,,282,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233',
',,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,673,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96',
'97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63',
',38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,',
'306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61',
'62,,,63,,673,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75',
'76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,532,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,',
'13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,400,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,314,,,,,,,,,,,,,,,,,,,,894,,,232,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,-606,,96',
'97,,,,-606,-606,-606,,,-606,-606,-606,560,-606,557,556,555,565,558,',
',,-606,-606,-606,-606,,,568,,,,,-606,-606,,-606,-606,-606,-606,-606',
',,,,,,,,,563,,,,,,,,,,,576,575,,-606,-606,-606,-606,-606,-606,-606,-606',
'-606,-606,-606,-606,-606,-606,,,-606,-606,-606,,,-606,,,-606,,,-606',
'-606,,-606,569,-606,,-606,,-606,-606,-606,-606,-606,-606,-606,,-606',
'-606,-606,,,,,,,,,,,,,-606,-606,-606,-606,-607,-606,,-606,,,,-607,-607',
'-607,,,-607,-607,-607,560,-607,557,556,555,565,558,,,,-607,-607,-607',
'-607,,,568,,,,,-607,-607,,-607,-607,-607,-607,-607,,,,,,,,,,563,,,,',
',,,,573,572,576,575,,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,,,-607,-607,-607,,,-607,,,-607,,,-607,-607,,-607',
'569,-607,,-607,,-607,-607,-607,-607,-607,-607,-607,,-607,-607,-607,',
',,,,,,,,,,,-607,-607,-607,-607,-281,-607,,-607,,,,-281,-281,-281,,,-281',
'-281,-281,560,-281,557,556,555,565,558,,,,,-281,-281,-281,,,568,,,,',
'-281,-281,,-281,-281,-281,-281,-281,,,,,,,,,,563,,,,,,,,,,,576,575,',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
',,-281,-281,-281,,,-281,,,-281,,,-281,-281,,-281,569,-281,,-281,,-281',
'-281,-281,-281,-281,-281,-281,,-281,,-281,,,,,,,,,,,,,-281,-281,-281',
'-281,,-281,,-281,176,187,177,200,173,193,183,182,203,204,198,181,180',
'175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,366,365,367',
'364,172,191,190,,,,,,171,178,169,170,361,362,363,359,129,100,99,360',
',102,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,373,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182',
'203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195',
'202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168',
'127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173',
'193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194',
'186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169',
'170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,',
',,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201',
'205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172',
'191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,',
',,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,',
',,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,397,396',
'128,,398,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182',
'203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195',
'202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168',
'127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,-295,,165,,,,,-295,-295,-295,,,-295,-295,-295,560,-295',
'557,556,555,565,558,158,,,,-295,-295,,,,568,,,,,-295,-295,,-295,-295',
'-295,-295,-295,,,,,,,,,,563,,,,,,,,,573,572,576,575,,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295',
',,-295,,275,-295,,,-295,-295,,-295,569,-295,,-295,,-295,-295,-295,-295',
'-295,-295,-295,,-295,,-295,,,,,,,,,,,,-623,-295,-295,,-295,,-295,-623',
'-623,-623,,,-623,-623,-623,560,-623,557,556,555,565,558,,,,-623,-623',
',,,,568,,,,,-623,-623,,-623,-623,-623,-623,-623,,,560,,557,556,555,565',
'558,563,,,,,,,,,568,,576,575,,-623,,,,,,,-623,-623,-623,,-623,-623,-623',
'-623,,-623,563,-623,,,,,272,-623,-623,-623,-623,576,575,,569,,,,,-623',
'-623,,-623,-623,-623,-623,-623,,-623,-623,,,,,,,,,,,,,-623,,,569,,-623',
',,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623,-623',
',,-623,-623,-623,,,-623,,272,-623,,,-623,-623,,-623,,-623,,-623,,-623',
'-623,-623,-623,-623,-623,-623,,-623,-623,-623,,,,,,,,,,,,-424,-623,-623',
',-623,,-623,-424,-424,-424,,,-424,-424,-424,560,-424,557,556,555,565',
'558,,,,-424,-424,-424,,,,568,,,,,-424,-424,,-424,-424,-424,-424,-424',
',,,,,,,,,563,,,,,,,,,573,572,576,575,,-424,-424,-424,-424,-424,-424',
'-424,-424,-424,-424,-424,-424,-424,-424,,,-424,-424,-424,,,-424,,272',
'-424,,,-424,-424,,-424,569,-424,,-424,,-424,-424,-424,-424,-424,-424',
'-424,,-424,-424,-424,,,,,,736,437,,,737,,,-424,-424,,-424,,-424,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,272',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,433,437,,,432,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,487,430,,,488,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,272,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'651,430,,,652,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,653,437,,,654,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,272,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'853,437,,,854,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,682,430,,,683,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,272,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'685,437,,,686,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,560,165,557,556,555,565,558,560,,557,556,555',
'565,558,,,568,,,,,158,,568,560,,557,556,555,565,558,,,,,,,,563,,568',
',,,,563,,573,572,576,575,,,,573,572,576,575,,,,560,563,557,556,555,565',
'558,,,,573,572,576,575,,,568,,,,,221,569,,,,,,,569,,,,,,,,,563,1031',
'437,,,1032,,,569,,,576,575,,161,162,,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,272,,,,,569,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,1029,430,,,1030,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,272,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,560,165,557',
'556,555,565,558,560,,557,556,555,565,558,,,568,,,,,158,,568,,,,,,,,',
',,,,,,563,,,,,,,563,,426,430,576,575,427,,,,,576,575,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,569,,,272,,,',
'569,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,560,165',
'557,556,555,565,558,560,,557,556,555,565,558,,,568,,,,,158,,568,,,,',
',,,,,,,,,,563,,,,,,,563,,651,430,576,575,652,,,,,576,575,,,161,162,',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,569,,,272',
',,,569,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165',
',,,,653,437,,,654,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,',
'142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,487,430,,,488,,,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,',
',,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,560,165',
'557,556,555,565,558,560,,557,556,555,565,558,,,568,,,,,158,,568,560',
',557,556,555,565,558,,,,,,,,563,752,568,,,,,563,,573,572,576,575,,,',
'573,572,576,575,,,,,563,752,560,,557,556,555,565,558,573,572,576,575',
',,,,,568,,560,569,557,556,555,565,558,,569,,,,,,,,568,,,,563,,,,,569',
',,,,,576,575,,,,,,563,,,734,430,,,735,,573,572,576,575,,,,161,162,,157',
'139,140,141,148,145,147,,569,142,143,,,,163,164,149,150,,,,,,272,,,569',
',,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,1001',
'437,,,1000,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,560,165,557,556,555,565,558,,,,,,,,,,568,,,,,158',
',,,,,,,,,,,,,,,,563,,,,,,,,,573,572,576,575,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,569' ]
        racc_action_table = arr = ::Array.new(26268, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'432,342,391,1031,1044,1030,309,432,432,432,598,664,22,432,432,563,432',
'563,563,563,982,563,982,348,677,590,493,29,903,665,925,1029,652,1,388',
'730,432,432,677,432,432,432,432,432,786,725,450,450,22,851,352,718,734',
'563,682,850,341,362,545,64,493,716,563,665,362,391,349,432,432,432,432',
'432,432,432,432,432,432,432,432,432,432,1031,852,432,432,432,583,432',
'652,755,755,432,29,309,432,692,692,388,664,432,786,432,735,432,432,432',
'432,432,432,432,737,432,736,432,29,342,598,1031,1044,1030,342,682,1031',
'1044,1030,654,432,432,348,432,590,432,654,654,654,598,450,654,654,654',
'598,654,903,432,925,1029,64,903,701,925,1029,654,654,654,851,352,682',
'734,683,682,693,654,654,545,654,654,654,654,654,850,341,349,850,682',
'850,341,737,359,736,755,494,582,852,367,359,692,583,852,651,455,367',
'583,654,654,654,654,654,654,654,654,654,654,654,654,654,654,42,735,654',
'654,654,225,654,654,494,737,654,736,224,654,654,691,654,688,654,683',
'654,485,654,654,654,654,654,654,654,702,654,687,654,44,44,314,314,684',
'651,455,702,618,42,681,41,654,654,654,654,227,654,653,654,679,683,485',
'42,683,653,653,653,225,654,653,653,653,594,653,224,330,594,683,330,702',
'702,582,653,653,653,653,582,80,951,672,853,951,41,653,653,80,653,653',
'653,653,653,717,670,717,717,717,41,717,618,618,615,227,379,702,663,379',
'364,618,44,44,314,314,593,364,653,653,653,653,653,653,653,653,653,653',
'653,653,653,653,657,27,653,653,653,853,653,653,27,765,653,385,853,653',
'653,655,653,853,653,646,653,853,653,653,653,653,653,653,653,811,653',
'653,653,615,615,379,379,593,640,853,770,717,615,382,593,653,653,653',
'653,593,653,98,653,593,318,20,20,635,98,98,98,365,653,98,98,98,631,98',
'365,879,627,593,385,385,385,98,363,98,98,98,879,345,811,363,592,625',
'345,98,98,811,98,98,98,98,98,361,318,921,811,921,921,921,361,921,382',
'382,382,375,360,427,318,377,748,879,879,360,811,748,98,98,98,98,98,98',
'98,98,98,98,98,98,98,98,705,705,98,98,98,592,98,98,393,622,98,585,592',
'98,98,879,98,592,98,427,98,592,98,98,98,98,98,98,98,126,98,584,98,427',
'126,126,375,375,375,592,377,377,377,921,18,98,98,98,98,366,98,101,98',
'634,426,579,366,577,101,101,101,369,98,101,101,101,481,101,369,393,393',
'393,574,521,570,101,480,101,101,101,521,788,331,789,685,331,18,101,101',
'521,101,101,101,101,101,634,426,791,481,792,18,290,481,481,481,481,290',
'793,480,634,426,753,480,480,480,480,753,795,101,101,101,101,101,101',
'101,101,101,101,101,101,101,101,796,462,101,101,101,685,101,101,335',
'797,101,335,685,101,101,798,101,685,101,561,101,685,101,101,101,101',
'101,101,101,5,101,934,101,462,5,860,934,462,462,685,860,461,340,340',
'553,101,101,101,101,552,101,433,101,676,676,676,676,676,433,433,433',
'551,101,469,433,433,339,433,339,339,339,339,339,461,723,723,433,461',
'461,469,469,697,339,810,697,749,749,433,433,549,433,433,433,433,433',
'469,1015,1015,814,469,469,469,469,548,339,339,714,817,714,714,714,818',
'714,339,339,339,339,822,433,433,433,433,433,433,433,433,433,433,433',
'433,433,433,326,326,433,433,433,975,433,975,975,975,433,975,714,433',
'823,824,825,339,433,829,433,714,433,433,433,433,433,433,433,830,433',
'433,433,832,833,835,922,838,922,922,922,535,922,975,840,433,433,534',
'433,843,433,581,581,581,581,581,581,533,846,350,581,581,433,525,522',
'581,350,581,581,581,581,581,581,581,922,350,517,515,512,581,581,581',
'581,581,581,581,756,756,581,511,756,756,756,445,581,581,496,581,581',
'581,581,581,581,581,581,581,856,581,581,581,495,581,581,466,581,581',
'581,445,445,445,445,445,445,445,445,445,445,445,965,445,445,301,465',
'445,445,965,581,861,301,581,862,863,581,581,965,872,581,301,581,445',
'873,445,581,445,445,445,445,445,445,445,581,445,464,463,966,581,581',
'581,581,581,581,966,442,434,581,581,425,445,424,445,966,421,581,417',
'890,581,581,581,415,412,581,581,2,2,2,2,2,2,390,894,740,2,2,895,387',
'897,2,740,2,2,2,2,2,2,2,898,740,384,381,353,2,2,2,2,2,2,2,351,347,2',
'346,336,333,332,656,2,2,2,2,2,2,2,2,2,2,2,2,923,2,2,2,328,2,2,927,2',
'2,2,656,656,656,656,656,656,656,656,656,656,656,854,656,656,17,928,656',
'656,854,2,322,17,2,854,319,2,2,854,933,2,17,2,656,315,656,2,656,656',
'656,656,656,656,656,2,656,313,941,955,2,2,2,2,2,2,955,305,944,2,2,945',
'656,946,305,955,947,2,949,308,2,2,2,305,307,2,2,816,816,816,816,816',
'816,304,959,968,816,816,298,297,296,816,968,816,816,816,816,816,816',
'816,294,968,967,283,970,816,816,816,816,816,816,816,971,972,816,973',
'974,280,976,420,816,816,279,816,816,816,816,816,816,816,816,816,268',
'816,816,816,265,816,816,233,816,816,816,420,420,420,420,420,420,420',
'420,420,420,420,686,420,420,964,229,420,420,686,816,228,964,816,686',
'226,816,816,686,733,816,964,816,420,207,420,816,420,420,420,420,420',
'420,420,816,420,124,90,1032,816,816,816,816,816,816,1032,596,1000,816',
'816,1032,420,1001,596,1032,1003,816,89,88,816,816,816,596,87,816,816',
'896,896,896,896,896,896,72,48,1007,896,896,43,1014,40,896,1007,896,896',
'896,896,896,896,896,1019,1007,1020,1021,1022,896,896,896,896,896,896',
'896,1023,891,896,891,891,891,1024,891,896,896,1025,896,896,896,896,896',
'896,896,896,896,1028,896,896,896,25,896,896,19,896,896,896,440,440,440',
'440,440,440,440,440,440,440,440,320,440,440,303,16,440,440,320,896,15',
'303,896,1033,1034,896,896,320,13,896,303,896,440,3,440,896,440,440,440',
'440,440,440,440,896,440,1046,,893,896,896,896,896,896,896,893,302,,896',
'896,,440,,302,893,,896,,,896,896,896,302,,896,896,807,807,807,807,807',
'807,,,223,807,807,,,,807,223,807,807,807,807,807,807,807,,223,,,,807',
'807,807,807,807,807,807,,999,807,999,999,999,,999,807,807,,807,807,807',
'807,807,807,807,807,807,,807,807,807,,807,807,,807,807,807,774,774,774',
'774,774,774,774,774,774,774,774,49,774,774,,,774,774,49,807,,,807,,',
'807,807,49,,807,,807,774,,774,807,774,774,774,774,774,774,774,807,774',
',,,807,807,807,807,807,807,,,,807,807,,774,,,,,807,,,807,807,807,,,807',
'807,806,806,806,806,806,806,,,,806,806,,,,806,,806,806,806,806,806,806',
'806,9,9,9,9,9,806,806,806,806,806,806,806,,,806,510,510,510,510,510',
'806,806,,806,806,806,806,806,806,806,806,806,,806,806,806,,806,806,',
'806,806,806,484,484,484,484,484,484,484,484,484,484,484,,484,484,,,484',
'484,,806,,,806,,,806,806,,,806,,806,484,,484,806,484,484,484,484,484',
'484,484,806,484,,,,806,806,806,806,806,806,,,,806,806,484,484,,,,,806',
',,806,806,806,,,806,806,802,802,802,802,802,802,,,,802,802,,,,802,,802',
'802,802,802,802,802,802,292,292,292,292,292,802,802,802,802,802,802',
'802,,,802,,,,,,802,802,,802,802,802,802,802,802,802,802,802,,802,802',
'802,,802,802,,802,802,802,777,777,777,777,777,777,777,777,777,777,777',
',777,777,,,777,777,,802,,,802,,,802,802,,,802,,802,777,,777,802,777',
'777,777,777,777,777,777,802,777,,,,802,802,802,802,802,802,,,,802,802',
',777,,,,,802,,,802,802,802,,,802,802,578,578,578,578,578,578,,,,578',
'578,,,,578,,578,578,578,578,578,578,578,,,,,,578,578,578,578,578,578',
'578,,,578,,,,,,578,578,,578,578,578,578,578,578,578,578,578,,578,578',
'578,,578,578,,578,578,578,875,875,875,875,875,875,875,875,875,875,875',
',875,875,,,875,875,,578,,,578,,,578,578,,,578,,578,875,,875,578,875',
'875,875,875,875,875,875,578,875,,,,578,578,578,578,578,578,,,,578,578',
',875,,,,,578,,,578,578,578,,,578,578,700,700,700,700,700,700,,,,700',
'700,,,,700,,700,700,700,700,700,700,700,,,,,,700,700,700,700,700,700',
'700,,,700,,,,,,700,700,,700,700,700,700,700,700,700,700,700,,700,700',
'700,,700,700,,700,700,700,878,878,878,878,878,878,878,878,878,878,878',
',878,878,,,878,878,,700,,,700,,,700,700,,,700,,700,878,,878,700,878',
'878,878,878,878,878,878,700,878,,,,700,700,700,700,700,700,,,,700,700',
',878,,,,,700,,,700,700,700,,,700,700,699,699,699,699,699,699,,,,699',
'699,,,,699,,699,699,699,699,699,699,699,,,,,,699,699,699,699,699,699',
'699,,,699,,,,,,699,699,,699,699,699,699,699,699,699,699,699,,699,699',
'699,,699,699,,699,699,699,772,772,772,772,772,772,772,772,772,772,772',
',772,772,,,772,772,,699,,,699,,,699,699,,,699,,699,772,,772,699,772',
'772,772,772,772,772,772,699,772,,,,699,699,699,699,699,699,,,,699,699',
',772,,,,,699,,,699,699,699,,,699,699,300,300,300,300,300,300,,,,300',
'300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300,300,300,300',
'300,,,300,,,,,,300,300,,300,300,300,300,300,300,300,300,300,,300,300',
'300,,300,300,,300,300,300,24,24,24,24,24,24,24,24,24,24,24,,24,24,,',
'24,24,,300,,,300,,,300,300,,,300,,300,24,,24,300,24,24,24,24,24,24,24',
'300,24,,,,300,300,300,300,300,300,,,,300,300,,24,,,,,300,,,300,300,300',
',,300,300,963,963,963,963,963,963,,,,963,963,,,,963,,963,963,963,963',
'963,963,963,,,,,,963,963,963,963,963,963,963,,,963,,,,,,963,963,,963',
'963,963,963,963,963,963,963,963,,963,963,963,,963,963,,963,963,963,690',
'690,690,690,690,690,690,690,690,690,690,,690,690,,,690,690,,963,,,963',
',,963,963,,,963,,963,690,,690,963,690,690,690,690,690,690,690,963,690',
',,,963,963,963,963,963,963,,,,963,963,,690,,,,,963,,,963,963,963,,,963',
'963,900,900,900,900,900,900,,,,900,900,,,,900,,900,900,900,900,900,900',
'900,,,,,,900,900,900,900,900,900,900,,,900,,,,,,900,900,,900,900,900',
'900,900,900,900,900,900,,900,900,900,,900,900,,900,900,900,767,767,767',
'767,767,767,767,767,767,767,767,,767,767,,,767,767,,900,,,900,,,900',
'900,,,900,,900,767,,767,900,767,767,767,767,767,767,767,900,767,,,,900',
'900,900,900,900,900,,,,900,900,,767,,,,,900,,,900,900,900,,,900,900',
'295,295,295,295,295,295,,,,295,295,,,,295,,295,295,295,295,295,295,295',
',,,,,295,295,295,295,295,295,295,,,295,,,,,,295,295,,295,295,295,295',
'295,295,295,295,295,,295,295,295,,295,295,,295,295,295,779,779,779,779',
'779,779,779,779,779,779,779,,779,779,,,779,779,,295,,,295,,,295,295',
',,295,,295,779,,779,295,779,779,779,779,779,779,779,295,779,,,,295,295',
'295,295,295,295,,,,295,295,,779,,,,,295,,,295,295,295,,,295,295,978',
'978,978,978,978,978,,,,978,978,,,,978,,978,978,978,978,978,978,978,',
',,,,978,978,978,978,978,978,978,,,978,,,,,,978,978,,978,978,978,978',
'978,978,978,978,978,,978,978,978,,978,978,,978,978,978,277,277,277,277',
'277,277,277,277,277,277,277,,277,277,,,277,277,,978,,,978,,,978,978',
',,978,,978,277,,277,978,277,277,277,277,277,277,277,978,277,,,,978,978',
'978,978,978,978,,,,978,978,,277,,,,,978,,,978,978,978,,,978,978,983',
'983,983,983,983,983,,,,983,983,,,,983,,983,983,983,983,983,983,983,',
',,,,983,983,983,983,983,983,983,,,983,,,,,,983,983,,983,983,983,983',
'983,983,983,983,983,,983,983,983,,983,983,,983,983,983,781,781,781,781',
'781,781,781,781,781,781,781,,781,781,,,781,781,,983,,,983,,,983,983',
',,983,,983,781,,781,983,781,781,781,781,781,781,781,983,781,,,,983,983',
'983,983,983,983,,,,983,983,,781,,,,,983,,,983,983,983,,,983,983,232',
'232,232,232,232,232,,,,232,232,,,,232,,232,232,232,232,232,232,232,',
',,,,232,232,232,232,232,232,232,,,232,,,,,,232,232,,232,232,232,232',
'232,232,232,232,232,,232,232,232,,232,232,,232,232,232,531,531,531,531',
'531,531,531,531,531,531,531,,531,531,,,531,531,,232,,,232,,,232,232',
',,232,,232,531,,531,232,531,531,531,531,531,531,531,232,531,,,,232,232',
'232,232,232,232,,,,232,232,,531,,,,,232,,,232,232,232,,,232,232,986',
'986,986,986,986,986,,,,986,986,,,,986,,986,986,986,986,986,986,986,',
',,,,986,986,986,986,986,986,986,,839,986,839,839,839,,839,986,986,,986',
'986,986,986,986,986,986,986,986,,986,986,986,,986,986,,986,986,986,841',
',841,841,841,,841,977,839,977,977,977,,977,,,,839,,986,,,986,,,986,986',
',,986,,986,,,,986,,,841,,,,,986,,977,,,986,986,986,986,986,986,,,,986',
'986,,1013,,1013,1013,1013,986,1013,,986,986,986,,,986,986,987,987,987',
'987,987,987,,,,987,987,,,,987,,987,987,987,987,987,987,987,1013,,,,',
'987,987,987,987,987,987,987,,,987,,,,,,987,987,,987,987,987,987,987',
'987,987,987,987,,987,987,987,,987,987,,987,987,987,470,470,470,470,470',
'470,470,,,470,470,,,,,,470,470,,987,,,987,,,987,987,,,987,,987,470,',
'470,987,470,470,470,470,470,470,470,987,470,,,,987,987,987,987,987,987',
',,,987,987,,,,,,,987,,,987,987,987,,,987,987,857,857,857,857,857,857',
',,,857,857,,,,857,,857,857,857,857,857,857,857,,,,,,857,857,857,857',
'857,857,857,,,857,,,,,,857,857,,857,857,857,857,857,857,857,857,857',
',857,857,857,,857,857,,857,857,857,482,482,482,482,482,482,482,,,482',
'482,,,,,,482,482,,857,,,857,,,857,857,,,857,,857,482,,482,857,482,482',
'482,482,482,482,482,857,482,,,,857,857,857,857,857,857,,,,857,857,,',
',,,,857,,,857,857,857,,,857,857,36,36,36,36,36,36,,,,36,36,,,,36,,36',
'36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36,36',
'36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,483,483,483,483,483,483',
'483,483,,483,483,,,,,,483,483,,36,,,36,,,36,36,,,36,,36,483,,483,36',
'483,483,483,483,483,483,483,36,483,,,,36,36,36,36,36,36,,,,36,36,,,',
',,,36,,,36,36,36,,,36,36,209,209,209,209,209,209,,,,209,209,,,,209,',
'209,209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,',
',,,,209,209,,209,209,209,209,209,209,209,209,209,,209,209,209,,209,209',
',209,209,209,471,,,,,,,,,,,,,,,,471,471,,209,,,209,,,209,209,,,209,',
'209,471,,471,209,471,471,471,471,,,471,209,471,,,,209,209,209,209,209',
'209,,,,209,209,,,,,,,209,,,209,209,209,,,209,209,930,930,930,930,930',
'930,,,,930,930,,,,930,,930,930,930,930,930,930,930,,,,,,930,930,930',
'930,930,930,930,,,930,,,,,,930,930,,930,930,930,930,930,930,930,930',
'930,,930,930,930,,930,930,,930,930,930,460,460,460,460,460,460,460,460',
'460,460,460,,460,460,,,460,460,,930,,,930,,,930,930,,,930,,930,460,',
'460,930,460,460,460,460,460,460,460,930,460,,,,930,930,930,930,930,930',
',,,930,930,,,,,,,930,,,930,930,930,,,930,930,750,750,750,750,750,750',
',,,750,750,,,,750,,750,750,750,750,750,750,750,,,,,,750,750,750,750',
'750,750,750,,,750,,,,,,750,750,,750,750,750,750,750,750,750,750,750',
',750,750,750,,750,750,,750,750,750,459,459,459,459,459,459,459,459,459',
'459,459,,459,459,,,459,459,,750,,,750,,,750,750,,,750,,750,459,,459',
'750,459,459,459,459,459,459,459,750,459,,,,750,750,750,750,750,750,',
',,750,750,,,,,,,750,,,750,750,750,,,750,750,751,751,751,751,751,751',
',,,751,751,,,,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751',
'751,751,751,,,751,,,,,,751,751,,751,751,751,751,751,751,751,751,751',
',751,751,751,,751,751,,751,751,751,472,,,,,,,,,,,,,,,,472,472,,751,',
',751,,,751,751,,,751,,751,472,,472,751,472,472,472,472,,,472,751,472',
',,,751,751,751,751,751,751,,,,751,751,,,,,,,751,,,751,751,751,,,751',
'751,325,325,325,325,325,325,,,,325,325,,,,325,,325,325,325,325,325,325',
'325,,,,,,325,325,325,325,325,325,325,,,325,,,,,,325,325,,325,325,325',
'325,325,325,325,325,325,,325,325,325,,325,325,,325,325,325,473,,,,,',
',,,,,,,,,,473,473,,325,,,325,,,325,325,,,325,,325,473,,473,325,473,473',
'473,473,,,473,325,473,,,,325,325,325,325,325,325,,,,325,325,,,,,,,325',
',,325,325,325,,,325,325,847,847,847,847,847,847,,,,847,847,,,,847,,847',
'847,847,847,847,847,847,,,,,,847,847,847,847,847,847,847,,,847,,,,,',
'847,847,,847,847,847,847,847,847,847,847,847,,847,847,847,,847,847,',
'847,847,847,474,,,,,,,,,,,,,,,,474,474,,847,,,847,,,847,847,,,847,,847',
'474,,474,847,474,474,474,474,,,474,847,474,,,,847,847,847,847,847,847',
',,,847,847,,,,,,,847,,,847,847,847,,,847,847,848,848,848,848,848,848',
',,,848,848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848,848,848',
'848,848,848,,,848,,,,,,848,848,,848,848,848,848,848,848,848,848,848',
',848,848,848,,848,848,,848,848,848,475,475,475,475,475,475,475,,,475',
'475,,,,,,475,475,,848,,,848,,,848,848,,,848,,848,475,,475,848,475,475',
'475,475,475,475,475,848,475,,,,848,848,848,848,848,848,,,,848,848,,',
',,,,848,,,848,848,848,,,848,848,406,406,406,406,406,406,,,,406,406,',
',,406,,406,406,406,406,406,406,406,,,,,,406,406,406,406,406,406,406',
',,406,,,,,,406,406,406,406,406,406,406,406,406,406,406,406,,406,406',
'406,,406,406,,406,406,406,477,477,477,477,477,477,477,,,477,477,,,,',
',477,477,,406,,,406,,,406,406,,,406,,406,477,,477,406,477,477,477,477',
'477,477,477,406,477,,,,406,406,406,406,406,406,,,,406,406,,,,,,,406',
',,406,406,406,,,406,406,757,757,757,757,757,757,,,,757,757,,,,757,,757',
'757,757,757,757,757,757,,,,,,757,757,757,757,757,757,757,,,757,,,,,',
'757,757,,757,757,757,757,757,757,757,757,757,,757,757,757,,757,757,',
'757,757,757,479,479,479,479,479,479,479,,,479,479,,,,,,479,479,,757',
',,757,,,757,757,,,757,,757,479,,479,757,479,479,479,479,479,479,479',
'757,479,,,,757,757,757,757,757,757,,,,757,757,,,,,,,757,,,757,757,757',
',,757,757,284,284,284,,284,,,,284,284,,,,284,,284,284,284,284,284,284',
'284,,,,,,284,284,284,284,284,284,284,,,284,,,,,,,284,,,284,284,284,284',
'284,284,284,284,,284,284,284,,284,284,,284,284,284,476,476,476,476,476',
'476,476,,,476,476,,,,,,476,476,,284,,,284,,,284,284,,,284,,,476,,476',
'284,476,476,476,476,476,476,476,284,476,,,,284,284,284,284,284,284,',
',,284,284,,,,,,,284,,,284,284,284,,,284,284,673,673,673,,673,,,,673',
'673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673,673,673,673,673',
'673,,,673,,,,,,,673,,,673,673,673,673,673,673,673,673,,673,673,673,',
'673,673,,673,673,673,478,478,478,478,478,478,478,,,478,478,,,,,,478',
'478,,673,,,673,,,673,673,,,673,,,478,,478,673,478,478,478,478,478,478',
'478,673,478,,,,673,673,673,673,673,673,,,,673,673,,,,,,,673,,,673,673',
'673,,,673,673,876,876,876,,876,,,,876,876,,,,876,,876,876,876,876,876',
'876,876,,,,,,876,876,876,876,876,876,876,,,876,,,,,,,876,,,876,876,876',
'876,876,876,876,876,876,876,876,876,,876,876,,876,876,876,468,,,,,,',
',,,,,,,,,468,468,,876,,,876,,,876,876,,,876,,,468,876,468,876,468,468',
'468,468,,,,876,,,,,876,876,876,876,876,876,,,,876,876,,,,,,,876,,876',
'876,876,876,,,876,876,343,343,343,,343,,,,343,343,,,,343,,343,343,343',
'343,343,343,343,,,,,,343,343,343,343,343,343,343,,,343,,,,,,,343,,,343',
'343,343,343,343,343,343,343,,343,343,343,,343,343,,343,343,343,467,',
',,,,,,,,,,,,,,467,467,,343,,,343,,,343,343,,,343,,,467,,467,343,467',
'467,467,467,,,,343,,,,,343,343,343,343,343,343,,,,343,343,,,,,,,343',
',,343,343,343,,,343,343,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61',
'61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61',
'61,,61,61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61',
',,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61,,,61,61',
'61,,,61,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62',
'62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62',
',62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,',
',,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62',
'63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63',
'63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,',
'63,63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63,46,46,46,,46',
',,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46',
',,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,',
',,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46',
'46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,66,66,66,,66,,,,66,66,,,',
'66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66',
'66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66',
',,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,',
',,,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67',
'67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67',
'67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67',
',,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67',
'67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,',
',70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70',
'70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70',
',,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,,,70',
'70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71',
'71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,',
',71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71',
'71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,766,766,766,,766,,',
',766,766,,,,766,,766,766,766,766,766,766,766,,,,,,766,766,766,766,766',
'766,766,,,766,,,,,,,766,,,766,766,766,766,766,766,766,766,,766,766,766',
',766,766,,766,766,766,,,,,,,,,,,,,,,,,,,,766,,,766,,,766,766,,,766,',
',,,,766,,,,,,,,766,,,,,766,766,766,766,766,766,,,,766,766,,,,,,,766',
',,766,766,766,,,766,766,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45',
'45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45',
'45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45',
',,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45',
',,45,45,678,678,678,,678,,,,678,678,,,,678,,678,678,678,678,678,678',
'678,,,,,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678',
'678,678,678,678,,678,678,678,,678,678,,,,678,,,,,,,,,,,,,,,,,,,,678',
',,678,,,678,678,,,678,,,,,,,,,,,,,,,,,,,678,678,678,678,678,678,,,,678',
'678,,,,,,,678,,,678,678,678,,,678,678,458,458,458,,458,,,,458,458,,',
',458,,458,458,458,458,458,458,458,,,,,,458,458,458,458,458,458,458,',
',458,,,,,,,458,,,458,458,458,458,458,458,458,458,,458,458,458,,458,458',
',458,458,458,,,,,,,,,,,,,,,,,,,,458,,,458,,,458,458,,,458,,,,,,458,',
',,,,,,458,,,,,458,458,458,458,458,458,,,,458,458,,,,,,,458,,,458,458',
'458,,,458,458,649,649,649,,649,,,,649,649,,,,649,,649,649,649,649,649',
'649,649,,,,,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649',
'649,649,649,649,649,,649,649,649,,649,649,,649,649,649,,,,,,,,,,,,,',
',,,,,,649,,,649,,,649,649,,,649,,,,,,649,,,,,,,,649,,,,,649,649,649',
'649,649,649,,,,649,649,,,,,,,649,,,649,649,649,,,649,649,1004,1004,1004',
',1004,,,,1004,1004,,,,1004,,1004,1004,1004,1004,1004,1004,1004,,,,,',
'1004,1004,1004,1004,1004,1004,1004,,,1004,,,,,,,1004,,,1004,1004,1004',
'1004,1004,1004,1004,1004,1004,1004,1004,1004,,1004,1004,,1004,1004,1004',
',,,,,,,,,,,,,,,,,,,1004,,,1004,,,1004,1004,,,1004,,1004,,1004,,1004',
',,,,,,,1004,,,,,1004,1004,1004,1004,1004,1004,,,,1004,1004,,,,,,,1004',
',1004,1004,1004,1004,,,1004,1004,648,648,648,,648,,,,648,648,,,,648',
',648,648,648,648,648,648,648,,,,,,648,648,648,648,648,648,648,,,648',
',,,,,,648,,,648,648,648,648,648,648,648,648,,648,648,648,,648,648,,648',
'648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648,648,,,648,,,,,,648,,,,,,',
',648,,,,,648,648,648,648,648,648,,,,648,648,,,,,,,648,,,648,648,648',
',,648,648,858,858,858,,858,,,,858,858,,,,858,,858,858,858,858,858,858',
'858,,,,,,858,858,858,858,858,858,858,,,858,,,,,,,858,,,858,858,858,858',
'858,858,858,858,,858,858,858,,858,858,,858,858,858,,,,,,,,,,,,,,,,,',
',,858,,,858,,,858,858,,,858,,,,,,858,,,,,,,,858,,,,,858,858,858,858',
'858,858,,,,858,858,,,,,,,858,,,858,858,858,,,858,858,457,457,457,,457',
',,,457,457,,,,457,,457,457,457,457,457,457,457,,,,,,457,457,457,457',
'457,457,457,,,457,,,,,,,457,,,457,457,457,457,457,457,457,457,,457,457',
'457,,457,457,,457,457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457',
',,,,,457,,,,,,,,457,,,,,457,457,457,457,457,457,,,,457,457,,,,,,,457',
',,457,457,457,,,457,457,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38',
'38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38',
'38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,',
',,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38',
'38,114,114,114,114,114,,,,114,114,,,,114,,114,114,114,114,114,114,114',
',,,,,114,114,114,114,114,114,114,,,114,,,,,,114,114,114,114,114,114',
'114,114,114,114,114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,',
',,,,,,,,,,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114',
'114,114,114,114,,,,114,114,,,,,,114,114,,,114,114,114,,,114,114,119',
'119,119,,119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119',
'119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119',
'119,,119,119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119',
',,119,119,,,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119',
'119,,,,,,,119,,,119,119,119,,,119,119,120,120,120,,120,,,,120,120,,',
',120,,120,120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120,',
',120,,,,,,,120,,,120,120,120,120,120,120,120,120,,120,120,120,,120,120',
',120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,',
',,,,,,120,,,,,120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120',
'120,,,120,120,121,121,121,,121,,,,121,121,,,,121,,121,121,121,121,121',
'121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121',
'121,121,121,121,121,,121,121,121,,121,121,,121,121,121,,,,,,,,,,,,,',
',,,,,,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121,121,121',
'121,121,121,,,,121,121,,,,,,,121,,,121,121,121,,,121,121,122,122,122',
',122,,,,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122',
'122,122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122',
'122,122,,122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122',
',,122,,,,,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,',
',,,122,,,122,122,122,,,122,122,123,123,123,123,123,,,,123,123,,,,123',
',123,123,123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123',
',,,,,123,123,,123,123,123,123,123,123,123,123,123,,123,123,123,,123',
'123,,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,',
',,123,,,,,,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123,,',
'123,123,123,,,123,123,645,645,645,,645,,,,645,645,,,,645,,645,645,645',
'645,645,645,645,,,,,,645,645,645,645,645,645,645,,,645,,,,,,,645,,,645',
'645,645,645,645,645,645,645,,645,645,645,,645,645,,645,645,645,,,,,',
',,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,,,645,,,,,,,,645,,,,,645',
'645,645,645,645,645,,,,645,645,,,,,,,645,,,645,645,645,,,645,645,644',
'644,644,,644,,,,644,644,,,,644,,644,644,644,644,644,644,644,,,,,,644',
'644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644,644',
'644,,644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644',
',,644,644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644',
'644,,,,,,,644,,,644,644,644,,,644,644,768,768,768,,768,,,,768,768,,',
',768,,768,768,768,768,768,768,768,,,,,,768,768,768,768,768,768,768,',
',768,,,,,,,768,,,768,768,768,768,768,768,768,768,,768,768,768,,768,768',
',768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,,,,,768,',
',,,,,,768,,,,,768,768,768,768,768,768,,,,768,768,,,,,,,768,,,768,768',
'768,,,768,768,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,',
',37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37',
'37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,',
',,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,210,210',
'210,,210,,,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210',
'210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210',
',210,210,210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210',
'210,,,210,,210,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210',
'210,,,,,,,210,,,210,210,210,,,210,210,211,211,211,,211,,,,211,211,,',
',211,,211,211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,',
',211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211',
',211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,',
',,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211',
'211,,,211,211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212',
'212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212',
'212,212,212,212,212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,',
',,,,,,,,,212,,,212,,,212,212,,,212,,212,,212,,212,,,,,,,,212,,,,,212',
'212,212,212,212,212,,,,212,212,,,,,,,212,,212,212,212,212,,,212,212',
'639,639,639,,639,,,,639,639,,,,639,,639,639,639,639,639,639,639,,,,',
',639,639,639,639,639,639,639,,,639,,,,,,,639,,,639,639,639,639,639,639',
'639,639,,639,639,639,,639,639,,639,639,639,,,,,,,,,,,,,,,,,,,,639,,',
'639,,,639,639,,,639,,,,,,639,,,,,,,,639,,,,,639,639,639,639,639,639',
',,,639,639,,,,,,,639,,,639,639,639,,,639,639,638,638,638,,638,,,,638',
'638,,,,638,,638,638,638,638,638,638,638,,,,,,638,638,638,638,638,638',
'638,,,638,,,,,,,638,,,638,638,638,638,638,638,638,638,,638,638,638,',
'638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,',
',,,638,,,,,,,,638,,,,,638,638,638,638,638,638,,,,638,638,,,,,,,638,',
',638,638,638,,,638,638,215,215,215,,215,,,,215,215,,,,215,,215,215,215',
'215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215',
'215,215,215,215,215,215,215,,215,215,215,,215,215,,215,215,215,,,,,',
',,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,,,215,,,,,215',
'215,215,215,215,215,,,,215,215,,,,,,,215,,,215,215,215,,,215,215,216',
'216,216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216',
'216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216',
'216,,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216',
',,216,216,,,216,,216,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,',
',,216,216,,,,,,,216,,,216,216,216,,,216,216,217,217,217,,217,,,,217',
'217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217',
'217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,',
'217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,',
',,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217,,,,,,,217,',
',217,217,217,,,217,217,218,218,218,,218,,,,218,218,,,,218,,218,218,218',
'218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218',
'218,218,218,218,218,218,218,,218,218,218,,218,218,,218,218,218,,,,,',
',,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,,,218',
'218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218,,,218,218,219',
'219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219',
'219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219',
'219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219',
',,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219',
'219,,,,,,,219,,,219,219,219,,,219,219,220,220,220,,220,,,,220,220,,',
',220,,220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220,220,',
',220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,,220,220',
',220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,',
',,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,220,,,,,,220,,,220',
'220,220,,,220,220,637,637,637,,637,,,,637,637,,,,637,,637,637,637,637',
'637,637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637',
'637,637,637,637,637,637,637,637,637,637,,637,637,,637,637,637,,,,,,',
',,,,,,,,,,,,,637,,,637,,,637,637,,,637,,,,637,,637,,,,,,,,637,,,,,637',
'637,637,637,637,637,,,,637,637,,,,,,,637,,637,637,637,637,,,637,637',
'636,636,636,,636,,,,636,636,,,,636,,636,636,636,636,636,636,636,,,,',
',636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636,636',
'636,636,636,636,636,636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,,,,636',
',,636,,,636,636,,,636,,636,,636,,636,,,,,,,,636,,,,,636,636,636,636',
'636,636,,,,636,636,,,,,,,636,,636,636,636,636,,,636,636,633,633,633',
',633,,,,633,633,,,,633,,633,633,633,633,633,633,633,,,,,,633,633,633',
'633,633,633,633,,,633,,,,,,,633,,,633,633,633,633,633,633,633,633,,633',
'633,633,,633,633,,633,633,633,,,,,,,,,,,,,,,,,,,,633,,,633,,,633,633',
',,633,,,,,,633,,,,,,,,633,,,,,633,633,633,633,633,633,,,,633,633,,,',
',,,633,,,633,633,633,,,633,633,632,632,632,,632,,,,632,632,,,,632,,632',
'632,632,632,632,632,632,,,,,,632,632,632,632,632,632,632,,,632,,,,,',
',632,,,632,632,632,632,632,632,632,632,,632,632,632,,632,632,,632,632',
'632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,,632,,,,632,,,,,,,',
'632,,,,,632,632,632,632,632,632,,,,632,632,,,,,,,632,,,632,632,632,',
',632,632,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34',
'34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,',
'34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34',
',,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34',
'34,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33',
'33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33',
',33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,',
',33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,32',
'32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32',
'32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32',
'32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,',
',32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,231,231,231',
',231,,,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231',
'231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231',
'231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231',
',,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,,,',
',,,231,,,231,231,231,,,231,231,456,456,456,,456,,,,456,456,,,,456,,456',
'456,456,456,456,456,456,,,,,,456,456,456,456,456,456,456,,,456,,,,,',
',456,,,456,456,456,456,456,456,456,456,,456,456,456,,456,456,,456,456',
'456,,,,,,,,,,,,,,,,,,,,456,,,456,,,456,456,,,456,,,,,,456,,,,,,,,456',
',,,,456,456,456,456,456,456,,,,456,456,,,,,,,456,,,456,456,456,,,456',
'456,454,454,454,,454,,,,454,454,,,,454,,454,454,454,454,454,454,454',
',,,,,454,454,454,454,454,454,454,,,454,,,,,,,454,,,454,454,454,454,454',
'454,454,454,454,454,454,454,,454,454,,454,454,454,,,,,,,,,,,,,,,,,,',
',454,,,454,,,454,454,,,454,,454,,454,,454,,,,,,,,454,,,,,454,454,454',
'454,454,454,,,,454,454,,,,,,,454,,454,454,454,454,,,454,454,234,234',
'234,,234,,,,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234',
'234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234',
',234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234',
'234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234',
',,,,,,234,,,234,234,234,,,234,234,235,235,235,,235,,,,235,235,,,,235',
',235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235',
',,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235',
'235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,',
',235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,235,235',
',,235,235,236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236',
'236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236',
'236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,',
',,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236',
'236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236,237,237,237,,237',
',,,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237',
'237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237',
'237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237',
',,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,,,,,,,237',
',,237,237,237,,,237,237,238,238,238,,238,,,,238,238,,,,238,,238,238',
'238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238',
',,238,238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238',
',,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,',
',238,238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238,238,,,238,238',
'239,239,239,,239,,,,239,239,,,,239,,239,239,239,239,239,239,239,,,,',
',239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239',
'239,239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,',
'239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239',
',,,239,239,,,,,,,239,,,239,239,239,,,239,239,240,240,240,,240,,,,240',
'240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240',
'240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,',
'240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,',
',,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,,,,,240,',
',240,240,240,,,240,240,241,241,241,,241,,,,241,241,,,,241,,241,241,241',
'241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241',
'241,241,241,241,241,241,241,,241,241,241,,241,241,,241,241,241,,,,,',
',,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241',
'241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241,241,242',
'242,242,,242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242',
'242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242',
'242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242',
',,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242',
'242,,,,,,,242,,,242,242,242,,,242,242,243,243,243,,243,,,,243,243,,',
',243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,',
',243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243',
',243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,',
',,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243',
'243,,,243,243,244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244',
'244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244',
'244,244,244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,',
',,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244',
'244,244,244,,,,244,244,,,,,,,244,,,244,244,244,,,244,244,245,245,245',
',245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245',
'245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245',
'245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245',
',,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,',
',,,245,,,245,245,245,,,245,245,246,246,246,,246,,,,246,246,,,,246,,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,',
',246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246',
'246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246',
',,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246',
'246,247,247,247,,247,,,,247,247,,,,247,,247,247,247,247,247,247,247',
',,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247',
'247,247,247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247',
',,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247',
',,,247,247,,,,,,,247,,,247,247,247,,,247,247,248,248,248,,248,,,,248',
'248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248,248',
'248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248,',
'248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,',
',,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,',
',248,248,248,,,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,',
',,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249',
'249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250',
'250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250',
'250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250',
'250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250',
',,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250',
'250,,,,,,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251,251,,',
',251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,',
',251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251',
',251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,',
',,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251',
'251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,',
',,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252',
'252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252,252,253,253,253',
',253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253',
'253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253',
'253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253',
',,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,',
',,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254',
'254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,',
',254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254',
'254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254',
',,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254',
'254,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255',
',,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255',
'255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255',
',,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255',
',,,255,255,,,,,,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256',
'256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256',
'256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,',
'256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,',
',,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,',
',256,256,256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257',
'257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257',
'257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,',
',,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257',
'257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257,258',
'258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258',
'258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258',
'258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258',
',,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258',
'258,,,,,,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259,259,,',
',259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,',
',259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259',
',259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,',
',,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259',
'259,,,259,259,603,603,603,,603,,,,603,603,,,,603,,603,603,603,603,603',
'603,603,,,,,,603,603,603,603,603,603,603,,,603,,,,,,,603,,,603,603,603',
'603,603,603,603,603,,603,603,603,,603,603,,603,603,603,,,,,,,,,,,,,',
',,,,,,603,,,603,,,603,603,,,603,,,,,,603,,,,,,,,603,,,,,603,603,603',
'603,603,603,,,,603,603,,,,,,,603,,,603,603,603,,,603,603,599,599,599',
',599,,,,599,599,,,,599,,599,599,599,599,599,599,599,,,,,,599,599,599',
'599,599,599,599,,,599,,,,,,,599,,,599,599,599,599,599,599,599,599,,599',
'599,599,,599,599,,599,599,599,,,,,,,,,,,,,,,,,,,,599,,,599,,,599,599',
',,599,,,,,,599,,,,,,,,599,,,,,599,599,599,599,599,599,,,,599,599,,,',
',,,599,,,599,599,599,,,599,599,266,266,266,,266,,,,266,266,,,,266,,266',
'266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,',
',266,,,266,266,266,266,266,266,266,266,266,266,266,266,,266,266,,266',
'266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,266,,266,,266',
',,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,,266,266',
'266,266,,,266,266,689,689,689,,689,,,,689,689,,,,689,,689,689,689,689',
'689,689,689,,,,,,689,689,689,689,689,689,689,,,689,,,,,,,689,,,689,689',
'689,689,689,689,689,689,,689,689,689,,689,689,,,,689,,,,,,,,,,,,,,,',
',,,,689,,,689,,,689,689,,,689,,,,,,,,,,,,,,,,,,,689,689,689,689,689',
'689,,,,689,689,,,,,,,689,,,689,689,689,,,689,689,272,272,272,,272,,',
',272,272,,,,272,,272,272,272,272,272,272,272,,,,,,272,272,272,272,272',
'272,272,,,272,,,,,,,272,,,272,272,272,272,272,272,272,272,272,272,272',
'272,,272,272,,272,272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,,272',
',272,,272,,272,,,,,,,,272,,,,,272,272,272,272,272,272,,,,272,272,,,',
',,,272,,272,272,272,272,,,272,272,275,275,275,,275,,,,275,275,,,,275',
',275,275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275',
',,,,,,275,,,275,275,275,275,275,275,275,275,275,275,275,275,,275,275',
',275,275,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,275,,275',
',275,,,,,,,,275,,,,,275,275,275,275,275,275,,,,275,275,275,,,,,,275',
',275,275,275,275,,,275,275,499,499,499,,499,,,,499,499,,,,499,,499,499',
'499,499,499,499,499,,,,,,499,499,499,499,499,499,499,,,499,,,,,,,499',
',,499,499,499,499,499,499,499,499,499,499,499,499,,499,499,,499,499',
'499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,,499,,499,,499,,,,',
',,,499,,,,,499,499,499,499,499,499,,,,499,499,,,,,,,499,,499,499,499',
'499,,,499,499,358,358,358,,358,,,,358,358,,,,358,,358,358,358,358,358',
'358,358,,,,,,358,358,358,358,358,358,358,,,358,,,,,,,358,,,358,358,358',
'358,358,358,358,358,,358,358,358,,358,358,,,,358,,,,,,,,,,,,,,,,,,,',
'358,,,358,,,358,358,,,358,,,,,,,,,,,,,,,,,,,358,358,358,358,358,358',
',,,358,358,,,,,,,358,,,358,358,358,,,358,358,587,587,587,,587,,,,587',
'587,,,,587,,587,587,587,587,587,587,587,,,,,,587,587,587,587,587,587',
'587,,,587,,,,,,,587,,,587,587,587,587,587,587,587,587,587,587,587,587',
',587,587,,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587,',
'587,,587,,587,,,,,,,,587,,,,,587,587,587,587,587,587,,,,587,587,,,,',
',,587,,587,587,587,587,,,587,587,282,282,282,,282,,,,282,282,,,,282',
',282,282,282,282,282,282,282,,,,,,282,282,282,282,282,282,282,,,282',
',,,,,,282,,,282,282,282,282,282,282,282,282,,282,282,282,,282,282,,282',
'282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,,282,,,,,,282,,,,,,',
',282,,,,,282,282,282,282,282,282,,,,282,282,,,,,,,282,,,282,282,282',
',,282,282,782,782,782,,782,,,,782,782,,,,782,,782,782,782,782,782,782',
'782,,,,,,782,782,782,782,782,782,782,,,782,,,,,,,782,,,782,782,782,782',
'782,782,782,782,,782,782,782,,782,782,,782,782,782,,,,,,,,,,,,,,,,,',
',,782,,,782,,,782,782,,,782,,,,,,782,,,,,,,,782,,,,,782,782,782,782',
'782,782,,,,782,782,,,,,,,782,,,782,782,782,,,782,782,47,47,47,,47,,',
',47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,',
',,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,',
',,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47',
'47,,,,47,47,,,,,,,47,,,47,47,47,,,47,47,286,286,286,,286,,,,286,286',
',,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286',
',,286,,,,,,,286,,,286,286,286,286,286,286,286,286,,286,286,286,,286',
'286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286',
',,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286,,,286,286',
'286,,,286,286,287,287,287,,287,,,,287,287,,,,287,,287,287,287,287,287',
'287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,,287,,,287,287,287',
'287,287,287,287,287,,287,287,287,,287,287,,287,287,287,,,,,,,,,,,,,',
',,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,287,,,,,287,287,287',
'287,287,287,,,,287,287,,,,,,,287,,,287,287,287,,,287,287,783,783,783',
',783,,,,783,783,,,,783,,783,783,783,783,783,783,783,,,,,,783,783,783',
'783,783,783,783,,,783,,,,,,,783,,,783,783,783,783,783,783,783,783,,783',
'783,783,,783,783,,783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783',
',,783,,,,,,783,,,,,,,,783,,,,,783,783,783,783,783,783,,,,783,783,,,',
',,,783,,,783,783,783,,,783,783,356,356,356,,356,,,,356,356,,,,356,,356',
'356,356,356,356,356,356,,,,,,356,356,356,356,356,356,356,,,356,,,,,',
',356,,,356,356,356,356,356,356,356,356,,356,356,356,,356,356,,,,356',
',,,,,,,,,,,,,,,,,,,356,,,356,,,356,356,,,356,,,,,,,,,,,,,,,,,,,356,356',
'356,356,356,356,,,,356,356,,,,,,,356,,,356,356,356,,,356,356,293,293',
'293,293,293,,,,293,293,,,,293,,293,293,293,293,293,293,293,,,,,,293',
'293,293,293,293,293,293,,,293,,,,,,293,293,,293,293,293,293,293,293',
'293,293,293,,293,293,293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293',
',,293,,,293,293,,,293,,293,,,,293,,,,,,,,293,,,,,293,293,293,293,293',
'293,,,,293,293,,,,,,,293,,,293,293,293,,,293,293,904,904,904,,904,,',
',904,904,,,,904,,904,904,904,904,904,904,904,,,,,,904,904,904,904,904',
'904,904,,,904,,,,,,,904,,,904,904,904,904,904,904,904,904,,904,904,904',
',904,904,,,,904,,,,,,,,,,,,,,,,,,,,904,,,904,,,904,904,,,904,,,,,,,',
',,,,,,,,,,,904,904,904,904,904,904,,,,904,904,,,,,,,904,,,904,904,904',
',,904,904,744,744,744,,744,,,,744,744,,,,744,,744,744,744,744,744,744',
'744,,,,,,744,744,744,744,744,744,744,,,744,,,,,,,744,,,744,744,744,744',
'744,744,744,744,744,744,744,744,,744,744,,744,744,744,,,,,,,,,,,,,,',
',,,,,744,,,744,,,744,744,,,744,,744,,744,,744,,,,,,,,744,,,,,744,744',
'744,744,744,744,,,,744,744,,,,,,,744,,744,744,744,744,,,744,744,518',
'518,518,,518,,,,518,518,,,,518,,518,518,518,518,518,518,518,,,,,,518',
'518,518,518,518,518,518,,,518,,,,,,,518,,,518,518,518,518,518,518,518',
'518,518,518,518,518,,518,518,,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518',
',,518,518,,,518,,518,,518,,518,,,,,,,,518,,,,,518,518,518,518,518,518',
',,,518,518,,,,,,,518,,518,518,518,518,,,518,518,784,784,784,,784,,,',
'784,784,,,,784,,784,784,784,784,784,784,784,,,,,,784,784,784,784,784',
'784,784,,,784,,,,,,,784,,,784,784,784,784,784,784,784,784,,784,784,784',
',784,784,,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784,,,784,',
',,,,784,,,,,,,,784,,,,,784,784,784,784,784,784,,,,784,784,,,,,,,784',
',,784,784,784,,,784,784,694,694,694,,694,,,,694,694,,,,694,,694,694',
'694,694,694,694,694,,,,,,694,694,694,694,694,694,694,,,694,,,,,,,694',
',,694,694,694,694,694,694,694,694,,694,694,694,,694,694,,694,694,694',
',,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,694,,,,694,,,,,,,,694',
',,,,694,694,694,694,694,694,,,,694,694,,,,,,,694,,,694,694,694,,,694',
'694,299,299,299,,299,,,,299,299,,,,299,,299,299,299,299,299,299,299',
',,,,,299,299,299,299,299,299,299,,,299,,,,,,,299,,,299,299,299,299,299',
'299,299,299,,299,299,299,,299,299,,,,299,,,,,,,,,,,,,,,,,,,,299,,,299',
',,299,299,,,299,,,,,,,,,,,,,,,,,,,299,299,299,299,299,299,,,,299,299',
',,,299,,,299,,,299,299,299,,,299,299,23,23,23,,23,,,,23,23,,,,23,,23',
'23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23',
'23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23',
',,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,',
'23,,,23,23,23,,,23,23,516,516,516,,516,,,,516,516,,,,516,,516,516,516',
'516,516,516,516,,,,,,516,516,516,516,516,516,516,,,516,,,,,,,516,,,516',
'516,516,516,516,516,516,516,,516,516,516,,516,516,,,,516,,,,,,,,,,,',
',,,,,,,,516,,,516,,,516,516,,,516,,,,,,,,,,,,,,,,,,,516,516,516,516',
'516,516,,,,516,516,,,,,,,516,,,516,516,516,,,516,516,785,785,785,,785',
',,,785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785,785,785',
'785,785,785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785,785',
'785,,785,785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785',
',,,,,785,,,,,,,,785,,,,,785,785,785,785,785,785,,,,785,785,,,,,,,785',
',,785,785,785,,,785,785,787,787,787,,787,,,,787,787,,,,787,,787,787',
'787,787,787,787,787,,,,,,787,787,787,787,787,787,787,,,787,,,,,,,787',
',,787,787,787,787,787,787,787,787,,787,787,787,,787,787,,787,787,787',
',,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,,,,,787,,,,,,,,787,,,',
',787,787,787,787,787,787,,,,787,787,,,,,,,787,,,787,787,787,,,787,787',
'566,566,566,,566,,,,566,566,,,,566,,566,566,566,566,566,566,566,,,,',
',566,566,566,566,566,566,566,,,566,,,,,,,566,,,566,566,566,566,566,566',
'566,566,,566,566,566,,566,566,,566,566,566,,,,,,,,,,,,,,,,,,,,566,,',
'566,,,566,566,,,566,,,,,,566,,,,,,,,566,,,,,566,566,566,566,566,566',
',,,566,566,,,,,,,566,,,566,566,566,,,566,566,799,799,799,,799,,,,799',
'799,,,,799,,799,799,799,799,799,799,799,,,,,,799,799,799,799,799,799',
'799,,,799,,,,,,,799,,,799,799,799,799,799,799,799,799,,799,799,799,',
'799,799,,,,799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799,799,,,799,,,,,,,,',
',,,,,,,,,,799,799,799,799,799,799,,,,799,799,,,,,,,799,,,799,799,799',
',,799,799,712,712,712,,712,,,,712,712,,,,712,,712,712,712,712,712,712',
'712,,,,,,712,712,712,712,712,712,712,,,712,,,,,,,712,,,712,712,712,712',
'712,712,712,712,,712,712,712,,712,712,,712,712,712,,,,,,,,,,,,,,,,,',
',,712,,,712,,,712,712,,,712,,,,,,712,,,,,,,,712,,,,,712,712,712,712',
'712,712,,,,712,712,,,,,,,712,,,712,712,712,,,712,712,738,738,738,,738',
',,,738,738,,,,738,,738,738,738,738,738,738,738,,,,,,738,738,738,738',
'738,738,738,,,738,,,,,,,738,,,738,738,738,738,738,738,738,738,,738,738',
'738,,738,738,,738,738,738,,,,,,,,,,,,,,,,,,,,738,,,738,,,738,738,,,738',
',,,,,738,,,,,,,,738,,,,,738,738,738,738,738,738,,,,738,738,,,,,,,738',
',,738,738,738,,,738,738,344,344,344,,344,,,,344,344,,,,344,,344,344',
'344,344,344,344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,,,344',
',,344,344,344,344,344,344,344,344,,344,344,344,,344,344,,344,344,344',
',,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,,,,,344,,,,,,,,344,,,',
',344,344,344,344,344,344,,,,344,344,,,,,,,344,,,344,344,344,,,344,344',
'732,732,732,,732,,,,732,732,,,,732,,732,732,732,732,732,732,732,,,,',
',732,732,732,732,732,732,732,,,732,,,,,,,732,,,732,732,732,732,732,732',
'732,732,,732,732,732,,732,732,,732,732,732,,,,,,,,,,,,,,,,,,,,732,,',
'732,,,732,732,,,732,,732,,,,732,,,,,,,,732,,,,,732,732,732,732,732,732',
',,,732,732,,,,,,,732,,,732,732,732,,,732,732,502,502,502,,502,,,,502',
'502,,,,502,,502,502,502,502,502,502,502,,,,,,502,502,502,502,502,502',
'502,,,502,,,,,,,502,,,502,502,502,502,502,502,502,502,502,502,502,502',
',502,502,,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502,',
',,502,,502,,,,,,,,502,,,,,502,502,502,502,502,502,,,,502,502,,,,,,,502',
',502,502,502,502,,,502,502,541,541,541,,541,,,,541,541,,,,541,,541,541',
'541,541,541,541,541,,,,,,541,541,541,541,541,541,541,,,541,,,,,,,541',
',,541,541,541,541,541,541,541,541,541,541,541,541,,541,541,,541,541',
'541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,,,,,,541,,,,,,,,541',
',,,,541,541,541,541,541,541,,,,541,541,,,,,,,541,,541,541,541,541,,',
'541,541,316,316,316,,316,,,,316,316,,,,316,,316,316,316,316,316,316',
'316,,,,,,316,316,316,316,316,316,316,,,316,,,,,,,316,,,316,316,316,316',
'316,316,316,316,,316,316,316,,316,316,,,,316,,,,,,,,,,,,,,,,,,,,316',
',,316,,,316,316,,,316,,,,,,,,,,,,,,,,,,,316,316,316,316,316,316,,,,316',
'316,,,,,,,316,,,316,316,316,,,316,316,538,538,538,,538,,,,538,538,,',
',538,,538,538,538,538,538,538,538,,,,,,538,538,538,538,538,538,538,',
',538,,,,,,,538,,,538,538,538,538,538,538,538,538,538,538,538,538,,538',
'538,,538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538,,,538,,538,',
',,538,,,,,,,,538,,,,,538,538,538,538,538,538,,,,538,538,,,,,,,538,,538',
'538,538,538,,,538,538,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8',
'8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,',
',,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8',
',,,,,,8,,,8,8,8,,,8,8,845,845,845,,845,,,,845,845,,,,845,,845,845,845',
'845,845,845,845,,,,,,845,845,845,845,845,845,845,,,845,,,,,,,845,,,845',
'845,845,845,845,845,845,845,,845,845,845,,845,845,,845,845,845,,,,,',
',,,,,,,,,,,,,,845,,,845,,,845,845,,,845,,,,,,845,,,,,,,,845,,,,,845',
'845,845,845,845,845,,,,845,845,,,,,,,845,,,845,845,845,,,845,845,929',
'929,929,,929,,,,929,929,,,,929,,929,929,929,929,929,929,929,,,,,,929',
'929,929,929,929,929,929,,,929,,,,,,,929,,,929,929,929,929,929,929,929',
'929,,929,929,929,,929,929,,929,929,929,,,,,,,,,,,,,,,,,,,,929,,,929',
',,929,929,,,929,,929,,,,929,,,,,,,,929,,,,,929,929,929,929,929,929,',
',,929,929,,,,,,,929,,,929,929,929,,,929,929,324,324,324,,324,,,,324',
'324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324',
'324,,,324,,,,,,,324,,,324,324,324,324,324,324,324,324,,324,324,324,',
'324,324,,324,324,324,,,,,,,,,,,,,,,,,,,,324,,,324,324,,324,324,,,324',
',,,,,324,,,,,,,,324,,,,,324,324,324,324,324,324,,,,324,324,,,,,,,324',
',,324,324,324,,,324,324,416,416,416,,416,,,,416,416,,,,416,,416,416',
'416,416,416,416,416,,,,,,416,416,416,416,416,416,416,,,416,,,,,,,416',
',,416,416,416,416,416,416,416,416,,416,416,416,,416,416,,416,416,416',
',,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,,,,,,416,,,,,,,,416,,,',
',416,416,416,416,416,416,,,,416,416,,,,,,,416,,,416,416,416,,,416,416',
'532,532,532,,532,,,,532,532,,,,532,,532,532,532,532,532,532,532,,,,',
',532,532,532,532,532,532,532,,,532,,,,,,,532,,,532,532,532,532,532,532',
'532,532,,532,532,532,,532,532,,532,532,532,,,,,,,,,,,,,,,,,,,,532,,',
'532,,,532,532,,,532,,,,,,532,,,,,,,,532,,,,,532,532,532,532,532,532',
',,,532,532,,,,,,,532,,,532,532,532,,,532,532,509,509,509,509,509,,,',
'509,509,,,,509,,509,509,509,509,509,509,509,,,,,,509,509,509,509,509',
'509,509,,,509,,,,,,509,509,,509,509,509,509,509,509,509,509,509,,509',
'509,509,,509,509,,509,509,509,,,,,,,,,,,,,,,,,,,,509,,,509,,,509,509',
',,509,,509,,,,509,,,,,,,,509,,,,,509,509,509,509,509,509,,,,509,509',
',,,,,509,509,,,509,509,509,,,509,509,528,528,528,,528,,,,528,528,,,',
'528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528,528,528,,',
'528,,,,,,,528,,,528,528,528,528,528,528,528,528,,528,528,528,,528,528',
',528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,,,,528,',
',,,,,,528,,,,,528,528,528,528,528,528,,,,528,528,,,,,,,528,,,528,528',
'528,,,528,528,527,527,527,,527,,,,527,527,,,,527,,527,527,527,527,527',
'527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527',
'527,527,527,527,527,,527,527,527,,527,527,,527,527,527,,,,,,,,,,,,,',
',,,,,,527,,,527,,,527,527,,,527,,,,,,527,,,,,,,,527,,,,,527,527,527',
'527,527,527,,,,527,527,,,,,,,527,,,527,527,527,,,527,527,892,892,892',
',892,,,,892,892,,,,892,,892,892,892,892,892,892,892,,,,,,892,892,892',
'892,892,892,892,,,892,,,,,,,892,,,892,892,892,892,892,892,892,892,,892',
'892,892,,892,892,,,,892,,,,,,,,,,,,,,,,,,,,892,,,892,,,892,892,,,892',
',,,,,,,,,,,,,,,,,,892,892,892,892,892,892,,,,892,892,,,,,,,892,,,892',
'892,892,,,892,892,524,524,524,,524,,,,524,524,,,,524,,524,524,524,524',
'524,524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,,,524,,,524,524',
'524,524,524,524,524,524,,524,524,524,,524,524,,,,524,,,,,,,,,,,,,,,',
',,,,524,,,524,,,524,524,,,524,,,,,,,,,,,,,,,,,,,524,524,524,524,524',
'524,,,,524,524,,,,,,,524,,,524,524,524,,,524,524,504,504,504,,504,,',
',504,504,,,,504,,504,504,504,504,504,504,504,,,,,,504,504,504,504,504',
'504,504,,,504,,,,,,,504,,,504,504,504,504,504,504,504,504,,504,504,504',
',504,504,,504,504,504,,,,,,,,,,,,,,,,,,,,504,,,504,,,504,504,,,504,',
',,,,504,,,,,,,,504,,,,,504,504,504,504,504,504,,,,504,504,,,,,,,504',
',,504,504,504,,,504,504,877,877,877,,877,,,,877,877,,,,877,,877,877',
'877,877,877,877,877,,,,,,877,877,877,877,877,877,877,,,877,,,,,,,877',
',,877,877,877,877,877,877,877,877,,877,877,877,,877,877,,877,877,877',
',,,,,,,,,,,,,,,,,,,877,,,877,,,877,877,,,877,,,,,,877,,,,,,,,877,,,',
',877,877,877,877,877,877,,,,877,877,,,,,,,877,,,877,877,877,437,,877',
'877,,,,437,437,437,,,437,437,437,912,437,912,912,912,912,912,,,,437',
'437,437,437,,,912,,,,,437,437,,437,437,437,437,437,,,,,,,,,,912,,,,',
',,,,,,912,912,,437,437,437,437,437,437,437,437,437,437,437,437,437,437',
',,437,437,437,,,437,,,437,,,437,437,,437,912,437,,437,,437,437,437,437',
'437,437,437,,437,437,437,,,,,,,,,,,,,437,437,437,437,438,437,,437,,',
',438,438,438,,,438,438,438,708,438,708,708,708,708,708,,,,438,438,438',
'438,,,708,,,,,438,438,,438,438,438,438,438,,,,,,,,,,708,,,,,,,,,708',
'708,708,708,,438,438,438,438,438,438,438,438,438,438,438,438,438,438',
',,438,438,438,,,438,,,438,,,438,438,,438,708,438,,438,,438,438,438,438',
'438,438,438,,438,438,438,,,,,,,,,,,,,438,438,438,438,59,438,,438,,,',
'59,59,59,,,59,59,59,916,59,916,916,916,916,916,,,,,59,59,59,,,916,,',
',,59,59,,59,59,59,59,59,,,,,,,,,,916,,,,,,,,,,,916,916,,59,59,59,59',
'59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,,,59,,,59,59,,59,916,59',
',59,,59,59,59,59,59,59,59,,59,,59,,,,,,,,,,,,,59,59,59,59,,59,,59,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
',,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74',
'74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,',
',,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,',
',,,,,,,,,,74,407,407,407,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,,,,407,407,407,407,407,407,407',
'407,407,407,,,,,,407,407,407,407,407,407,407,407,407,,,407,,,,,,,,,407',
'407,,407,407,407,407,407,407,407,,,407,407,,,,407,407,407,407,,,,,,',
',,,,,,,407,407,,407,407,407,407,407,407,407,407,407,407,407,,,407,407',
',,,,,,,,,407,,,,,,,,,407,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11',
'11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,',
',11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11',
'11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12',
'12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12',
'12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12',
'12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,629,629,629,629,629,629,629',
'629,629,629,629,629,629,629,629,629,629,629,629,629,629,629,629,629',
',,,629,629,629,629,629,629,629,629,629,629,,,,,,629,629,629,629,629',
'629,629,629,629,,,629,,,,,,,,,629,629,,629,629,629,629,629,629,629,',
',629,629,,,,629,629,629,629,,,,,,,,,,,,,,629,629,,629,629,629,629,629',
'629,629,629,629,629,629,,,629,629,,,,,,,,,,629,,,,,,,,,629,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91',
'91,91,91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91',
',91,,,,,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,',
',,,,,,91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,',
',,91,754,754,754,754,754,754,754,754,754,754,754,754,754,754,754,754',
'754,754,754,754,754,754,754,754,,,,754,754,754,754,754,754,754,754,754',
'754,,,,,,754,754,754,754,754,754,754,754,754,,,754,,,,,,,,,754,754,',
'754,754,754,754,754,754,754,,,754,754,,,,754,754,754,754,,,,,,,,,,,',
',,754,754,,754,754,754,754,754,754,754,754,754,754,754,31,,754,,,,,31',
'31,31,,,31,31,31,910,31,910,910,910,910,910,754,,,,31,31,,,,910,,,,',
'31,31,,31,31,31,31,31,,,,,,,,,,910,,,,,,,,,910,910,910,910,,31,31,31',
'31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31',
'910,31,,31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,486,31,31,,31,,31',
'486,486,486,,,486,486,486,710,486,710,710,710,710,710,,,,486,486,,,',
',710,,,,,486,486,,486,486,486,486,486,,,1008,,1008,1008,1008,1008,1008',
'710,,,,,,,,,1008,,710,710,,428,,,,,,,428,428,428,,486,428,428,428,,428',
'1008,486,,,,,486,486,428,428,428,1008,1008,,710,,,,,428,428,,428,428',
'428,428,428,,486,486,,,,,,,,,,,,,486,,,1008,,486,,,428,428,428,428,428',
'428,428,428,428,428,428,428,428,428,,,428,428,428,,,428,,428,428,,,428',
'428,,428,,428,,428,,428,428,428,428,428,428,428,,428,428,428,,,,,,,',
',,,,30,428,428,,428,,428,30,30,30,,,30,30,30,752,30,752,752,752,752',
'752,,,,30,30,30,,,,752,,,,,30,30,,30,30,30,30,30,,,,,,,,,,752,,,,,,',
',,752,752,752,752,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30',
'30,,,30,,30,30,,,30,30,,30,752,30,,30,,30,30,30,30,30,30,30,,30,30,30',
',,,,,589,589,,,589,,,30,30,,30,,30,589,589,,589,589,589,589,589,589',
'589,,,589,589,,,,589,589,589,589,,,,,,589,,,,,,,,589,589,,589,589,589',
'589,589,589,589,589,589,589,589,,,589,,,,,214,214,,,214,,,,,,,,,214',
'214,589,214,214,214,214,214,214,214,,,214,214,,,,214,214,214,214,,,',
',,214,,,,,,,,214,214,,214,214,214,214,214,214,214,214,214,214,214,,',
'214,,,,,743,743,,,743,,,,,,,,,743,743,214,743,743,743,743,743,743,743',
',,743,743,,,,743,743,743,743,,,,,,743,,,,,,,,743,743,,743,743,743,743',
'743,743,743,743,743,743,743,,,743,,,,,452,452,,,452,,,,,,,,,452,452',
'743,452,452,452,452,452,452,452,,,452,452,,,,452,452,452,452,,,,,,452',
',,,,,,,452,452,,452,452,452,452,452,452,452,452,452,452,452,,,452,,',
',,453,453,,,453,,,,,,,,,453,453,452,453,453,453,453,453,453,453,,,453',
'453,,,,453,453,453,453,,,,,,453,,,,,,,,453,453,,453,453,453,453,453',
'453,453,453,453,453,453,,,453,,,,,742,742,,,742,,,,,,,,,742,742,453',
'742,742,742,742,742,742,742,,,742,742,,,,742,742,742,742,,,,,,742,,',
',,,,,742,742,,742,742,742,742,742,742,742,742,742,742,742,,,742,,,,',
'519,519,,,519,,,,,,,,,519,519,742,519,519,519,519,519,519,519,,,519',
'519,,,,519,519,519,519,,,,,,519,,,,,,,,519,519,,519,519,519,519,519',
'519,519,519,519,519,519,,,519,,,,,520,520,,,520,,,,,,,,,520,520,519',
'520,520,520,520,520,520,520,,,520,520,,,,520,520,520,520,,,,,,520,,',
',,,,,520,520,,520,520,520,520,520,520,520,520,520,520,520,,882,520,882',
'882,882,882,882,660,,660,660,660,660,660,,,882,,,,,520,,660,885,,885',
'885,885,885,885,,,,,,,,882,,885,,,,,660,,882,882,882,882,,,,660,660',
'660,660,,,,887,885,887,887,887,887,887,,,,885,885,885,885,,,887,,,,',
'660,882,,,,,,,660,,,,,,,,,887,1006,1006,,,1006,,,885,,,887,887,,1006',
'1006,,1006,1006,1006,1006,1006,1006,1006,,,1006,1006,,,,1006,1006,1006',
'1006,,,,,,1006,,,,,887,,,1006,1006,,1006,1006,1006,1006,1006,1006,1006',
'1006,1006,1006,1006,,,1006,,,,,1005,1005,,,1005,,,,,,,,,1005,1005,1006',
'1005,1005,1005,1005,1005,1005,1005,,,1005,1005,,,,1005,1005,1005,1005',
',,,,,1005,,,,,,,,1005,1005,,1005,1005,1005,1005,1005,1005,1005,1005',
'1005,1005,1005,,995,1005,995,995,995,995,995,993,,993,993,993,993,993',
',,995,,,,,1005,,993,,,,,,,,,,,,,,,995,,,,,,,993,,213,213,995,995,213',
',,,,993,993,,,213,213,,213,213,213,213,213,213,213,,,213,213,,,,213',
'213,213,213,,,995,,,213,,,,993,,,,213,213,,213,213,213,213,213,213,213',
'213,213,213,213,,991,213,991,991,991,991,991,1039,,1039,1039,1039,1039',
'1039,,,991,,,,,213,,1039,,,,,,,,,,,,,,,991,,,,,,,1039,,529,529,991,991',
'529,,,,,1039,1039,,,529,529,,529,529,529,529,529,529,529,,,529,529,',
',,529,529,529,529,,,991,,,529,,,,1039,,,,529,529,,529,529,529,529,529',
'529,529,529,529,529,529,,,529,,,,,530,530,,,530,,,,,,,,,530,530,529',
'530,530,530,530,530,530,530,,,530,530,,,,530,530,530,530,,,,,,530,,',
',,,,,530,530,,530,530,530,530,530,530,530,530,530,530,530,,,530,,,,',
'262,262,,,262,,,,,,,,,262,262,530,262,262,262,262,262,262,262,,,262',
'262,,,,262,262,262,262,,,,,,,,,,,,,,262,262,,262,262,262,262,262,262',
'262,262,262,262,262,,601,262,601,601,601,601,601,546,,546,546,546,546',
'546,,,601,,,,,262,,546,939,,939,939,939,939,939,,,,,,,,601,601,939,',
',,,546,,601,601,601,601,,,,546,546,546,546,,,,,939,939,914,,914,914',
'914,914,914,939,939,939,939,,,,,,914,,706,601,706,706,706,706,706,,546',
',,,,,,,706,,,,914,,,,,939,,,,,,914,914,,,,,,706,,,588,588,,,588,,706',
'706,706,706,,,,588,588,,588,588,588,588,588,588,588,,914,588,588,,,',
'588,588,588,588,,,,,,588,,,706,,,,,588,588,,588,588,588,588,588,588',
'588,588,588,588,588,,,588,,,,,956,956,,,956,,,,,,,,,956,956,588,956',
'956,956,956,956,956,956,,,956,956,,,,956,956,956,956,,,,,,956,,,,,,',
',956,956,,956,956,956,956,956,956,956,956,956,956,956,,989,956,989,989',
'989,989,989,,,,,,,,,,989,,,,,956,,,,,,,,,,,,,,,,,989,,,,,,,,,989,989',
'989,989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,989' ]
        racc_action_check = arr = ::Array.new(26268, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    33,   925,  1307,   nil,   505,   nil,   nil, 21253,  1474,
   nil, 23729, 23862,  1190,   nil,  1151,  1202,   928,   427,  1127,
   357,   nil,   -78, 19293,  2194,  1240,   nil,   261,   nil,     2,
 24690, 24373, 11873, 11733, 11593,   nil,  3604,  9353,  7953,   nil,
  1092,   163,   119,  1164,   178,  6833,  5993, 17613,  1089,  1348,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23331,
   nil,  5573,  5713,  5853,    34,   nil,  6133,  6273,   nil,   nil,
  6413,  6553,  1131,   nil, 23463,   nil,   nil,   nil,   nil,   nil,
   171,   nil,   nil,   nil,   nil,   nil,   nil,  1075,  1070,  1069,
  1049, 24128,   nil,   nil,   nil,   nil,   nil,   nil,   389,   nil,
   nil,   521,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  8093,   nil,   nil,   nil,   nil,  8233,
  8373,  8513,  8653,  8793,  1066,   nil,   446,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1037,   nil,  3745,
  9493,  9633,  9773, 25573, 24826, 10193, 10333, 10473, 10613, 10753,
 10893,   nil,   nil,  1279,   131,   124,  1102,   168,  1010,  1061,
   nil, 12013,  3040,  1039, 12433, 12573, 12713, 12853, 12993, 13133,
 13273, 13413, 13553, 13693, 13833, 13973, 14113, 14253, 14393, 14533,
 14673, 14813, 14953, 15093, 15233, 15373, 15513, 15653, 15793, 15933,
   nil,   nil, 25818,   nil,   nil,  1029, 16353,   nil,  1032,   nil,
   nil,   nil, 16633,   nil,   nil, 16773,   nil,  2758,   nil,   983,
   978,   nil, 17333,  1005,  5013,   nil, 17753, 17893,   nil,   nil,
   445,   nil,  1615, 18313,   947,  2617,   954,   988,   949, 19153,
  2194,   787,  1251,  1210,  1018,   969,   nil,   974,   933,   -19,
   nil,   nil,   nil,   947,   180,   896, 20973,   nil,   305,   949,
  1207,   nil,   945,   nil, 21673,  4309,   698,   nil,   894,   nil,
   149,   426,   872,   853,   nil,   484,   877,   nil,   nil,   617,
   608,    44,   -11,  5433, 20413,   293,   948,   831,    -1,    42,
   715,   906,    26,   929,   nil,   nil, 18173,   nil, 17053,    99,
   368,   355,   -21,   336,   238,   321,   441,   105,   nil,   453,
   nil,   nil,   nil,   nil,   nil,   385,   nil,   389,   nil,   252,
   nil,   829,   321,   nil,   828,   289,   nil,   815,   -26,   nil,
   809,   -58,   nil,   418,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  4732, 23596,   nil,   nil,
   nil,   nil,   810,   nil,   nil,   793, 21813,   788,   nil,   nil,
  1066,   789,   nil,   nil,   783,   781,   437,   360, 24565,   nil,
   nil,   nil,     0,   653,   817,   nil,   nil, 23071, 23201,   nil,
  1207,   nil,   763,   nil,   nil,   784,   nil,   nil,   nil,   nil,
    10,   nil, 24962, 25030, 12293,   102, 12153,  7813,  7113,  4027,
  3886,   576,   536,   830,   829,   799,   780,  5433,  5293,   598,
  3322,  3745,  4168,  4309,  4450,  4591,  5013,  4732,  5153,  4873,
   479,   469,  3463,  3604,  1489,   152, 24498,   nil,   nil,   nil,
   nil,   nil,   nil,   -49,   105,   718,   704,   nil,   nil, 16913,
   nil,   nil, 20693,   nil, 22793,   nil,   nil,   nil,   nil, 22093,
  1489,   697,   683,   nil,   nil,   682, 19433,   684, 18733, 25166,
 25234,   465,   708,   nil, 22653,   668,   nil, 22373, 22233, 25682,
 25750,  3040, 21953,   784,   772,   649,   nil,   nil, 21113,   nil,
   nil, 20833,   nil,   nil,   nil,    30, 25887,   nil,   576,   562,
   nil,   534,   522,   517,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   478,   nil,   -36,   nil,   nil, 19853,   nil,   nil,   nil,
   493,   nil,   nil,   nil,   491,   nil,   nil,   476,  1771,   513,
   nil,   784,   155,    60,   485,   472,   nil, 17193, 26003, 24758,
     1,   nil,   397,   297,   221,   nil,  1110,   nil,     9, 16213,
   nil, 25880,   nil, 16073,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   250,   nil,   nil,   187,   nil,
   nil,   nil,   349,   nil,   nil,   293,   nil,   295,   nil, 23995,
   nil,   275, 11453, 11313,   436,   300, 11173, 11033, 10053,  9913,
   279,   nil,   nil,   nil,  9073,  8933,   260,   nil,  7533,  7253,
   nil,   101,   -55,   257,   125,   227,   925,   210,   nil,   nil,
 25303,   nil,   nil,   287,   -14,   -46,   nil,   nil,   nil,   nil,
   173,   nil,   201,  5153,   nil,   nil,   616,  -105,  6973,   130,
   nil,   123,    30,   134,   153,   529,  1066,   147,    94, 16493,
  2335,   154,    59,   146, 19013,   nil,   nil,   557,   nil,  2053,
  1912,    22,   179,   nil,   nil,   370, 25962,   nil, 23165,   nil,
 24462,   nil, 20133,   nil,   657,   nil,   -68,   250,   -75,   nil,
   nil,   nil,   nil,   663,   nil,    31,   nil,   nil,   nil,   nil,
    26,   nil, 20553,  1035,    28,    78,    88,    86, 20273,   nil,
   856,   nil, 25098, 24894, 18593,   nil,   nil,   nil,   324,   651,
  4027,  4168, 24654,   455, 24261,    53,   767,  4873,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   218,  6693,  2476,  9213,   nil,
   249,   nil,  2053,   nil,  1348,   nil,   nil,  1630,   nil,  2617,
   nil,  2899, 17473, 18033, 18873, 19573,   -43, 19713,   422,   424,
   nil,   438,   440,   448,   nil,   478,   476,   480,   474, 19993,
   nil,   nil,  1630,   nil,   nil,   nil,  1489,  1348,   nil,   nil,
   556,   342,   nil,   nil,   692,   nil,  1066,   580,   625,   nil,
   nil,   nil,   606,   739,   623,   621,   nil,   nil,   nil,   624,
   634,   nil,   638,   639,   nil,   640,   nil,   nil,   645,  3167,
   649,  3197,   nil,   774,   nil, 21393,   783,  4450,  4591,   nil,
    43,    25,    56,   265,   925,   nil,   714,  3463,  7673,   nil,
   511,   862,   865,   749,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   766,   755,   nil,  1771,  5293, 22933,  1912,   351,
   nil,   nil, 25296,   nil,   nil, 25320,   nil, 25357,   nil,   nil,
   809,  1193, 22513,  1243,   878,   928,  1207,   826,   940,   nil,
  2476,   nil,   nil,    16, 18453,   nil,   nil,   nil,   nil,   nil,
 24337,   nil, 23035,   nil, 25944,   nil, 23295,   nil,   nil,   nil,
   nil,   384,   719,   852,   nil,    18,   nil,   979,   998, 21533,
  3886,   nil,   nil,  1011,   507,   nil,   nil,   nil,   nil, 25904,
   nil,   909,   nil,   nil,   919,   922,   924,   927,   nil,   929,
   nil,   162,   nil,   nil,   nil,   961, 26071,   nil,   nil,   961,
   nil,   nil,   nil,  2335,  1069,   784,   820,  1037,   997,   nil,
   965,   973,   974,   976,   977,   688,   979,  3204,  2758,   nil,
   nil,   nil,     6,  2899,   nil,   nil,  3181,  3322,   nil, 26133,
   nil, 25635,   nil, 25533,   nil, 25526,   nil,   nil,   nil,  1334,
  1099,  1104,   nil,  1190,  7393, 25464, 25396,  1138, 24493,   nil,
   nil,   nil,   nil,  3257,  1091,   685,   nil,   nil,   nil,  1222,
  1224,  1225,  1106,  1114,  1120,  1124,   nil,   nil,  1137,    19,
    -7,    -9,  1102,  1168,  1169,   nil,   nil,   nil,   nil, 25642,
   nil,   nil,   nil,   nil,    -8,   nil,  1190,   nil ]

racc_action_default = [
    -1,  -624,  -623,  -624,    -2,  -610,    -4,    -5,  -624,    -8,
    -9,  -624,  -624,  -624,   -29,  -624,  -624,  -624,  -280,  -624,
   -40,   -43,  -612,  -624,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -292,  -331,  -332,   -69,  -623,   -73,   -81,   -83,
  -624,  -514,  -515,  -624,  -624,  -624,  -624,  -624,  -612,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -600,
  -282,  -612,  -623,  -623,  -300,  -403,  -624,  -624,  -305,  -308,
  -610,  -624,  -316,  -323,  -624,  -333,  -334,  -445,  -446,  -447,
  -448,  -449,  -450,  -623,  -453,  -623,  -623,  -623,  -623,  -623,
  -623,  -623,  -490,  -496,  -498,  -499,  -500,  -501,  -598,  -503,
  -504,  -599,  -506,  -507,  -508,  -509,  -510,  -511,  -512,  -513,
  -518,  -519,  1048,    -3,  -611,  -619,  -620,  -621,    -7,  -624,
  -624,  -624,  -624,  -624,  -624,   -17,  -624,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -623,
  -624,  -624,  -623,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -612,  -613,   -47,  -624,  -514,  -515,  -624,  -280,  -624,  -624,
  -230,  -624,  -623,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -409,  -412,  -624,  -608,  -609,   -58,  -624,  -299,  -624,  -426,
  -429,   -64,  -623,  -423,   -65,  -612,   -66,  -239,  -252,  -623,
  -623,  -256,  -624,  -262,  -624,  -593,  -624,  -624,   -67,   -68,
  -610,   -13,   -14,  -624,   -71,  -623,  -612,  -624,   -74,   -77,
  -623,   -89,   -90,  -624,  -624,   -97,  -292,  -295,  -612,  -416,
  -331,  -332,  -335,  -424,  -624,   -79,  -624,   -85,  -289,  -497,
  -624,  -215,  -216,  -231,  -624,  -623,  -285,  -284,  -624,  -240,
  -616,  -616,  -624,  -624,  -591,  -616,  -624,  -301,  -302,  -546,
   -49,  -624,  -624,  -624,  -624,  -610,  -624,  -611,  -514,  -515,
  -624,  -624,  -280,  -624,  -356,  -357,  -624,  -319,  -624,  -112,
  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -326,  -624,
  -514,  -515,  -588,  -589,  -451,  -624,  -474,  -624,  -476,  -624,
  -478,  -624,  -624,  -458,  -624,  -624,  -464,  -624,  -624,  -470,
  -624,  -624,  -472,  -624,  -489,  -491,  -492,  -493,  -494,    -6,
  -622,   -23,   -24,   -25,   -26,   -27,  -623,  -624,   -19,   -20,
   -21,  -122,  -624,   -30,   -39,  -267,  -624,  -624,  -266,   -31,
  -197,  -612,  -247,  -248,  -623,  -623,  -601,  -602,  -257,  -421,
  -603,  -604,  -602,  -601,  -257,  -420,  -422,  -603,  -604,   -37,
  -205,   -38,  -624,   -41,   -42,  -195,  -262,   -44,   -45,   -46,
  -612,  -298,  -624,  -624,  -623,  -289,  -624,  -624,  -624,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,  -219,
  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,
  -232,  -233,  -234,  -235,  -612,  -623,  -257,  -601,  -602,   -54,
   -59,  -258,  -417,  -623,  -623,  -612,  -612,  -294,  -253,  -624,
  -261,  -254,  -624,  -259,  -624,  -263,  -596,  -597,   -12,  -611,
   -16,  -612,   -70,  -287,   -86,   -75,  -624,  -612,  -623,  -624,
  -624,   -96,  -624,  -497,  -624,   -82,   -87,  -624,  -624,  -624,
  -624,  -236,  -624,  -437,  -624,  -612,  -614,  -241,  -618,  -617,
  -243,  -618,  -290,  -291,  -592,  -624,  -546,  -406,  -587,  -587,
  -529,  -531,  -531,  -531,  -545,  -547,  -548,  -549,  -550,  -551,
  -552,  -553,  -554,  -624,  -558,  -560,  -562,  -567,  -569,  -570,
  -572,  -577,  -579,  -580,  -582,  -583,  -584,  -624,  -623,  -347,
  -348,  -623,  -624,  -624,  -624,  -624,  -432,  -623,  -624,  -624,
  -289,  -313,  -107,  -108,  -624,  -110,  -624,  -280,  -624,  -624,
  -324,  -546,  -328,  -624,  -452,  -475,  -480,  -481,  -483,  -454,
  -477,  -455,  -479,  -456,  -457,  -624,  -460,  -462,  -624,  -463,
  -466,  -467,  -624,  -468,  -469,  -624,  -495,  -624,   -18,  -624,
   -28,  -270,  -624,  -624,  -425,  -624,  -249,  -251,  -624,  -624,
   -60,  -245,  -246,  -418,  -624,  -624,   -62,  -419,  -624,  -624,
  -297,  -601,  -602,  -601,  -602,  -612,  -195,  -624,  -392,  -393,
  -612,  -395,  -410,   -53,  -413,  -623,  -427,  -430,  -244,  -293,
  -623,  -260,  -264,  -624,  -594,  -595,   -15,   -72,  -624,   -78,
   -84,  -612,  -601,  -602,  -623,   -93,   -95,  -624,   -80,  -624,
  -204,  -214,  -612,  -623,  -623,  -283,  -286,  -616,  -404,  -623,
  -623,  -612,  -624,  -527,  -528,  -624,  -624,  -538,  -624,  -541,
  -624,  -543,  -624,  -358,  -624,  -360,  -362,  -369,  -612,  -561,
  -571,  -581,  -585,  -623,  -349,  -623,  -306,  -350,  -351,  -309,
  -624,  -312,  -624,  -612,  -601,  -602,  -605,  -288,  -624,  -107,
  -108,  -109,  -624,  -624,  -623,  -317,  -520,  -521,  -624,  -320,
  -623,  -623,  -546,  -624,  -624,  -612,  -624,  -623,  -459,  -461,
  -465,  -471,  -473,   -10,  -123,  -268,  -624,  -198,  -624,  -615,
  -623,   -33,  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,
   -63,  -196,  -624,  -624,  -624,  -624,  -425,  -624,  -587,  -587,
  -374,  -623,  -623,  -623,  -391,  -624,  -612,  -397,  -553,  -564,
  -565,  -575,  -623,  -415,  -414,   -55,  -623,  -623,  -255,  -265,
   -76,   -91,   -88,  -296,  -623,  -354,  -623,  -438,  -623,  -439,
  -440,  -242,  -624,  -624,  -612,  -587,  -568,  -586,  -530,  -531,
  -531,  -559,  -531,  -531,  -578,  -531,  -553,  -573,  -612,  -624,
  -367,  -624,  -555,  -624,  -352,  -624,  -624,  -623,  -623,  -311,
  -624,  -425,  -624,  -107,  -108,  -111,  -612,  -623,  -624,  -523,
  -624,  -624,  -624,  -612,  -525,  -329,  -590,  -482,  -485,  -486,
  -487,  -488,  -624,  -269,   -32,  -199,  -250,  -624,  -237,  -624,
  -372,  -373,  -382,  -376,  -384,  -624,  -387,  -624,  -389,  -394,
  -624,  -624,  -624,  -563,  -624,  -624,  -623,  -624,  -624,   -11,
  -623,  -444,  -355,  -624,  -624,  -442,  -407,  -408,  -405,  -526,
  -624,  -534,  -624,  -536,  -624,  -539,  -624,  -542,  -544,  -359,
  -361,  -365,  -624,  -370,  -303,  -624,  -304,  -624,  -624,  -624,
  -623,  -314,  -425,  -624,  -624,  -321,  -325,  -327,  -524,  -546,
  -484,  -587,  -566,  -375,  -623,  -623,  -623,  -623,  -576,  -623,
  -396,  -612,  -399,  -401,  -402,  -574,  -624,  -289,  -411,  -624,
  -428,  -431,  -443,  -623,   -98,   -99,  -624,  -624,  -106,  -441,
  -531,  -531,  -531,  -531,  -363,  -624,  -368,  -624,  -623,  -307,
  -310,  -264,  -623,  -623,  -318,  -522,  -623,  -623,  -371,  -624,
  -379,  -624,  -381,  -624,  -385,  -624,  -388,  -390,  -398,  -624,
  -288,  -605,   -56,  -437,  -623,  -624,  -624,  -105,  -624,  -532,
  -535,  -537,  -540,  -624,  -366,  -623,  -433,  -434,  -435,  -624,
  -624,  -624,  -623,  -623,  -623,  -623,  -400,  -436,  -612,  -601,
  -602,  -605,  -104,  -531,  -364,  -353,  -315,  -322,  -330,  -624,
  -377,  -380,  -383,  -386,  -425,  -533,  -623,  -378 ]

clist = [
'6,219,261,278,278,278,585,298,368,337,17,534,273,501,428,434,17,421',
'693,130,130,490,547,312,312,395,554,324,9,418,751,223,133,133,9,441',
'117,125,208,444,223,223,223,4,17,303,303,135,135,525,634,843,262,671',
'578,581,671,312,341,342,329,334,345,486,674,265,271,274,222,223,814',
'831,952,113,223,223,114,495,223,350,327,376,130,378,380,383,386,389',
'392,378,792,294,315,537,540,279,279,279,544,130,319,117,846,674,726',
'729,280,280,280,834,662,401,402,403,404,718,703,704,666,667,296,741',
'17,954,923,330,920,223,223,223,223,17,118,698,356,605,331,335,346,612',
'9,948,616,857,377,616,795,599,615,405,393,618,276,288,289,598,860,600',
'501,986,358,750,601,754,939,738,848,344,847,794,343,535,707,709,711',
'325,369,796,745,353,1026,338,333,278,951,372,664,824,545,983,671,671',
'339,332,629,429,485,802,493,674,806,494,807,1016,732,976,818,903,374',
'375,422,896,379,382,665,407,385,17,223,223,223,388,438,223,223,223,223',
'223,223,701,391,954,867,554,756,757,394,278,399,451,17,858,414,278,730',
'948,278,831,355,679,492,829,207,428,434,413,419,688,1014,655,439,443',
'899,826,920,942,838,124,2,855,422,603,1,417,223,,,500,500,417,223,831',
'890,223,786,312,526,522,554,,805,,,,497,273,1034,,,,,17,312,17,,,,303',
'17,,811,834,944,,,512,,,,510,684,117,326,681,303,,,340,340,279,684,340',
',17,,582,583,,279,,280,,312,1035,312,,,,,280,294,223,223,515,,294,880',
'881,508,1017,831,509,851,,596,,596,,987,,523,,297,,931,759,117,,759',
'511,340,340,340,340,517,,491,,,684,,,733,909,602,496,775,,799,,635,',
'780,808,6,,,,,,642,810,,584,17,130,647,,,,,,500,500,,278,641,,133,,671',
',9,628,429,863,861,862,674,554,,,,135,,,,627,,791,911,913,422,915,917',
',918,,,,821,438,223,657,640,,,,642,650,646,444,,,,,,,447,448,449,450',
',658,641,932,526,,1027,278,,658,658,,526,,,833,,835,,429,312,808,,,',
',,988,312,429,,819,668,669,422,17,,,,,663,,303,,223,,438,,677,,303,',
',676,680,,438,,223,,,933,684,412,,,,856,,,,,696,,,,278,,,,,930,,,,,297',
',429,,,670,,,,,,,,,,,,422,17,,,17,,1009,1010,1011,1012,223,,438,,,,',
',,340,340,,223,,804,,223,697,727,727,,963,799,,,799,,,799,,799,554,',
',746,,297,,,635,,297,130,978,797,803,,1018,,,,223,223,526,,133,,223',
'223,1045,764,223,1044,,812,635,,,658,312,135,642,,500,647,,,1020,1021',
'947,312,949,,,,797,,641,771,773,,303,,865,776,778,815,820,443,,,790',
'303,,971,,972,,973,,,,17,17,,770,813,635,,,278,,,,,,815,561,815,,429',
',799,,799,852,799,,799,,,,842,827,,,827,422,,,,223,,793,,438,,223,,',
',,417,17,17,,,130,,,17,,41,500,,,,,41,866,797,223,799,1023,859,1024',
'789,1025,,864,312,,,,883,883,883,,692,830,850,832,1033,,,,41,301,301',
',,684,893,,1028,17,,901,874,17,17,905,,,,,,,825,17,,,19,1046,,,,,19',
',635,348,925,29,370,,,,908,29,,,,,,934,,,223,,17,17,919,,29,749,19,',
',755,17,223,,29,29,29,,29,,,,,,312,41,,,938,727,,,,,41,,312,935,,,,',
'354,29,,,955,,29,29,17,,29,,17,,,,966,,723,827,,725,790,,,790,,790,',
',,,,561,998,,,,,,,,17,19,,,883,883,883,883,713,883,19,,29,,,,,29,29',
'29,29,29,,,,,438,985,,,,,945,17,,946,41,278,,,,,815,,,,561,,17,429,',
',,17,,,17,17,,41,970,340,941,,422,789,,,789,635,789,,,,223,815,438,',
',,,,883,883,883,883,,790,,790,,790,,790,,,19,822,823,,,,,442,,798,883',
'29,29,29,29,,,29,29,29,29,29,29,19,41,,41,,,,301,41,,,29,,,,,,,790,',
'1022,,,,301,,,,,,,,561,41,561,,872,884,886,888,713,,,840,,29,,,,340',
',29,,789,29,789,,789,,789,,19,340,19,370,,370,,19,,,,29,,29,,42,,561',
'29,,895,42,,,897,898,,,,,,,19,,902,,,,,,,16,789,29,,,,16,,42,302,302',
',41,,,,,,,,29,29,,,927,928,,,,,,,,,16,,,,,,,,,349,,,371,,,,,,,,,,,,',
',,,,713,,713,,,,,,,19,959,,,,962,,,,,,29,,,42,,990,992,994,996,,997',
',42,,,,,,,,,,,798,982,,798,,,16,,,41,,,,,,16,301,,,,,,,,301,29,,,561',
',,,,,1003,,,,,974,713,,,,,,,,,1015,,,,,1019,,,561,,,1040,1041,1042,1043',
',,,,,19,,,,,,42,,,41,,29,41,,,1047,,,,,29,,,,713,,713,,,42,,,16,,29',
',,,798,,,,,,,,,,,,,,,,,16,,,,,,,713,,,,,,,19,,,19,,,,,,,,29,,,29,,,',
',,29,42,,42,,,,302,42,,,,29,,,,29,,,,301,,,,302,,,16,,16,,301,,42,16',
',,,,,,41,41,,,,,,,,442,29,29,,,,,29,29,16,,29,,,371,,371,,,,18,,,,,',
'18,,,,,,,,,,,,,,,,41,41,,,,,,41,,19,19,,18,305,305,,,,,,29,29,42,,,',
',,,,,,,,,,,,,,,,,,,,,352,16,370,,,41,,,,41,41,,29,19,19,,,,29,41,19',
',,,29,29,,,,,,29,,,,,,,,,,,29,18,,,,,,,41,41,18,,,,,,,,41,,,,,19,,,',
'19,19,,,,,,29,,42,19,29,29,,,,302,,,,,29,,,302,,370,,,,41,,,,41,16,',
',964,,336,19,19,,,,,,,,29,19,29,29,,,,,,,,,29,29,41,,,,,18,,,,,,,,,42',
',,42,,,,,,,,,19,,18,,19,,,41,969,,,29,,,16,29,,16,,,,,41,,,,,41,,,41',
'41,,,19,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,18,,18,,19,,305,18,,,,,,,,29,',
',,19,,,,305,19,302,,19,19,,29,,18,,415,29,302,,29,29,446,,,,,,42,42',
',,,,,,,,29,,,,,,,597,,597,,,,,,,16,16,,,,,,,,,,,,,,,,,,,,,,,,42,42,',
',,,,42,,503,,505,,506,507,,18,,,,,,,,,,16,16,,,,,,16,,,,,,,,,,,,,,,',
'371,,,42,,,,42,42,,,,,,,,,42,,,,,,,,,,,,16,,,,16,16,,,,,,,,,16,,,,,42',
'42,,,,,,,,,42,,,,,,,,,,,,18,,,,16,16,,305,,,,,,,16,305,,,,,,,,371,631',
',,42,,,,42,,,,965,,,,,,,,,,,,,,,,,,16,,,,16,,,,42,,,,,,,,18,,,18,,,',
',,,,,,,,,,,16,,,,,,,42,,,,,,,,,,,,,672,,42,336,,675,,42,,,42,42,,16',
',,,,,,,,,,,,,,16,,,,,16,,,16,16,,672,,,336,,,,,,,,,,,,,,,,,,,,305,,',
',,719,,,,,,305,,,,,,,,,,18,18,,,,,,,,,,,,,,,,,,,,,230,,,,,,,,,277,277',
'277,,,,,,,,,,,321,322,323,,,,765,18,18,,672,336,,871,18,,,277,277,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,809,,,,,,,,,597,,,18,,,,18,18,,,,817,,,,,18',
',,,,,,,,,,,,837,,,,,,,,,,,,,,,,,,18,18,446,,,,,,,,18,,,,,,,,,,,,,,,',
',,,,,,,,,,873,,,,,,,,,597,,,,18,,,,18,,,,968,,,,277,420,277,,,440,445',
',,,,,,,,,,,,,,230,18,,459,460,461,462,463,464,465,466,467,468,469,470',
'471,472,473,474,475,476,477,478,479,480,481,482,483,484,,,,,,18,277',
',,,,,277,,,277,,,,,18,,277,,277,18,277,277,18,18,,,,,,336,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,531,,,,,,,,,,,,,,,,,,,,,,,,981,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,277,,440,656,420,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,277,,,277,,277,,,,,,,,,,,,,,277,,,,,,,,,690,691,,,,,,,,,,277',
',,277,,,,,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277,767,,,277,277,772,774,,,,,777',
'779,,,656,781,,,,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,,,,,,,,,,277,,,',
',,,,,,,,,,,,,,277,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,277,,,,,,,,,,,,',
',,,,,,,,,277,,875,,,,,,,,,,,,,,772,774,779,777,,878,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,277,875,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,277' ]
        racc_goto_table = arr = ::Array.new(3194, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,152,35,35,35,94,52,59,88,24,10,73,75,39,39,24,25,13,60,60,41,151',
'67,67,59,182,33,9,29,98,24,63,63,9,29,97,17,17,20,24,24,24,2,24,24,24',
'64,64,54,26,92,38,76,91,91,76,67,19,19,6,6,19,39,197,40,40,40,22,24',
'14,187,146,5,24,24,8,25,24,24,50,6,60,6,6,6,6,6,6,6,141,48,53,71,71',
'70,70,70,71,60,66,97,14,197,93,93,72,72,72,192,42,19,19,19,19,131,136',
'136,42,42,49,57,24,147,132,70,129,24,24,24,24,24,7,149,108,173,72,72',
'5,173,9,193,173,109,169,173,144,110,172,9,169,172,47,47,47,58,111,58',
'75,112,113,114,115,116,117,106,105,104,103,133,102,101,184,184,184,100',
'99,139,96,95,146,90,87,35,145,86,74,144,148,107,76,76,150,69,65,73,153',
'154,157,197,158,159,160,161,162,132,163,164,167,168,6,45,170,171,44',
'32,174,24,24,24,24,175,60,24,24,24,24,24,24,151,176,147,177,182,178',
'179,180,35,7,50,24,181,30,35,94,193,35,187,21,54,73,185,18,39,39,22',
'22,54,132,25,22,22,15,189,129,190,131,11,3,57,6,196,1,70,24,,,6,6,70',
'24,187,144,24,26,67,52,33,182,,42,,,,50,73,132,,,,,24,67,24,,,,24,24',
',26,192,141,,,50,,,,9,39,97,31,25,24,,,31,31,70,39,31,,24,,19,19,,70',
',72,,67,92,67,,,,,72,48,24,24,53,,48,136,136,5,14,187,8,26,,24,,24,',
'98,,66,,12,,93,173,97,,173,49,31,31,31,31,49,,47,,,39,,,25,136,38,47',
'41,,188,,33,,41,75,6,,,,,,73,54,,5,24,60,73,,,,,,6,6,,35,6,,63,,76,',
'9,17,73,151,10,10,197,182,,,,64,,,,2,,140,184,184,6,184,184,,184,,,',
'71,60,24,33,40,,,,73,50,40,20,,,,,,,31,31,31,31,,6,6,26,52,,13,35,,6',
'6,,52,,,140,,140,,73,67,75,,,,,,136,67,73,,29,50,50,6,24,,,,,40,,24',
',24,,60,,50,,24,,,9,50,,60,,24,,,10,39,12,,,,25,,,,,50,,,,35,,,,,91',
',,,,12,,73,,,72,,,,,,,,,,,,6,24,,,24,,184,184,184,184,24,,60,,,,,,,31',
'31,,24,,88,,24,72,97,97,,91,188,,,188,,,188,,188,182,,,97,,12,,,33,',
'12,60,91,33,152,,94,,,,24,24,52,,63,,24,24,184,17,24,26,,52,33,,,6,67',
'64,73,,6,73,,,10,10,140,67,140,,,,33,,6,22,22,,24,,59,22,22,6,6,22,',
',137,24,,140,,140,,140,,,,24,24,,72,50,33,,,35,,,,,,6,130,6,,73,,188',
',188,19,188,,188,,,,50,137,,,137,6,,,,24,,142,,60,,24,,,,,70,24,24,',
',60,,,24,,55,6,,,,,55,50,33,24,188,140,97,140,135,140,,97,67,,,,6,6',
'6,,31,142,70,142,140,,,,55,55,55,,,39,24,,25,24,,6,22,24,24,6,,,,,,',
'135,24,,,28,140,,,,,28,,33,55,19,43,55,,,,50,43,,,,,,19,,,24,,24,24',
'50,,43,31,28,,,31,24,24,,43,43,43,,43,,,,,,67,55,,,50,97,,,,,55,,67',
'97,,,,,28,43,,,24,,43,43,24,,43,,24,,,,24,,12,137,,12,137,,,137,,137',
',,,,,130,33,,,,,,,,24,28,,,6,6,6,6,130,6,28,,43,,,,,43,43,43,43,43,',
',,,60,97,,,,,142,24,,142,55,35,,,,,6,,,,130,,24,73,,,,24,,,24,24,,55',
'142,31,135,,6,135,,,135,33,135,,,,24,6,60,,,,,,6,6,6,6,,137,,137,,137',
',137,,,28,12,12,,,,,28,,130,6,43,43,43,43,,,43,43,43,43,43,43,28,55',
',55,,,,55,55,,,43,,,,,,,137,,142,,,,55,,,,,,,,130,55,130,,12,138,138',
'138,130,,,130,,43,,,,31,,43,,135,43,135,,135,,135,,28,31,28,55,,55,',
'28,,,,43,,43,,56,,130,43,,12,56,,,12,12,,,,,,,28,,12,,,,,,,23,135,43',
',,,23,,56,56,56,,55,,,,,,,,43,43,,,12,12,,,,,,,,,23,,,,,,,,,56,,,56',
',,,,,,,,,,,,,,,,130,,130,,,,,,,28,12,,,,12,,,,,,43,,,56,,138,138,138',
'138,,138,,56,,,,,,,,,,,130,12,,130,,,23,,,55,,,,,,23,55,,,,,,,,55,43',
',,130,,,,,,12,,,,,130,130,,,,,,,,,12,,,,,12,,,130,,,138,138,138,138',
',,,,,28,,,,,,56,,,55,,43,55,,,138,,,,,43,,,,130,,130,,,56,,,23,,43,',
',,130,,,,,,,,,,,,,,,,,23,,,,,,,130,,,,,,,28,,,28,,,,,,,,43,,,43,,,,',
',43,56,,56,,,,56,56,,,,43,,,,43,,,,55,,,,56,,,23,,23,,55,,56,23,,,,',
',,55,55,,,,,,,,28,43,43,,,,,43,43,23,,43,,,56,,56,,,,27,,,,,,27,,,,',
',,,,,,,,,,,55,55,,,,,,55,,28,28,,27,27,27,,,,,,43,43,56,,,,,,,,,,,,',
',,,,,,,,,,,,27,23,55,,,55,,,,55,55,,43,28,28,,,,43,55,28,,,,43,43,,',
',,,43,,,,,,,,,,,43,27,,,,,,,55,55,27,,,,,,,,55,,,,,28,,,,28,28,,,,,',
'43,,56,28,43,43,,,,56,,,,,43,,,56,,55,,,,55,,,,55,23,,,55,,68,28,28',
',,,,,,,43,28,43,43,,,,,,,,,43,43,55,,,,,27,,,,,,,,,56,,,56,,,,,,,,,28',
',27,,28,,,55,28,,,43,,,23,43,,23,,,,,55,,,,,55,,,55,55,,,28,,,,,,,,',
',,43,,,,,,,,,,,,,,,,,,27,,27,,28,,27,27,,,,,,,,43,,,,28,,,,27,28,56',
',28,28,,43,,27,,68,43,56,,43,43,68,,,,,,56,56,,,,,,,,,43,,,,,,,27,,27',
',,,,,,23,23,,,,,,,,,,,,,,,,,,,,,,,,56,56,,,,,,56,,68,,68,,68,68,,27',
',,,,,,,,,23,23,,,,,,23,,,,,,,,,,,,,,,,56,,,56,,,,56,56,,,,,,,,,56,,',
',,,,,,,,,23,,,,23,23,,,,,,,,,23,,,,,56,56,,,,,,,,,56,,,,,,,,,,,,27,',
',,23,23,,27,,,,,,,23,27,,,,,,,,56,68,,,56,,,,56,,,,56,,,,,,,,,,,,,,',
',,,23,,,,23,,,,56,,,,,,,,27,,,27,,,,,,,,,,,,,,,23,,,,,,,56,,,,,,,,,',
',,,68,,56,68,,68,,56,,,56,56,,23,,,,,,,,,,,,,,,23,,,,,23,,,23,23,,68',
',,68,,,,,,,,,,,,,,,,,,,,27,,,,,68,,,,,,27,,,,,,,,,,27,27,,,,,,,,,,,',
',,,,,,,,,34,,,,,,,,,34,34,34,,,,,,,,,,,34,34,34,,,,68,27,27,,68,68,',
'27,27,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,68,,,,,,,,,27,,,27,,,,27,27',
',,,68,,,,,27,,,,,,,,,,,,,68,,,,,,,,,,,,,,,,,,27,27,68,,,,,,,,27,,,,',
',,,,,,,,,,,,,,,,,,,,,68,,,,,,,,,27,,,,27,,,,27,,,,27,,,,34,34,34,,,34',
'34,,,,,,,,,,,,,,,34,27,,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,34,,,,,,27,34,,,,,,34,,,34,,,,,27,,34',
',34,27,34,34,27,27,,,,,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,',
',,,,,,,,,,,,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,34,34,34',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,34,,,,,,,,,,,,,,34',
',,,,,,,,34,34,,,,,,,,,,34,,,34,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,',
',,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,34',
'34,34,34,,,,,34,34,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,',
',,,,,34,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,34,,,,',
',,,,,,,,,,,,,,,,,34,,34,,,,,,,,,,,,,,34,34,34,34,,34,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,34' ]
        racc_goto_check = arr = ::Array.new(3194, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   272,    41,   268,   nil,    68,    -2,   124,    71,    26,
  -314,   257,   336,  -515,  -623,  -552,   nil,    26,   240,    -8,
  -177,   177,    45,  1157,     8,  -195,  -371,  1491,   825,  -181,
    32,   261,    90,   -21,  2189,   -29,   nil,   nil,    25,  -199,
    36,  -244,  -375,   836,  -275,  -594,   nil,   120,    55,    84,
    19,   nil,   -30,    54,  -267,   765,  1131,  -473,  -201,   -66,
     8,   nil,   nil,    21,    36,  -217,    56,   -14,  1608,   131,
    63,  -237,    74,   -18,  -300,  -267,  -446,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   111,   119,   -55,   nil,
   116,  -287,  -672,  -478,  -340,   108,  -420,    31,  -571,   102,
   115,  -155,   102,  -558,    98,  -563,  -426,  -742,    62,  -602,
  -210,  -593,  -776,    87,  -439,  -206,  -439,  -701,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -713,
   383,  -448,  -717,  -491,   nil,   121,  -432,    36,   303,  -483,
  -211,  -570,    88,   nil,  -514,  -707,  -819,  -768,  -151,  -412,
   127,  -317,   -23,   -64,  -465,   nil,   nil,   -71,  -466,   -69,
  -465,  -779,  -382,  -488,  -611,   nil,   nil,   128,   126,    59,
   126,   126,  -234,  -240,   128,   132,   140,  -524,  -373,  -373,
   145,  -506,  -313,   nil,  -379,  -455,   nil,  -635,  -262,  -439,
  -614,   nil,  -599,  -744,   nil,   nil,  -102,  -438 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   291,     7,   347,   292,
   nil,   nil,   533,   nil,   844,   nil,   290,   nil,   nil,   nil,
    14,    15,    21,   229,   320,   nil,   nil,   227,   228,   nil,
   nil,    20,   nil,   328,    24,    25,    26,    27,   nil,   687,
   nil,   nil,   nil,   309,   nil,   nil,    28,   423,    35,   nil,
   nil,    37,    40,    39,   nil,   224,   225,   595,   nil,   132,
   431,   131,   134,    78,    79,   nil,    93,    49,   283,   nil,
   424,   nil,   425,   436,   643,   498,   281,   266,    50,    51,
    52,    53,    54,    55,    56,    57,    58,   nil,   267,    64,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   579,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   715,
   836,   nil,   716,   943,   788,   549,   nil,   550,   nil,   nil,
   551,   nil,   553,   659,   nil,   nil,   nil,   559,   nil,   nil,
   nil,   753,   nil,   nil,   nil,   435,   268,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,   nil,
   nil,   nil,   nil,   610,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   828,   548,   nil,   552,   562,   564,   566,   567,
   800,   570,   571,   801,   574,   577,   nil,   285 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 177, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 154, :_reduce_none,
  3, 165, :_reduce_41,
  3, 165, :_reduce_42,
  1, 176, :_reduce_none,
  3, 176, :_reduce_44,
  3, 176, :_reduce_45,
  3, 176, :_reduce_46,
  2, 176, :_reduce_47,
  1, 176, :_reduce_none,
  1, 164, :_reduce_49,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_53,
  0, 189, :_reduce_54,
  0, 190, :_reduce_55,
  6, 186, :_reduce_56,
  1, 188, :_reduce_57,
  2, 180, :_reduce_58,
  3, 180, :_reduce_59,
  4, 180, :_reduce_60,
  5, 180, :_reduce_61,
  4, 180, :_reduce_62,
  5, 180, :_reduce_63,
  2, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  1, 166, :_reduce_none,
  3, 166, :_reduce_70,
  1, 194, :_reduce_none,
  3, 194, :_reduce_72,
  1, 193, :_reduce_73,
  2, 193, :_reduce_74,
  3, 193, :_reduce_75,
  5, 193, :_reduce_76,
  2, 193, :_reduce_77,
  4, 193, :_reduce_78,
  2, 193, :_reduce_79,
  4, 193, :_reduce_80,
  1, 193, :_reduce_81,
  3, 193, :_reduce_82,
  1, 197, :_reduce_none,
  3, 197, :_reduce_84,
  2, 196, :_reduce_85,
  3, 196, :_reduce_86,
  1, 199, :_reduce_87,
  3, 199, :_reduce_88,
  1, 198, :_reduce_89,
  1, 198, :_reduce_90,
  4, 198, :_reduce_91,
  3, 198, :_reduce_92,
  3, 198, :_reduce_93,
  3, 198, :_reduce_94,
  3, 198, :_reduce_95,
  2, 198, :_reduce_96,
  1, 198, :_reduce_97,
  1, 173, :_reduce_98,
  1, 173, :_reduce_99,
  4, 173, :_reduce_100,
  3, 173, :_reduce_101,
  3, 173, :_reduce_102,
  3, 173, :_reduce_103,
  3, 173, :_reduce_104,
  2, 173, :_reduce_105,
  1, 173, :_reduce_106,
  1, 202, :_reduce_107,
  1, 202, :_reduce_none,
  2, 203, :_reduce_109,
  1, 203, :_reduce_110,
  3, 203, :_reduce_111,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_115,
  1, 204, :_reduce_116,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_119,
  1, 162, :_reduce_none,
  1, 163, :_reduce_121,
  0, 210, :_reduce_122,
  4, 163, :_reduce_123,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  3, 179, :_reduce_195,
  5, 179, :_reduce_196,
  3, 179, :_reduce_197,
  5, 179, :_reduce_198,
  6, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  5, 179, :_reduce_202,
  5, 179, :_reduce_203,
  4, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  3, 179, :_reduce_213,
  4, 179, :_reduce_214,
  2, 179, :_reduce_215,
  2, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  2, 179, :_reduce_230,
  2, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  3, 179, :_reduce_235,
  3, 179, :_reduce_236,
  6, 179, :_reduce_237,
  1, 179, :_reduce_none,
  1, 213, :_reduce_239,
  1, 214, :_reduce_none,
  2, 214, :_reduce_241,
  4, 214, :_reduce_242,
  2, 214, :_reduce_243,
  3, 218, :_reduce_244,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 170, :_reduce_247,
  1, 170, :_reduce_248,
  2, 170, :_reduce_249,
  4, 170, :_reduce_250,
  2, 170, :_reduce_251,
  1, 192, :_reduce_252,
  2, 192, :_reduce_253,
  2, 192, :_reduce_254,
  4, 192, :_reduce_255,
  1, 192, :_reduce_256,
  0, 222, :_reduce_257,
  2, 185, :_reduce_258,
  2, 221, :_reduce_259,
  2, 220, :_reduce_260,
  1, 220, :_reduce_none,
  1, 215, :_reduce_262,
  2, 215, :_reduce_263,
  3, 215, :_reduce_264,
  4, 215, :_reduce_265,
  1, 175, :_reduce_266,
  1, 175, :_reduce_267,
  3, 174, :_reduce_268,
  4, 174, :_reduce_269,
  2, 174, :_reduce_270,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_281,
  0, 245, :_reduce_282,
  4, 212, :_reduce_283,
  2, 212, :_reduce_284,
  0, 246, :_reduce_285,
  4, 212, :_reduce_286,
  3, 212, :_reduce_287,
  3, 212, :_reduce_288,
  2, 212, :_reduce_289,
  3, 212, :_reduce_290,
  3, 212, :_reduce_291,
  1, 212, :_reduce_292,
  4, 212, :_reduce_293,
  3, 212, :_reduce_294,
  1, 212, :_reduce_295,
  5, 212, :_reduce_296,
  4, 212, :_reduce_297,
  3, 212, :_reduce_298,
  2, 212, :_reduce_299,
  1, 212, :_reduce_none,
  2, 212, :_reduce_301,
  2, 212, :_reduce_302,
  6, 212, :_reduce_303,
  6, 212, :_reduce_304,
  0, 247, :_reduce_305,
  0, 248, :_reduce_306,
  7, 212, :_reduce_307,
  0, 249, :_reduce_308,
  0, 250, :_reduce_309,
  7, 212, :_reduce_310,
  5, 212, :_reduce_311,
  4, 212, :_reduce_312,
  0, 251, :_reduce_313,
  0, 252, :_reduce_314,
  9, 212, :_reduce_315,
  0, 253, :_reduce_316,
  0, 254, :_reduce_317,
  7, 212, :_reduce_318,
  0, 255, :_reduce_319,
  0, 256, :_reduce_320,
  0, 257, :_reduce_321,
  9, 212, :_reduce_322,
  0, 258, :_reduce_323,
  0, 259, :_reduce_324,
  6, 212, :_reduce_325,
  0, 260, :_reduce_326,
  6, 212, :_reduce_327,
  0, 261, :_reduce_328,
  0, 262, :_reduce_329,
  9, 212, :_reduce_330,
  1, 212, :_reduce_331,
  1, 212, :_reduce_332,
  1, 212, :_reduce_333,
  1, 212, :_reduce_334,
  1, 169, :_reduce_335,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  2, 236, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  1, 237, :_reduce_none,
  5, 237, :_reduce_353,
  1, 159, :_reduce_none,
  2, 159, :_reduce_355,
  1, 240, :_reduce_none,
  1, 240, :_reduce_357,
  1, 274, :_reduce_none,
  3, 274, :_reduce_359,
  1, 277, :_reduce_360,
  3, 277, :_reduce_361,
  1, 276, :_reduce_362,
  4, 276, :_reduce_363,
  6, 276, :_reduce_364,
  3, 276, :_reduce_365,
  5, 276, :_reduce_366,
  2, 276, :_reduce_367,
  4, 276, :_reduce_368,
  1, 276, :_reduce_369,
  3, 276, :_reduce_370,
  4, 278, :_reduce_371,
  2, 278, :_reduce_372,
  2, 278, :_reduce_373,
  1, 278, :_reduce_374,
  2, 283, :_reduce_375,
  1, 283, :_reduce_none,
  6, 284, :_reduce_377,
  8, 284, :_reduce_378,
  4, 284, :_reduce_379,
  6, 284, :_reduce_380,
  4, 284, :_reduce_381,
  2, 284, :_reduce_382,
  6, 284, :_reduce_383,
  2, 284, :_reduce_384,
  4, 284, :_reduce_385,
  6, 284, :_reduce_386,
  2, 284, :_reduce_387,
  4, 284, :_reduce_388,
  2, 284, :_reduce_389,
  4, 284, :_reduce_390,
  1, 284, :_reduce_391,
  1, 187, :_reduce_392,
  1, 187, :_reduce_none,
  3, 288, :_reduce_394,
  1, 288, :_reduce_395,
  4, 288, :_reduce_396,
  1, 289, :_reduce_none,
  4, 289, :_reduce_398,
  1, 290, :_reduce_399,
  3, 290, :_reduce_400,
  1, 291, :_reduce_401,
  1, 291, :_reduce_none,
  0, 295, :_reduce_403,
  3, 235, :_reduce_404,
  4, 293, :_reduce_405,
  1, 293, :_reduce_406,
  3, 294, :_reduce_407,
  3, 294, :_reduce_408,
  0, 298, :_reduce_409,
  0, 299, :_reduce_410,
  6, 297, :_reduce_411,
  2, 182, :_reduce_412,
  4, 182, :_reduce_413,
  5, 182, :_reduce_414,
  5, 182, :_reduce_415,
  0, 301, :_reduce_416,
  3, 234, :_reduce_417,
  4, 234, :_reduce_418,
  4, 234, :_reduce_419,
  3, 234, :_reduce_420,
  3, 234, :_reduce_421,
  3, 234, :_reduce_422,
  2, 234, :_reduce_423,
  1, 234, :_reduce_424,
  4, 234, :_reduce_425,
  0, 302, :_reduce_426,
  0, 303, :_reduce_427,
  6, 233, :_reduce_428,
  0, 304, :_reduce_429,
  0, 305, :_reduce_430,
  6, 233, :_reduce_431,
  0, 307, :_reduce_432,
  6, 239, :_reduce_433,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  6, 158, :_reduce_436,
  0, 158, :_reduce_437,
  1, 308, :_reduce_438,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  2, 309, :_reduce_441,
  1, 309, :_reduce_none,
  2, 160, :_reduce_443,
  1, 160, :_reduce_none,
  1, 223, :_reduce_445,
  1, 223, :_reduce_446,
  1, 223, :_reduce_none,
  1, 224, :_reduce_448,
  1, 311, :_reduce_449,
  1, 311, :_reduce_none,
  2, 311, :_reduce_451,
  3, 312, :_reduce_452,
  1, 312, :_reduce_453,
  3, 225, :_reduce_454,
  3, 226, :_reduce_455,
  3, 227, :_reduce_456,
  3, 227, :_reduce_457,
  1, 316, :_reduce_458,
  3, 316, :_reduce_459,
  1, 317, :_reduce_none,
  2, 317, :_reduce_461,
  3, 229, :_reduce_462,
  3, 229, :_reduce_463,
  1, 319, :_reduce_464,
  3, 319, :_reduce_465,
  3, 228, :_reduce_466,
  3, 228, :_reduce_467,
  3, 230, :_reduce_468,
  3, 230, :_reduce_469,
  1, 320, :_reduce_470,
  3, 320, :_reduce_471,
  1, 321, :_reduce_472,
  3, 321, :_reduce_473,
  1, 313, :_reduce_474,
  2, 313, :_reduce_475,
  1, 314, :_reduce_476,
  2, 314, :_reduce_477,
  1, 315, :_reduce_478,
  2, 315, :_reduce_479,
  1, 318, :_reduce_480,
  0, 323, :_reduce_481,
  3, 318, :_reduce_482,
  0, 324, :_reduce_483,
  4, 318, :_reduce_484,
  1, 322, :_reduce_485,
  1, 322, :_reduce_486,
  1, 322, :_reduce_487,
  1, 322, :_reduce_none,
  2, 208, :_reduce_489,
  1, 208, :_reduce_490,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  3, 209, :_reduce_495,
  1, 310, :_reduce_none,
  2, 310, :_reduce_497,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_507,
  1, 201, :_reduce_508,
  1, 201, :_reduce_509,
  1, 201, :_reduce_510,
  1, 201, :_reduce_511,
  1, 201, :_reduce_512,
  1, 201, :_reduce_513,
  1, 231, :_reduce_514,
  1, 231, :_reduce_515,
  1, 168, :_reduce_516,
  1, 168, :_reduce_517,
  1, 172, :_reduce_518,
  1, 172, :_reduce_519,
  1, 241, :_reduce_520,
  0, 326, :_reduce_521,
  4, 241, :_reduce_522,
  2, 241, :_reduce_523,
  3, 243, :_reduce_524,
  2, 243, :_reduce_525,
  4, 327, :_reduce_526,
  2, 327, :_reduce_527,
  2, 327, :_reduce_528,
  1, 327, :_reduce_none,
  2, 329, :_reduce_530,
  0, 329, :_reduce_531,
  6, 296, :_reduce_532,
  8, 296, :_reduce_533,
  4, 296, :_reduce_534,
  6, 296, :_reduce_535,
  4, 296, :_reduce_536,
  6, 296, :_reduce_537,
  2, 296, :_reduce_538,
  4, 296, :_reduce_539,
  6, 296, :_reduce_540,
  2, 296, :_reduce_541,
  4, 296, :_reduce_542,
  2, 296, :_reduce_543,
  4, 296, :_reduce_544,
  1, 296, :_reduce_545,
  0, 296, :_reduce_546,
  1, 292, :_reduce_547,
  1, 292, :_reduce_548,
  1, 292, :_reduce_549,
  1, 292, :_reduce_550,
  1, 275, :_reduce_none,
  1, 275, :_reduce_552,
  1, 331, :_reduce_none,
  1, 332, :_reduce_none,
  3, 332, :_reduce_555,
  1, 332, :_reduce_none,
  3, 332, :_reduce_557,
  1, 285, :_reduce_558,
  3, 285, :_reduce_559,
  1, 333, :_reduce_none,
  2, 334, :_reduce_561,
  1, 334, :_reduce_562,
  2, 335, :_reduce_563,
  1, 335, :_reduce_564,
  1, 279, :_reduce_none,
  3, 279, :_reduce_566,
  1, 328, :_reduce_none,
  3, 328, :_reduce_568,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  2, 280, :_reduce_571,
  1, 280, :_reduce_572,
  3, 337, :_reduce_573,
  3, 338, :_reduce_574,
  1, 286, :_reduce_575,
  3, 286, :_reduce_576,
  1, 330, :_reduce_577,
  3, 330, :_reduce_578,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 287, :_reduce_581,
  1, 287, :_reduce_582,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 282, :_reduce_585,
  2, 281, :_reduce_586,
  0, 281, :_reduce_587,
  1, 244, :_reduce_none,
  0, 341, :_reduce_589,
  4, 244, :_reduce_590,
  1, 232, :_reduce_591,
  2, 232, :_reduce_592,
  1, 217, :_reduce_none,
  3, 217, :_reduce_594,
  3, 342, :_reduce_595,
  2, 342, :_reduce_596,
  2, 342, :_reduce_597,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 195, :_reduce_none,
  2, 171, :_reduce_none,
  0, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 242, :_reduce_619,
  1, 242, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_622,
  0, 151, :_reduce_623 ]

racc_reduce_n = 624

racc_shift_n = 1048

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_298(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 300 omitted

def _reduce_301(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_362(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_367(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
 result = 0 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_404(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_411(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_414(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_426(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_428(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_437(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_438(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0].dup << word
                    
    result
end

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      list, sym, _ = val

                      case sym[0]
                      when :dstr then
                        sym[0] = :dsym
                      when :str then
                        sym = s(:lit, sym.last.to_sym)
                      else
                        debug20 24
                        sym = s(:dsym, "", result)
                      end

                      result = list.dup << sym
                    
    result
end

def _reduce_466(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].dup << s(:str, val[1])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << s(:lit, val[1].to_sym)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_475(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_481(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_482(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [lexer.lex_strterm, 
                                lexer.brace_nest, 
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store, 
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_484(val, _values, result)
#if   defined(RUBY21) || defined(RUBY22 || defined(RUBY23))
                      # TODO: tRCURLY -> tSTRING_END
#endif
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_485(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_486(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_508(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_509(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_513(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_514(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_518(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_519(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_520(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_521(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_525(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_526(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_559(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_563(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_564(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = args val
                    
    result
end

# reduce 569 omitted

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_572(val, _values, result)
                      debug20 36, val, result
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_574(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 579 omitted

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_582(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 583 omitted

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_587(val, _values, result)
                      result = nil
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

def _reduce_619(val, _values, result)
 yyerrok 
    result
end

# reduce 620 omitted

# reduce 621 omitted

def _reduce_622(val, _values, result)
 yyerrok 
    result
end

def _reduce_623(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
