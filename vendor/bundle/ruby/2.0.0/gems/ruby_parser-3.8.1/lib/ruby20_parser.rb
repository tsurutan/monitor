#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.13
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby20Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-291,579,579,579,637,579,268,-291,-291,-291,3,-104,-291,-291,-291,268',
'-291,749,218,239,215,216,215,216,215,216,-291,-291,-291,700,660,-104',
'-103,-106,-521,579,-291,-291,849,-291,-291,-291,-291,-291,-522,-85,-93',
'-101,-102,83,729,236,-107,817,219,238,237,84,-100,-71,-102,817,660,585',
'659,729,268,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291',
'-291,-291,-99,-101,-291,-291,-291,-102,786,-291,729,-99,-291,219,267',
'-291,-291,659,-291,-603,-291,-100,-291,267,-291,-291,-291,-291,-291',
'-291,-291,219,-291,219,-291,219,113,113,113,605,113,112,112,112,748',
'112,-104,-291,-291,-291,-291,-104,-291,-510,-291,699,-103,-95,-94,-97',
'-510,-510,-510,113,-105,-510,-510,-510,112,-510,113,113,-95,929,267',
'112,112,-510,-98,-510,-510,-510,-101,-102,-91,-105,113,-101,-102,-510',
'-510,112,-510,-510,-510,-510,-510,877,-93,526,607,606,268,215,216,621',
'624,-90,-92,759,113,605,-93,740,610,112,219,741,-607,999,-510,-510,-510',
'-510,-510,-510,-510,-510,-510,-510,-510,-510,-510,-510,-603,839,-510',
'-510,-510,-95,-510,-510,660,539,-510,605,538,-510,-510,-607,-510,-604',
'-510,-101,-510,-106,-510,-510,-510,-510,-510,-510,-510,-428,-510,-93',
'-510,-419,620,623,-103,-607,607,606,-95,-103,659,-95,-607,-510,-510',
'-510,-510,-603,-510,-607,-510,-607,219,267,-96,-95,-607,-607,-607,454',
'-510,-607,-607,-607,-93,-607,-607,-93,817,-607,607,606,239,-607,-607',
'-607,-607,-607,-603,761,-428,-93,-607,317,318,-607,-607,-428,-607,-607',
'-607,-607,-607,239,565,718,-428,557,556,555,-607,558,605,215,216,567',
'718,660,557,556,555,784,558,688,-428,-107,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,-607,-607,-607,783,270,-607,-607,-607,-283',
'785,-607,575,574,-607,659,-283,-607,-607,526,-607,270,-607,605,-607',
'-283,-607,-607,-607,-607,-607,-607,-607,800,-607,-607,-607,607,606,618',
'605,-104,539,605,567,541,568,975,219,-607,-607,-607,-607,605,-607,-507',
'-607,213,841,688,-102,-97,-507,-507,-507,769,-103,-507,-507,-507,718',
'-507,557,556,555,-106,558,575,574,-507,-513,-507,-507,-507,607,606,613',
'-513,-600,845,817,-507,-507,-510,-507,-507,-507,-507,-507,-98,-510,607',
'606,608,607,606,625,-92,714,638,219,568,-516,-107,607,606,603,717,502',
'-516,-601,-101,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507',
'-507,-507,-507,-522,-521,-507,-507,-507,-507,-507,-507,539,500,-507',
'541,-507,-507,-507,-95,-507,-600,-507,258,-507,-507,-507,-507,-507,-507',
'-507,-507,-507,-104,-507,-517,-507,261,845,817,788,-510,-517,-600,262',
'239,-91,-90,-510,-507,-507,-507,-507,-601,-507,-291,-507,-510,-514,-267',
'-100,-99,-291,-291,-291,-514,-507,219,-291,-291,718,-291,557,556,555',
'-601,558,236,-507,487,-518,238,237,234,235,-507,-519,-518,215,216,487',
'-291,-291,-519,-291,-291,-291,-291,-291,215,216,876,-519,718,-519,557',
'556,555,714,558,718,-519,557,556,555,239,558,921,539,770,-519,541,-291',
'-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-515',
'-292,-291,-291,-291,714,643,-515,-292,-266,-291,236,714,-291,717,238',
'237,-292,-291,764,-291,763,-291,-291,-291,-291,-291,-291,-291,239,-291',
'762,-291,718,261,557,556,555,239,558,-512,262,521,522,-607,-291,-291',
'-512,-96,732,-291,-607,-607,-607,253,254,239,-607,-607,113,-607,236',
'-105,585,112,238,237,234,235,-607,236,714,253,254,238,237,234,235,575',
'574,-607,-607,725,-607,-607,-607,-607,-607,236,723,242,407,238,237,234',
'235,409,408,240,718,241,557,556,555,953,558,557,556,555,722,558,-607',
'-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,721',
'879,-607,-607,-607,718,644,557,556,555,-607,558,714,-607,113,705,113',
'239,-607,112,-607,112,-607,-607,-607,-607,-607,-607,-607,882,-607,-607',
'-607,253,254,953,885,557,556,555,887,558,113,714,889,-607,-607,112,-94',
'236,-607,242,113,238,237,234,235,112,219,240,891,241,-103,174,185,175',
'198,171,191,181,180,201,202,196,179,178,173,199,203,204,183,172,186',
'190,192,184,177,892,712,710,193,200,195,194,187,197,182,170,189,188',
'116,117,118,119,120,169,176,167,168,164,165,166,124,126,123,113,125',
'868,869,239,112,870,107,108,708,158,159,706,154,136,137,138,145,142',
'144,253,254,139,140,688,705,900,160,161,146,147,718,702,557,556,555',
'236,558,242,-265,238,237,234,235,151,150,904,135,157,153,152,148,149',
'143,141,133,156,134,-520,450,162,91,113,1005,906,-520,451,112,907,714',
'1006,92,219,705,-520,452,910,912,914,1004,155,916,916,219,219,163,174',
'185,175,198,171,191,181,180,201,202,196,179,178,173,199,203,204,183',
'172,186,190,192,184,177,922,695,924,193,200,195,194,187,197,182,170',
'189,188,116,117,118,119,120,169,176,167,168,164,165,166,124,126,694',
'926,125,688,532,239,116,117,118,119,120,158,159,219,154,136,137,138',
'145,142,144,253,254,139,140,677,-85,219,160,161,146,147,116,117,118',
'119,120,236,219,242,219,238,237,234,235,151,150,219,135,157,153,152',
'148,149,143,141,133,156,134,-291,-520,162,91,744,239,239,-291,-520,936',
'937,743,-604,92,219,940,-291,-520,-268,239,745,239,155,647,270,636,635',
'163,174,185,175,198,171,191,181,180,201,202,196,179,178,173,199,203',
'204,183,172,186,190,192,184,177,219,631,950,193,200,195,194,187,197',
'182,170,189,188,-265,629,622,957,958,169,176,167,168,164,165,166,124',
'126,396,395,125,619,397,960,211,961,616,612,590,158,159,212,154,136',
'137,138,145,142,144,589,210,139,140,-292,-291,744,160,161,146,147,-292',
'-291,956,399,585,502,-604,543,542,-292,-291,745,977,151,150,536,135',
'157,153,152,148,149,143,141,133,156,134,744,-338,162,587,-283,-292,979',
'956,-338,980,588,-283,-292,239,528,984,745,-338,527,586,-283,-292,155',
'523,705,989,991,163,174,185,175,198,171,191,181,180,201,202,196,179',
'178,173,199,203,204,183,172,186,190,192,184,177,993,995,995,193,200',
'195,194,187,197,182,170,189,188,270,219,273,1002,519,169,176,167,168',
'164,165,166,124,126,512,511,125,219,1007,-70,517,1008,916,916,916,158',
'159,518,154,136,137,138,145,142,144,1013,516,139,140,-291,529,502,160',
'161,146,147,-291,530,977,500,497,-604,270,487,218,-291,452,456,455,151',
'150,453,135,157,153,152,148,149,143,141,133,156,134,410,405,162,389',
'-604,-603,694,386,383,380,356,219,316,977,315,1036,1037,1038,1039,995',
'995,995,155,219,258,214,209,163,174,185,175,198,171,191,181,180,201',
'202,196,179,178,173,199,203,204,183,172,186,190,192,184,177,208,916',
'977,193,200,195,194,187,197,182,170,189,188,207,109,995,,,169,176,167',
'168,164,165,166,124,126,,,125,,,,,,,,,158,159,,154,136,137,138,145,142',
'144,,,139,140,,,,160,161,146,147,,,,,,,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,91,,,,,,,,,,92,,,,,,,,,155,,,,,163',
'174,185,175,198,171,191,181,180,201,202,196,179,178,173,199,203,204',
'183,172,186,190,192,184,177,,,,193,200,195,194,187,197,182,170,189,188',
',,,,,169,176,167,168,164,165,166,124,126,,,125,,,,,,,,,158,159,,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,,,,,,,,,151',
'150,,135,157,153,152,148,149,143,141,133,156,134,,,162,91,,,,,,,,,,92',
',,,,,,,,155,,,,,163,174,185,175,198,171,191,181,180,201,202,196,179',
'178,173,199,203,204,183,172,186,190,192,184,177,,,,193,200,195,365,364',
'366,363,170,189,188,,,,,,169,176,167,168,360,361,362,358,126,97,96,359',
',99,,,,,,,158,159,,154,136,137,138,145,142,144,,,139,140,,,,160,161',
'146,147,,,,,,372,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133',
'156,134,,,162,,,,,,,,,,,,291,72,73,74,12,60,,,155,66,67,,,163,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,648,11,48,',
'13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248',
'249,250,245,247,255,256,251,252,,232,233,,,253,254,,43,,,36,,,61,62',
',,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91,83,85',
'86,87,89,,,,84,92,,257,,-242,,,65,,,81,88,90,291,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,648,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,239,243,248,249,250,245,247,255,256,251,252,,232,233,,,253,254,,43',
',,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241',
',,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,632,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,239,243,248,249,250,245,247,255,256,251,252,,232,233,,,253',
'254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240',
'23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,239,243,248,249,250,245,247,255,256,251,252,,232,233',
',,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246',
'244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,219,257,,,,,65,,,81,88',
'90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,239,243,248,249,250,245,247,255,256,251,252',
',232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234',
'235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81',
'88,90,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,10,13,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,239,243,248,249,250,245,247,255,256',
'251,252,,232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238',
'237,234,235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,',
',,65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248,249,250,245,247',
'255,256,251,252,,232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242',
'47,238,237,234,235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92',
',257,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248,249,250,245',
'247,255,256,251,252,,232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236',
',242,47,238,237,234,235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84',
'92,,257,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248,249,250',
'245,247,255,256,251,252,,232,233,,,253,254,,43,,,36,,,61,62,,,63,,38',
'236,,242,47,238,237,234,235,246,244,240,23,241,,,,91,83,85,86,87,89',
',,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13',
'105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248',
'249,250,245,247,255,256,251,252,,232,233,,,253,254,,43,,,36,,,61,62',
',,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91,83,85',
'86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,',
'11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239',
'243,248,249,250,245,247,255,256,251,252,,232,233,,,253,254,,43,,,36',
',,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91',
'83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22',
',,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,239,243,248,249,250,245,247,255,256,251,252,,232,233,,,253,254,,43',
',,293,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241',
',,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,243,248,249,250,245,247,255,256,251,252,,232,233,,,253,254',
',43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23',
'241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,239,243,248,249,250,245,247,255,256,251,252,,232,233,,,253',
'254,,43,,,293,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240',
'23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,239,243,248,249,250,245,247,255,256,251,252,,232,233',
',,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246',
'244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90',
'291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,239,243,248,249,250,245,247,255,256,251,252,,232',
'233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235',
'246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88',
'90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,239,243,248,249,250,245,247,255,256,251,252',
',232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234',
'235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81',
'88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,239,-626,-626,-626,-626,245,247,,,-626',
'-626,,,,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234',
'235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,239,-626,-626,-626,-626,245,247,,,-626,-626',
',,,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246',
'244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,239,-626,-626,-626,-626,245,247,,,-626,-626,,,,,,253',
'254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240',
'23,241,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,239,-626,-626,-626,-626,245,247,,,-626,-626,,,,,,253,254,',
'43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23',
'241,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,,,,,,,,,,,,,,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242',
'47,238,237,234,235,,,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,239,,,,,,,,,,,,,,,,253,254,,43',
',,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,,,240,23,241,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'239,243,248,249,250,245,247,255,256,251,252,,-626,-626,,,253,254,,43',
',,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,243,248,249,250,245,247,,,251,252,,,,,,253,254,,43,,,36,,',
'61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'239,243,248,249,250,245,247,255,256,251,252,,-626,-626,,,253,254,,43',
',,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,-626,-626,-626,-626,245,247,,,-626,-626,,,,,,253,254,,43,',
',36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,8,72,73,74,12,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,',
'22,,,,,,11,48,10,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,243,248,249,250,245,247,255,,251,252,,,,,,253,254,,43,,,36',
',,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'239,-626,-626,-626,-626,245,247,,,-626,-626,,,,,,253,254,,43,,,293,',
',61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,',
',48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,',
',,,,,,,,,,,,,,,,224,,,230,,,61,62,,718,63,557,556,555,565,558,47,,,',
',,,,229,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,285,81,88,90',
'72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,568,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,718,63,557',
'556,555,565,558,47,,,,,,,,23,567,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,563,,81,88,90,72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,568,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,718,63,557,556,555,800,558,47,,,,,,,,23,567,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575,574,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,568',
',,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,',
',,,,,,,,,,,,,,224,,,230,,,61,62,,718,63,557,556,555,800,558,47,,,,,',
',,23,567,,,,91,83,85,86,87,89,,,,84,92,113,,,,,112,65,563,,81,88,90',
'72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,568,,,306,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,350,,,36,,,61,62,,,63,',
'38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101',
'100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,718,63,557,556',
'555,800,558,47,,,,,,,,229,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
'563,,81,88,90,72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,308,309,75',
'76,,,,,,304,305,311,101,100,102,103,,,231,,,,568,,,48,,,105,104,106',
'95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224',
',,230,,,61,62,,,63,,282,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,718,63,557,556,555,565,558,47,,,,,,,,23,567,,,,91,83,85,86,87',
'89,,,,84,92,219,,,,,,65,563,,81,88,90,72,73,74,,60,,575,574,66,67,,',
',70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,',
',,568,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,718,63,557,556,555,565,558,47',
',,,,,,,229,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90',
'72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,568,,,48,,,105,104,106,95,59,97,96,98,',
'99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,718',
'63,557,556,555,800,558,47,,,,,,,,229,567,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575,574,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,568,,,48,,,105,104',
'106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,',
',,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224',
',,230,,,61,62,,718,63,557,556,555,800,558,47,,,,,,,,229,567,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575,574,66',
'67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,',
'231,,,,568,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,718,63,557,556,555,565,558',
'47,,,,,,,,229,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81,88',
'90,72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304',
'305,311,101,100,102,103,,,231,,,,568,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62',
',,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,',
',,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,11,48,10,13,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,',
'47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,399,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,',
',,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,',
',,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62',
',,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,',
'47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,',
',,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,',
',105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,',
',,,,,,,,224,,,230,,,61,62,,,63,,415,,,,47,,,,,,,,229,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224',
',,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97',
'96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,',
'63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,',
',,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,415,,,,47,,,,,,,,229,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,',
',,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,219,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,284',
'99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63',
',,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,284',
'99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63',
',672,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285',
'81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304',
'305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,',
'63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,',
'767,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,',
',,,,,306,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,312,,,,',
',,,,,,,,,,,,,,,894,,,230,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224',
',,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75',
'76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,230,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,314,,,65',
',,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,',
'304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62',
',,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,',
',,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311',
'101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,',
'47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101',
'100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,',
',,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,',
',,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102',
'103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,',
'231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224',
',,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75',
'76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,',
',,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61',
'62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304',
'305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,',
'63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,',
',,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311',
'101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,',
'47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101',
'100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,',
',,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,',
',,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102',
'103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,',
'231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224',
',,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62',
',,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,61,62,,,63,,297',
',,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94',
',45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,',
',,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,,,47,,',
',,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,231,,,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,',
',229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,231,,,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,',
',229,,,,,91,83,85,86,87,89,,,,84,92,219,,,,,,65,,285,81,88,90,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,22,,,,,,11,48,10,13,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,231,,,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,',
',229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,231,,,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,',
',229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,',
',,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102',
'103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,',
'231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97',
'96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59',
'97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59',
'97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309',
'75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,',
',230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75',
'76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,',
',,,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,230,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,514,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,',
',,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311',
'101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,',
'47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101',
'100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,',
',,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,',
',,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102',
'103,,,231,,,,,,,306,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,',
',,,,,306,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,312,,,,',
',,,,,,,,,,,,,,,894,,,230,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104',
'106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,',
',,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224',
',,230,,,61,62,,,63,,415,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,',
',,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97',
'96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,,63,,,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75',
'76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95',
'59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,',
',230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309',
'75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,298',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304',
'305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98',
'284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62',
',,63,,672,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
'285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,',
'32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,',
',,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,',
',,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,',
',,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,672,,,,47,,,,,,,,229,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,',
',,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,',
',,,,,,,,,,,,,,,,,224,,,230,532,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,',
',,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,',
',,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48',
',,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,',
',,,,,,,,,,,,224,,,230,,,61,62,,,63,,672,,280,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,',
',,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,',
',,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,399,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309',
'75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104,106',
'591,59,97,96,592,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,593,,',
'230,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98',
'284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62',
',,63,,282,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,',
',,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,591,59',
'97,96,592,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,593,,,230,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,306,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,,,312,,,,,,,,,,,,,,,,,,,,967,,,230,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,',
'231,,,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,280,,47,,,,,,,,229',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,',
'22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,',
'105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,',
',,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,312,,,,,-284,,,,,,,-284,-284',
'-284,,,-284,-284,-284,302,-284,,298,,,61,62,,,63,-284,-284,-284,,,,',
',,,-284,-284,,-284,-284,-284,-284,-284,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,,,-284,-284,-284,,,-284,,,-284,,,-284,-284,,-284',
',-284,,-284,,-284,-284,-284,-284,-284,-284,-284,,-284,,-284,,,,,,,,',
',,,,-284,-284,-284,-284,-609,-284,,-284,,,,-609,-609,-609,,,-609,-609',
'-609,560,-609,557,556,555,565,558,,,,-609,-609,-609,-609,,,567,,,,,-609',
'-609,,-609,-609,-609,-609,-609,,,,,,,,,,563,,,,,,,,,572,571,575,574',
',-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609',
',,-609,-609,-609,,,-609,,,-609,,,-609,-609,,-609,568,-609,,-609,,-609',
'-609,-609,-609,-609,-609,-609,,-609,-609,-609,,,,,,,,,,,,,-609,-609',
'-609,-609,-608,-609,,-609,,,,-608,-608,-608,,,-608,-608,-608,560,-608',
'557,556,555,565,558,,,,-608,-608,-608,-608,,,567,,,,,-608,-608,,-608',
'-608,-608,-608,-608,,,,,,,,,,563,546,,,,,,,,572,571,575,574,,-608,-608',
'-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,,,-608,-608',
'-608,,,-608,,,-608,,,-608,-608,,-608,568,-608,,-608,,-608,-608,-608',
'-608,-608,-608,-608,,-608,-608,-608,,,,,,,,,,,,,-608,-608,-608,-608',
'-427,-608,,-608,,,,-427,-427,-427,,,-427,-427,-427,560,-427,557,556',
'555,565,558,,,,-427,-427,-427,,,,567,,,,,-427,-427,,-427,-427,-427,-427',
'-427,,,,,,,,,,563,,,,,,,,,572,571,575,574,,-427,-427,-427,-427,-427',
'-427,-427,-427,-427,-427,-427,-427,-427,-427,,,-427,-427,-427,,,-427',
',270,-427,,,-427,-427,,-427,568,-427,,-427,,-427,-427,-427,-427,-427',
'-427,-427,,-427,-427,-427,,,,,,,,,,,,-625,-427,-427,,-427,,-427,-625',
'-625,-625,,,-625,-625,-625,560,-625,557,556,555,565,558,,,,-625,-625',
'-625,,,,567,,,,,-625,-625,,-625,-625,-625,-625,-625,,,,,,,,,,563,753',
',,,,,,,572,571,575,574,,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,-625,-625,,,-625,-625,-625,,,-625,,270,-625,,,-625,-625',
',-625,568,-625,,-625,,-625,-625,-625,-625,-625,-625,-625,,-625,-625',
'-625,,,,,,,,,,,,-625,-625,-625,,-625,,-625,-625,-625,-625,,,-625,-625',
'-625,560,-625,557,556,555,565,558,,,,-625,-625,,,,,567,,,,,-625,-625',
',-625,-625,-625,-625,-625,,,,,,,,,,563,,,,,,,,,572,571,575,574,,-298',
',,,,,,-298,-298,-298,,-625,-298,-298,-298,,-298,,-625,,,,,270,-625,',
'-298,-298,,,,568,,,,,-298,-298,,-298,-298,-298,-298,-298,,-625,-625',
',,,,,,,,,,,,-625,,,,,-625,,,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,-298,-298,-298,,,-298,-298,-298,,,-298,,273,-298,,,-298',
'-298,,-298,,-298,,-298,,-298,-298,-298,-298,-298,-298,-298,,-298,,-298',
',,,,,424,428,,,425,,,-298,-298,,-298,,-298,158,159,,154,136,137,138',
'145,142,144,,,139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,799,162,557,556,555,800,558',
',,,,485,428,,,486,567,,,,,155,,,158,159,163,154,136,137,138,145,142',
'144,,,139,140,563,,,160,161,146,147,,,572,571,575,574,,,,,,,,151,150',
',135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,568,737,435',
',,738,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,',
',,160,161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152,148,149,143',
'141,133,156,134,,,162,,,,,,,,,,485,428,,,486,,,,,,155,,,158,159,163',
'154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,270,,',
',,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,',
',,,,,735,428,,,736,,,,,,155,,,158,159,163,154,136,137,138,145,142,144',
',,139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,,,,,,,,,,1029,428,,,1030,,,,,,155',
',,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,270,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',,162,,,,,,,,,,853,435,,,854,,,,,,155,,,158,159,163,154,136,137,138',
'145,142,144,,,139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,1031,435,,,1032',
',,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160',
'161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152,148,149,143,141',
'133,156,134,,,162,,,,,,,,,,1001,435,,,1000,,,,,,155,,,158,159,163,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,270,,,,,,',
',151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,',
',652,435,,,653,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,',
'139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,,,,,,,,,,650,428,,,651,,,,,,155,,',
'158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,270,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',,162,,,,,,,,,,681,428,,,682,,,,,,155,,,158,159,163,154,136,137,138',
'145,142,144,,,139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,650,428,,,651',
',,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160',
'161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152,148,149,143,141',
'133,156,134,,,162,,,,,,,,,,431,435,,,430,,,,,,155,,,158,159,163,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,270,,,,,,',
',151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,',
',652,435,,,653,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,',
'139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,,,,,,,,,,684,435,,,685,,,,,,155,,',
'158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,270,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',560,162,557,556,555,565,558,560,,557,556,555,565,558,,,567,,,,,155',
',567,,799,163,557,556,555,800,558,,,,,,,563,,,567,,,,563,753,572,571',
'575,574,,,,572,571,575,574,,,,,799,563,557,556,555,800,558,,,,572,571',
'575,574,,,567,,,,799,568,557,556,555,800,558,,568,,,,,,,,567,,563,560',
',557,556,555,565,558,568,572,571,575,574,,,,,567,,,563,,,,,,,,,572,571',
'575,574,,,,,219,,563,,,,,,568,,,572,571,575,574,,,,,,,,,,,,,,568,,,',
',,,,,,,,,,,,,,,568' ]
        racc_action_table = arr = ::Array.new(25640, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'653,341,340,925,424,903,307,653,653,653,1,1030,653,653,653,663,653,597',
'22,459,756,756,448,448,692,692,653,653,653,545,491,736,737,589,222,850',
'653,653,731,653,653,653,653,653,223,676,424,1044,1029,80,582,459,351',
'726,22,459,459,80,348,676,424,982,664,982,491,581,64,653,653,653,653',
'653,653,653,653,653,653,653,653,653,653,347,851,653,653,653,735,653',
'653,852,222,653,719,307,653,653,664,653,737,653,223,653,663,653,653',
'653,653,653,653,653,756,653,448,653,692,341,340,925,614,903,341,340',
'925,597,903,1030,653,653,653,653,1030,653,98,653,545,1031,736,737,589',
'98,98,98,597,653,98,98,98,597,98,850,582,682,850,64,850,582,98,351,98',
'98,98,1044,1029,348,738,581,1044,1029,98,98,581,98,98,98,98,98,787,681',
'453,614,614,29,750,750,387,390,347,851,614,852,378,735,593,378,852,951',
'593,684,951,98,98,98,98,98,98,98,98,98,98,98,98,98,98,1031,716,98,98',
'98,682,98,98,483,329,98,617,329,98,98,853,98,738,98,787,98,453,98,98',
'98,98,98,98,98,812,98,681,98,29,387,390,1031,684,378,378,682,1031,483',
'682,684,98,98,98,98,684,98,652,98,684,701,29,738,682,652,652,652,225',
'98,652,652,652,681,652,853,681,693,684,617,617,691,853,652,652,652,652',
'853,617,812,681,853,44,44,652,652,812,652,652,652,652,652,690,702,921',
'812,921,921,921,853,921,384,339,339,702,717,492,717,717,717,651,717',
'687,812,225,652,652,652,652,652,652,652,652,652,652,652,652,652,652',
'650,686,652,652,652,968,652,652,702,702,652,492,968,652,652,316,652',
'683,652,381,652,968,652,652,652,652,652,652,652,879,652,652,652,384',
'384,384,376,651,697,392,879,697,702,921,680,652,652,652,652,374,652',
'95,652,18,717,678,650,316,95,95,95,633,652,95,95,95,563,95,563,563,563',
'316,563,879,879,95,365,95,95,95,381,381,381,365,591,1015,1015,95,95',
'359,95,95,95,95,95,18,359,376,376,376,392,392,392,633,563,425,734,879',
'361,18,374,374,374,563,671,361,592,633,95,95,95,95,95,95,95,95,95,95',
'95,95,95,95,42,41,95,95,95,591,95,95,330,669,95,330,591,95,95,425,95',
'591,95,662,95,591,95,95,95,95,95,95,95,425,95,360,95,368,724,724,656',
'592,360,591,368,479,42,41,592,95,95,95,95,592,95,430,95,592,366,766',
'42,41,430,430,430,366,95,654,430,430,839,430,839,839,839,592,839,479',
'358,645,362,479,479,479,479,358,299,362,325,325,639,430,430,299,430',
'430,430,430,430,20,20,771,299,714,964,714,714,714,839,714,977,964,977',
'977,977,460,977,839,334,634,964,334,430,430,430,430,430,430,430,430',
'430,430,430,430,430,430,363,741,430,430,430,714,430,363,741,630,430',
'460,977,430,714,460,460,741,430,626,430,624,430,430,430,430,430,430',
'430,478,430,621,430,841,27,841,841,841,467,841,364,27,312,312,431,430',
'430,364,430,584,430,431,431,431,467,467,469,431,431,749,431,478,430',
'583,749,478,478,478,478,431,467,841,469,469,467,467,467,467,705,705',
'431,431,578,431,431,431,431,431,469,576,469,123,469,469,469,469,123',
'123,469,922,469,922,922,922,999,922,999,999,999,573,999,431,431,431',
'431,431,431,431,431,431,431,431,431,431,431,569,789,431,431,431,975',
'431,975,975,975,431,975,922,431,5,790,288,472,431,5,431,288,431,431',
'431,431,431,431,431,792,431,431,431,472,472,891,793,891,891,891,794',
'891,754,975,796,431,431,754,431,472,431,472,344,472,472,472,472,344',
'797,472,798,472,431,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,799,560,553,11,11,11,11,11,11,11,11,11,11,675',
'675,675,675,675,11,11,11,11,11,11,11,11,11,11,934,11,757,757,465,934',
'757,757,757,552,11,11,551,11,11,11,11,11,11,11,465,465,11,11,811,549',
'815,11,11,11,11,1013,548,1013,1013,1013,465,1013,465,818,465,465,465',
'465,11,11,819,11,11,11,11,11,11,11,11,11,11,11,965,221,11,11,860,966',
'823,965,221,860,824,1013,966,11,825,826,965,221,830,831,833,966,11,834',
'836,838,535,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,840,534,843,12,12,12,12,12,12,12,12,12,12,508,508',
'508,508,508,12,12,12,12,12,12,12,12,12,533,846,12,524,520,466,290,290',
'290,290,290,12,12,515,12,12,12,12,12,12,12,466,466,12,12,513,510,509',
'12,12,12,12,9,9,9,9,9,466,494,466,856,466,466,466,466,12,12,493,12,12',
'12,12,12,12,12,12,12,12,12,685,300,12,12,595,464,463,685,300,861,862',
'595,685,12,863,872,685,300,873,462,595,461,12,440,432,423,422,12,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'419,416,890,91,91,91,91,91,91,91,91,91,91,413,411,389,894,895,91,91',
'91,91,91,91,91,91,91,91,91,91,386,91,897,17,898,383,380,352,91,91,17',
'91,91,91,91,91,91,91,350,17,91,91,519,1032,893,91,91,91,91,519,1032',
'893,346,345,335,1032,332,331,519,1032,893,923,91,91,327,91,91,91,91',
'91,91,91,91,91,91,91,955,49,91,349,303,1007,927,955,49,928,349,303,1007',
'321,318,933,955,49,317,349,303,1007,91,313,941,944,945,91,755,755,755',
'755,755,755,755,755,755,755,755,755,755,755,755,755,755,755,755,755',
'755,755,755,755,946,947,949,755,755,755,755,755,755,755,755,755,755',
'311,306,305,959,302,755,755,755,755,755,755,755,755,755,296,295,755',
'294,967,292,301,970,971,972,973,755,755,301,755,755,755,755,755,755',
'755,974,301,755,755,854,319,281,755,755,755,755,854,319,976,278,277',
'854,266,263,231,854,319,227,226,755,755,224,755,755,755,755,755,755',
'755,755,755,755,755,205,121,755,90,1000,1001,1003,89,88,87,72,48,43',
'1014,40,1019,1020,1021,1022,1023,1024,1025,755,1028,25,19,16,755,406',
'406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406',
'406,406,406,406,406,406,15,1033,1034,406,406,406,406,406,406,406,406',
'406,406,13,3,1046,,,406,406,406,406,406,406,406,406,406,,,406,,,,,,',
',,406,406,,406,406,406,406,406,406,406,,,406,406,,,,406,406,406,406',
',,,,,,,,,,,,,406,406,,406,406,406,406,406,406,406,406,406,406,406,,',
'406,406,,,,,,,,,,406,,,,,,,,,406,,,,,406,628,628,628,628,628,628,628',
'628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628',
',,,628,628,628,628,628,628,628,628,628,628,,,,,,628,628,628,628,628',
'628,628,628,628,,,628,,,,,,,,,628,628,,628,628,628,628,628,628,628,',
',628,628,,,,628,628,628,628,,,,,,,,,,,,,,628,628,,628,628,628,628,628',
'628,628,628,628,628,628,,,628,628,,,,,,,,,,628,,,,,,,,,628,,,,,628,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
',,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74',
'74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,',
',,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,',
',,930,930,930,930,930,930,,,74,930,930,,,74,930,,930,930,930,930,930',
'930,930,,,,,,930,930,930,930,930,930,930,,,930,,,,,443,930,930,,930',
'930,930,930,930,930,930,930,930,,930,930,930,,930,930,,930,930,930,443',
'443,443,443,443,443,443,443,443,443,443,,443,443,,,443,443,,930,,,930',
',,930,930,,,930,,930,443,,443,930,443,443,443,443,443,443,443,930,443',
',,,930,930,930,930,930,930,,,,930,930,,443,,443,,,930,,,930,930,930',
'700,700,700,700,700,700,,,,700,700,,,,700,,700,700,700,700,700,700,700',
',,,,,700,700,700,700,700,700,700,,,700,,,,,655,700,700,,700,700,700',
'700,700,700,700,700,700,,700,700,700,,700,700,,700,700,700,655,655,655',
'655,655,655,655,655,655,655,655,,655,655,,,655,655,,700,,,700,,,700',
'700,,,700,,700,655,,655,700,655,655,655,655,655,655,655,700,655,,,,700',
'700,700,700,700,700,,,,700,700,,655,,,,,700,,,700,700,700,699,699,699',
'699,699,699,,,,699,699,,,,699,,699,699,699,699,699,699,699,,,,,,699',
'699,699,699,699,699,699,,,699,,,,,418,699,699,,699,699,699,699,699,699',
'699,699,699,,699,699,699,,699,699,,699,699,699,418,418,418,418,418,418',
'418,418,418,418,418,,418,418,,,418,418,,699,,,699,,,699,699,,,699,,699',
'418,,418,699,418,418,418,418,418,418,418,699,418,,,,699,699,699,699',
'699,699,,,,699,699,,418,,,,,699,,,699,699,699,817,817,817,817,817,817',
',,,817,817,,,,817,,817,817,817,817,817,817,817,,,,,,817,817,817,817',
'817,817,817,,,817,,,,,,817,817,,817,817,817,817,817,817,817,817,817',
',817,817,817,,817,817,,817,817,817,482,482,482,482,482,482,482,482,482',
'482,482,,482,482,,,482,482,,817,,,817,,,817,817,,,817,,817,482,,482',
'817,482,482,482,482,482,482,482,817,482,,,,817,817,817,817,817,817,',
',,817,817,482,482,,,,,817,,,817,817,817,808,808,808,808,808,808,,,,808',
'808,,,,808,,808,808,808,808,808,808,808,,,,,,808,808,808,808,808,808',
'808,,,808,,,,,,808,808,,808,808,808,808,808,808,808,808,808,,808,808',
'808,,808,808,,808,808,808,780,780,780,780,780,780,780,780,780,780,780',
',780,780,,,780,780,,808,,,808,,,808,808,,,808,,808,780,,780,808,780',
'780,780,780,780,780,780,808,780,,,,808,808,808,808,808,808,,,,808,808',
',780,,,,,808,,,808,808,808,405,405,405,405,405,405,,,,405,405,,,,405',
',405,405,405,405,405,405,405,,,,,,405,405,405,405,405,405,405,,,405',
',,,,,405,405,405,405,405,405,405,405,405,405,405,405,,405,405,405,,405',
'405,,405,405,405,689,689,689,689,689,689,689,689,689,689,689,,689,689',
',,689,689,,405,,,405,,,405,405,,,405,,405,689,,689,405,689,689,689,689',
'689,689,689,405,689,,,,405,405,405,405,405,405,,,,405,405,,689,,,,,405',
',,405,405,405,803,803,803,803,803,803,,,,803,803,,,,803,,803,803,803',
'803,803,803,803,,,,,,803,803,803,803,803,803,803,,,803,,,,,,803,803',
',803,803,803,803,803,803,803,803,803,,803,803,803,,803,803,,803,803',
'803,875,875,875,875,875,875,875,875,875,875,875,,875,875,,,875,875,',
'803,,,803,,,803,803,,,803,,803,875,,875,803,875,875,875,875,875,875',
'875,803,875,,,,803,803,803,803,803,803,,,,803,803,,875,,,,,803,,,803',
'803,803,963,963,963,963,963,963,,,,963,963,,,,963,,963,963,963,963,963',
'963,963,,,,,,963,963,963,963,963,963,963,,,963,,,,,,963,963,,963,963',
'963,963,963,963,963,963,963,,963,963,963,,963,963,,963,963,963,24,24',
'24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,963,,,963,,,963,963,,,963',
',963,24,,24,963,24,24,24,24,24,24,24,963,24,,,,963,963,963,963,963,963',
',,,963,963,,24,,,,,963,,,963,963,963,324,324,324,324,324,324,,,,324',
'324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324',
'324,,,324,,,,,,324,324,,324,324,324,324,324,324,324,324,324,,324,324',
'324,,324,324,,324,324,324,775,775,775,775,775,775,775,775,775,775,775',
',775,775,,,775,775,,324,,,324,,,324,324,,,324,,324,775,,775,324,775',
'775,775,775,775,775,775,324,775,,,,324,324,324,324,324,324,,,,324,324',
',775,,,,,324,,,324,324,324,577,577,577,577,577,577,,,,577,577,,,,577',
',577,577,577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,,577',
',,,,,577,577,,577,577,577,577,577,577,577,577,577,,577,577,577,,577',
'577,,577,577,577,275,275,275,275,275,275,275,275,275,275,275,,275,275',
',,275,275,,577,,,577,,,577,577,,,577,,577,275,,275,577,275,275,275,275',
'275,275,275,577,275,,,,577,577,577,577,577,577,,,,577,577,,275,,,,,577',
',,577,577,577,580,580,580,580,580,580,,,,580,580,,,,580,,580,580,580',
'580,580,580,580,,,,,,580,580,580,580,580,580,580,,,580,,,,,,580,580',
',580,580,580,580,580,580,580,580,580,,580,580,580,,580,580,,580,580',
'580,768,768,768,768,768,768,768,768,768,768,768,,768,768,,,768,768,',
'580,,,580,,,580,580,,,580,,580,768,,768,580,768,768,768,768,768,768',
'768,580,768,,,,580,580,580,580,580,580,,,,580,580,,768,,,,,580,,,580',
'580,580,293,293,293,293,293,293,,,,293,293,,,,293,,293,293,293,293,293',
'293,293,,,,,,293,293,293,293,293,293,293,,,293,,,,,,293,293,,293,293',
'293,293,293,293,293,293,293,,293,293,293,,293,293,,293,293,293,778,778',
'778,778,778,778,778,778,778,778,778,,778,778,,,778,778,,293,,,293,,',
'293,293,,,293,,293,778,,778,293,778,778,778,778,778,778,778,293,778',
',,,293,293,293,293,293,293,,,,293,293,,778,,,,,293,,,293,293,293,978',
'978,978,978,978,978,,,,978,978,,,,978,,978,978,978,978,978,978,978,',
',,,,978,978,978,978,978,978,978,,,978,,,,,,978,978,,978,978,978,978',
'978,978,978,978,978,,978,978,978,,978,978,,978,978,978,878,878,878,878',
'878,878,878,878,878,878,878,,878,878,,,878,878,,978,,,978,,,978,978',
',,978,,978,878,,878,978,878,878,878,878,878,878,878,978,878,,,,978,978',
'978,978,978,978,,,,978,978,,878,,,,,978,,,978,978,978,36,36,36,36,36',
'36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,',
'36,,,,,,36,36,,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36',
'782,782,782,782,782,782,782,782,782,782,782,,782,782,,,782,782,,36,',
',36,,,36,36,,,36,,36,782,,782,36,782,782,782,782,782,782,782,36,782',
',,,36,36,36,36,36,36,,,,36,36,,782,,,,,36,,,36,36,36,983,983,983,983',
'983,983,,,,983,983,,,,983,,983,983,983,983,983,983,983,,,,,,983,983',
'983,983,983,983,983,,,983,,,,,,983,983,,983,983,983,983,983,983,983',
'983,983,,983,983,983,,983,983,,983,983,983,773,773,773,773,773,773,773',
'773,773,773,773,,773,773,,,773,773,,983,,,983,,,983,983,,,983,,983,773',
',773,983,773,773,773,773,773,773,773,983,773,,,,983,983,983,983,983',
'983,,,,983,983,,773,,,,,983,,,983,983,983,986,986,986,986,986,986,,',
',986,986,,,,986,,986,986,986,986,986,986,986,,,,,,986,986,986,986,986',
'986,986,,,986,,,,,,986,986,,986,986,986,986,986,986,986,986,986,,986',
'986,986,,986,986,,986,986,986,531,531,531,531,531,531,531,531,531,531',
'531,,531,531,,,531,531,,986,,,986,,,986,986,,,986,,986,531,,531,986',
'531,531,531,531,531,531,531,986,531,,,,986,986,986,986,986,986,,,,986',
'986,,531,,,,,986,,,986,986,986,751,751,751,751,751,751,,,,751,751,,',
',751,,751,751,751,751,751,751,751,,,,,,751,751,751,751,751,751,751,',
',751,,,,,,751,751,,751,751,751,751,751,751,751,751,751,,751,751,751',
',751,751,,751,751,751,438,438,438,438,438,438,438,438,438,438,438,,438',
'438,,,438,438,,751,,,751,,,751,751,,,751,,751,438,,438,751,438,438,438',
'438,438,438,438,751,438,,,,751,751,751,751,751,751,,,,751,751,,438,',
',,,751,,,751,751,751,230,230,230,230,230,230,,,,230,230,,,,230,,230',
'230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,',
'230,230,,230,230,230,230,230,230,230,230,230,,230,230,230,,230,230,',
'230,230,230,473,473,473,473,473,473,473,,,473,473,,,,,,473,473,,230',
',,230,,,230,230,,,230,,230,473,,473,230,473,473,473,473,473,473,473',
'230,473,,,,230,230,230,230,230,230,,,,230,230,,,,,,,230,,,230,230,230',
'987,987,987,987,987,987,,,,987,987,,,,987,,987,987,987,987,987,987,987',
',,,,,987,987,987,987,987,987,987,,,987,,,,,,987,987,,987,987,987,987',
'987,987,987,987,987,,987,987,987,,987,987,,987,987,987,474,474,474,474',
'474,474,474,,,474,474,,,,,,474,474,,987,,,987,,,987,987,,,987,,987,474',
',474,987,474,474,474,474,474,474,474,987,474,,,,987,987,987,987,987',
'987,,,,987,987,,,,,,,987,,,987,987,987,752,752,752,752,752,752,,,,752',
'752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752,752,752',
'752,,,752,,,,,,752,752,,752,752,752,752,752,752,752,752,752,,752,752',
'752,,752,752,,752,752,752,475,475,475,475,475,475,475,,,475,475,,,,',
',475,475,,752,,,752,,,752,752,,,752,,752,475,,475,752,475,475,475,475',
'475,475,475,752,475,,,,752,752,752,752,752,752,,,,752,752,,,,,,,752',
',,752,752,752,847,847,847,847,847,847,,,,847,847,,,,847,,847,847,847',
'847,847,847,847,,,,,,847,847,847,847,847,847,847,,,847,,,,,,847,847',
',847,847,847,847,847,847,847,847,847,,847,847,847,,847,847,,847,847',
'847,477,477,477,477,477,477,477,,,477,477,,,,,,477,477,,847,,,847,,',
'847,847,,,847,,847,477,,477,847,477,477,477,477,477,477,477,847,477',
',,,847,847,847,847,847,847,,,,847,847,,,,,,,847,,,847,847,847,207,207',
'207,207,207,207,,,,207,207,,,,207,,207,207,207,207,207,207,207,,,,,',
'207,207,207,207,207,207,207,,,207,,,,,,207,207,,207,207,207,207,207',
'207,207,207,207,,207,207,207,,207,207,,207,207,207,471,,,,,,,,,,,,,',
',,471,471,,207,,,207,,,207,207,,,207,,207,471,,471,207,471,471,471,471',
',,471,207,471,,,,207,207,207,207,207,207,,,,207,207,,,,,,,207,,,207',
'207,207,848,848,848,848,848,848,,,,848,848,,,,848,,848,848,848,848,848',
'848,848,,,,,,848,848,848,848,848,848,848,,,848,,,,,,848,848,,848,848',
'848,848,848,848,848,848,848,,848,848,848,,848,848,,848,848,848,470,',
',,,,,,,,,,,,,,470,470,,848,,,848,,,848,848,,,848,,848,470,,470,848,470',
'470,470,470,,,470,848,470,,,,848,848,848,848,848,848,,,,848,848,,,,',
',,848,,,848,848,848,758,758,758,758,758,758,,,,758,758,,,,758,,758,758',
'758,758,758,758,758,,,,,,758,758,758,758,758,758,758,,,758,,,,,,758',
'758,,758,758,758,758,758,758,758,758,758,,758,758,758,,758,758,,758',
'758,758,457,457,457,457,457,457,457,457,457,457,457,,457,457,,,457,457',
',758,,,758,,,758,758,,,758,,758,457,,457,758,457,457,457,457,457,457',
'457,758,457,,,,758,758,758,758,758,758,,,,758,758,,,,,,,758,,,758,758',
'758,857,857,857,857,857,857,,,,857,857,,,,857,,857,857,857,857,857,857',
'857,,,,,,857,857,857,857,857,857,857,,,857,,,,,,857,857,,857,857,857',
'857,857,857,857,857,857,,857,857,857,,857,857,,857,857,857,480,480,480',
'480,480,480,480,,,480,480,,,,,,480,480,,857,,,857,,,857,857,,,857,,857',
'480,,480,857,480,480,480,480,480,480,480,857,480,,,,857,857,857,857',
'857,857,,,,857,857,,,,,,,857,,,857,857,857,900,900,900,900,900,900,',
',,900,900,,,,900,,900,900,900,900,900,900,900,,,,,,900,900,900,900,900',
'900,900,,,900,,,,,,900,900,,900,900,900,900,900,900,900,900,900,,900',
'900,900,,900,900,,900,900,900,458,458,458,458,458,458,458,458,458,458',
'458,,458,458,,,458,458,,900,,,900,,,900,900,,,900,,900,458,,458,900',
'458,458,458,458,458,458,458,900,458,,,,900,900,900,900,900,900,,,,900',
'900,,,,,,,900,,,900,900,900,896,896,896,896,896,896,,,,896,896,,,,896',
',896,896,896,896,896,896,896,,,,,,896,896,896,896,896,896,896,,,896',
',,,,,896,896,,896,896,896,896,896,896,896,896,896,,896,896,896,,896',
'896,,896,896,896,468,468,468,468,468,468,468,,,468,468,,,,,,468,468',
',896,,,896,,,896,896,,,896,,896,468,,468,896,468,468,468,468,468,468',
'468,896,468,,,,896,896,896,896,896,896,,,,896,896,,,,,,,896,,,896,896',
'896,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,',
',,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,481,481,481,481,481,481',
'481,481,,481,481,,,,,,481,481,,2,,,2,,,2,2,,,2,,2,481,,481,2,481,481',
'481,481,481,481,481,2,481,,,,2,2,2,2,2,2,,,,2,2,,,,,,,2,,,2,2,2,298',
'298,298,298,298,298,,,,298,298,,,,298,,298,298,298,298,298,298,298,',
',,,,298,298,298,298,298,298,298,,,298,,,,,,298,298,,298,298,298,298',
'298,298,298,298,298,,298,298,298,,298,298,,298,298,298,476,476,476,476',
'476,476,476,,,476,476,,,,,,476,476,,298,,,298,,,298,298,,,298,,298,476',
',476,298,476,476,476,476,476,476,476,298,476,,,,298,298,298,298,298',
'298,,,,298,298,,,,,,,298,,,298,298,298,807,807,807,807,807,807,,,,807',
'807,,,,807,,807,807,807,807,807,807,807,,,,,,807,807,807,807,807,807',
'807,,,807,,,,,,807,807,,807,807,807,807,807,807,807,807,807,,807,807',
'807,,807,807,,807,807,807,,,,,,,,,,,,,,,,,,,,807,,,807,,,807,807,,,807',
',807,,,,807,,,,,,,,807,,,,,807,807,807,807,807,807,,,,807,807,,,,,,',
'807,,,807,807,807,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63',
',,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63',
'63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,710,63',
'710,710,710,710,710,63,,,,,,,,63,710,,,,63,63,63,63,63,63,,,,63,63,',
',,,,,63,710,63,63,63,63,66,66,66,,66,,710,710,66,66,,,,66,,66,66,66',
'66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,710,,,66,,,66,66,66,66',
'66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,',
'66,66,,916,66,916,916,916,916,916,66,,,,,,,,66,916,,,,66,66,66,66,66',
'66,,,,66,66,,,,,,,66,916,,66,66,66,67,67,67,,67,,916,916,67,67,,,,67',
',67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,916,,,67,,,67',
'67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67',
',,67,,,67,67,,995,67,995,995,995,995,995,67,,,,,,,,67,995,,,,67,67,67',
'67,67,67,,,,67,67,,,,,,,67,995,,67,67,67,70,70,70,,70,,995,995,70,70',
',,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,995,,',
'70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,',
',,,,,,,70,,,70,,,70,70,,993,70,993,993,993,993,993,70,,,,,,,,70,993',
',,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,993,,70,70,70,71,71,71,,71',
',993,993,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71',
',,71,,,,993,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,',
',,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71',
'71,71,,,,71,71,,,,,,,71,,,71,71,71,767,767,767,,767,,,,767,767,,,,767',
',767,767,767,767,767,767,767,,,,,,767,767,767,767,767,767,767,,,767',
',,,,,,767,,,767,767,767,767,767,767,767,767,,767,767,767,,767,767,,767',
'767,767,,,,,,,,,,,,,,,,,,,,767,,,767,,,767,767,,991,767,991,991,991',
'991,991,767,,,,,,,,767,991,,,,767,767,767,767,767,767,,,,767,767,,,',
',,,767,991,,767,767,767,62,62,62,,62,,991,991,62,62,,,,62,,62,62,62',
'62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,991,,,62,,,62,62,62,62',
'62,62,62,62,62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62',
',,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,',
',,62,,62,62,62,62,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61',
',,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,,61',
'61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,914,61,914',
'914,914,914,914,61,,,,,,,,61,914,,,,61,61,61,61,61,61,,,,61,61,61,,',
',,,61,914,,61,61,61,502,502,502,,502,,914,914,502,502,,,,502,,502,502',
'502,502,502,502,502,,,,,,502,502,502,502,502,502,502,,,502,,,,914,,',
'502,,,502,502,502,502,502,502,502,502,,502,502,502,,502,502,,502,502',
'502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,912,502,912,912,912,912',
'912,502,,,,,,,,502,912,,,,502,502,502,502,502,502,,,,502,502,,,,,,,502',
'912,,502,502,502,648,648,648,,648,,912,912,648,648,,,,648,,648,648,648',
'648,648,648,648,,,,,,648,648,648,648,648,648,648,,,648,,,,912,,,648',
',,648,648,648,648,648,648,648,648,,648,648,648,,648,648,,648,648,648',
',,,,,,,,,,,,,,,,,,,648,,,648,,,648,648,,887,648,887,887,887,887,887',
'648,,,,,,,,648,887,,,,648,648,648,648,648,648,,,,648,648,,,,,,,648,887',
',648,648,648,1004,1004,1004,,1004,,887,887,1004,1004,,,,1004,,1004,1004',
'1004,1004,1004,1004,1004,,,,,,1004,1004,1004,1004,1004,1004,1004,,,1004',
',,,887,,,1004,,,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004',
'1004,,1004,1004,,1004,1004,1004,,,,,,,,,,,,,,,,,,,,1004,,,1004,,,1004',
'1004,,,1004,,1004,,1004,,1004,,,,,,,,1004,,,,,1004,1004,1004,1004,1004',
'1004,,,,1004,1004,,,,,,,1004,,1004,1004,1004,1004,647,647,647,,647,',
',,647,647,,,,647,,647,647,647,647,647,647,647,,,,,,647,647,647,647,647',
'647,647,,,647,,,,,,,647,,,647,647,647,647,647,647,647,647,,647,647,647',
',647,647,,647,647,647,,,,,,,,,,,,,,,,,,,,647,,,647,,,647,647,,1039,647',
'1039,1039,1039,1039,1039,647,,,,,,,,647,1039,,,,647,647,647,647,647',
'647,,,,647,647,,,,,,,647,1039,,647,647,647,672,672,672,,672,,1039,1039',
'672,672,,,,672,,672,672,672,672,672,672,672,,,,,,672,672,672,672,672',
'672,672,,,672,,,,1039,,,672,,,672,672,672,672,672,672,672,672,,672,672',
'672,,672,672,,672,672,672,,,,,,,,,,,,,,,,,,,,672,,,672,,,672,672,,1008',
'672,1008,1008,1008,1008,1008,672,,,,,,,,672,1008,,,,672,672,672,672',
'672,672,,,,672,672,,,,,,,672,1008,,672,672,672,47,47,47,,47,,1008,1008',
'47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,',
'1008,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,',
',,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47',
'47,47,,,,47,47,,,,,,,47,,,47,47,47,46,46,46,,46,,,,46,46,,,,46,,46,46',
'46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46',
'46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,',
'46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46',
',,46,46,46,111,111,111,111,111,,,,111,111,,,,111,,111,111,111,111,111',
'111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,,111,111,111,111',
'111,111,111,111,111,111,111,111,,111,111,111,,111,111,,111,111,111,',
',,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,111,,,,111,,,,,,,,111,',
',,,111,111,111,111,111,111,,,,111,111,,,,,,111,111,,,111,111,111,116',
'116,116,,116,,,,116,116,,,,116,,116,116,116,116,116,116,116,,,,,,116',
'116,116,116,116,116,116,,,116,,,,,,,116,,,116,116,116,116,116,116,116',
'116,,116,116,116,,116,116,,116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116',
',,116,116,,,116,,,,,,116,,,,,,,,116,,,,,116,116,116,116,116,116,,,,116',
'116,,,,,,,116,,,116,116,116,117,117,117,,117,,,,117,117,,,,117,,117',
'117,117,117,117,117,117,,,,,,117,117,117,117,117,117,117,,,117,,,,,',
',117,,,117,117,117,117,117,117,117,117,,117,117,117,,117,117,,117,117',
'117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117,117,,,117,,,,,,117,,,,,,,,117',
',,,,117,117,117,117,117,117,,,,117,117,,,,,,,117,,,117,117,117,118,118',
'118,,118,,,,118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118',
'118,118,118,118,118,,,118,,,,,,,118,,,118,118,118,118,118,118,118,118',
',118,118,118,,118,118,,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118',
'118,,,118,,,,,,118,,,,,,,,118,,,,,118,118,118,118,118,118,,,,118,118',
',,,,,,118,,,118,118,118,119,119,119,,119,,,,119,119,,,,119,,119,119',
'119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119',
',,119,119,119,119,119,119,119,119,,119,119,119,,119,119,,119,119,119',
',,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,119,,,',
',119,119,119,119,119,119,,,,119,119,,,,,,,119,,,119,119,119,120,120',
'120,120,120,,,,120,120,,,,120,,120,120,120,120,120,120,120,,,,,,120',
'120,120,120,120,120,120,,,120,,,,,,120,120,,120,120,120,120,120,120',
'120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120',
',,120,,,120,120,,,120,,120,,,,120,,,,,,,,120,,,,,120,120,120,120,120',
'120,,,,120,120,,,,,,,120,,,120,120,120,644,644,644,,644,,,,644,644,',
',,644,,644,644,644,644,644,644,644,,,,,,644,644,644,644,644,644,644',
',,644,,,,,,,644,,,644,644,644,644,644,644,644,644,,644,644,644,,644',
'644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,,,,,644',
',,,,,,,644,,,,,644,644,644,644,644,644,,,,644,644,,,,,,,644,,,644,644',
'644,643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643',
',,,,,643,643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643',
'643,643,643,,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643',
',,643,,,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643',
',,,643,643,,,,,,,643,,,643,643,643,769,769,769,,769,,,,769,769,,,,769',
',769,769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,,,769',
',,,,,,769,,,769,769,769,769,769,769,769,769,,769,769,769,,769,769,,769',
'769,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,,,,,769,,,,,,',
',769,,,,,769,769,769,769,769,769,,,,769,769,,,,,,,769,,,769,769,769',
'45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45',
'45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45',
'45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45',
'45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,208,208,208,,208,,,,208',
'208,,,,208,,208,208,208,208,208,208,208,,,,,,208,208,208,208,208,208',
'208,,,208,,,,,,,208,,,208,208,208,208,208,208,208,208,,208,208,208,',
'208,208,,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,208',
',,,208,,,,,,,,208,,,,,208,208,208,208,208,208,,,,208,208,,,,,,,208,',
',208,208,208,209,209,209,,209,,,,209,209,,,,209,,209,209,209,209,209',
'209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209',
'209,209,209,209,209,,209,209,209,,209,209,,209,209,209,,,,,,,,,,,,,',
',,,,,,209,,,209,,,209,209,,,209,,,,,,209,,,,,,,,209,,,,,209,209,209',
'209,209,209,,,,209,209,,,,,,,209,,,209,209,209,210,210,210,,210,,,,210',
'210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210',
'210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,210,210,210,210',
',210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,',
'210,,210,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,',
',,210,,210,210,210,210,638,638,638,,638,,,,638,638,,,,638,,638,638,638',
'638,638,638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638',
'638,638,638,638,638,638,638,,638,638,638,,638,638,,638,638,638,,,,,',
',,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,,,,,638,,,,,,,,638,,,,,638',
'638,638,638,638,638,,,,638,638,,,,,,,638,,,638,638,638,637,637,637,',
'637,,,,637,637,,,,637,,637,637,637,637,637,637,637,,,,,,637,637,637',
'637,637,637,637,,,637,,,,,,,637,,,637,637,637,637,637,637,637,637,,637',
'637,637,,637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637',
',,637,,,,,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,,,',
',,,637,,,637,637,637,213,213,213,,213,,,,213,213,,,,213,,213,213,213',
'213,213,213,213,,,,,,213,213,213,213,213,213,213,,,213,,,,,,,213,,,213',
'213,213,213,213,213,213,213,,213,213,213,,213,213,,213,213,213,,,,,',
',,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,,,,,213,,,,,,,,213,,,,,213',
'213,213,213,213,213,,,,213,213,,,,,,,213,,,213,213,213,214,214,214,',
'214,,,,214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214',
'214,214,214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214,,214',
'214,214,,214,214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214',
',,214,,214,,,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214,214',
',,,,,,214,,,214,214,214,215,215,215,,215,,,,215,215,,,,215,,215,215',
'215,215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215',
',,215,215,215,215,215,215,215,215,,215,215,215,,215,215,,215,215,215',
',,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,,,215,,,',
',215,215,215,215,215,215,,,,215,215,,,,,,,215,,,215,215,215,216,216',
'216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216',
'216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216',
',216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216',
'216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216',
',,,,,,216,,,216,216,216,217,217,217,,217,,,,217,217,,,,217,,217,217',
'217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217',
',,217,217,217,217,217,217,217,217,,217,217,217,,217,217,,217,217,217',
',,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,217,,,',
',217,217,217,217,217,217,,,,217,217,,,,,,,217,,,217,217,217,218,218',
'218,,218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218',
'218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218',
',218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218',
'218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218',
'218,,,,,,218,,,218,218,218,636,636,636,,636,,,,636,636,,,,636,,636,636',
'636,636,636,636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,,,636',
',,636,636,636,636,636,636,636,636,636,636,636,636,,636,636,,636,636',
'636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,,,,636,,636,,,,,,,',
'636,,,,,636,636,636,636,636,636,,,,636,636,,,,,,,636,,636,636,636,636',
'635,635,635,,635,,,,635,635,,,,635,,635,635,635,635,635,635,635,,,,',
',635,635,635,635,635,635,635,,,635,,,,,,,635,,,635,635,635,635,635,635',
'635,635,635,635,635,635,,635,635,,635,635,635,,,,,,,,,,,,,,,,,,,,635',
',,635,,,635,635,,,635,,635,,635,,635,,,,,,,,635,,,,,635,635,635,635',
'635,635,,,,635,635,,,,,,,635,,635,635,635,635,632,632,632,,632,,,,632',
'632,,,,632,,632,632,632,632,632,632,632,,,,,,632,632,632,632,632,632',
'632,,,632,,,,,,,632,,,632,632,632,632,632,632,632,632,,632,632,632,',
'632,632,,632,632,632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,,',
',,,632,,,,,,,,632,,,,,632,632,632,632,632,632,,,,632,632,,,,,,,632,',
',632,632,632,631,631,631,,631,,,,631,631,,,,631,,631,631,631,631,631',
'631,631,,,,,,631,631,631,631,631,631,631,,,631,,,,,,,631,,,631,631,631',
'631,631,631,631,631,,631,631,631,,631,631,,631,631,631,,,,,,,,,,,,,',
',,,,,,631,,,631,,,631,631,,,631,,631,,,,631,,,,,,,,631,,,,,631,631,631',
'631,631,631,,,,631,631,,,,,,,631,,,631,631,631,677,677,677,,677,,,,677',
'677,,,,677,,677,677,677,677,677,677,677,,,,,,677,677,677,677,677,677',
'677,,,677,,,,,,,677,,,677,677,677,677,677,677,677,677,,677,677,677,',
'677,677,,,,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,,,',
',,,,,,,,,,677,677,677,677,677,677,,,,677,677,,,,,,,677,,,677,677,677',
'602,602,602,,602,,,,602,602,,,,602,,602,602,602,602,602,602,602,,,,',
',602,602,602,602,602,602,602,,,602,,,,,,,602,,,602,602,602,602,602,602',
'602,602,,602,602,602,,602,602,,602,602,602,,,,,,,,,,,,,,,,,,,,602,,',
'602,,,602,602,,,602,,,,,,602,,,,,,,,602,,,,,602,602,602,602,602,602',
',,,602,602,,,,,,,602,,,602,602,602,892,892,892,,892,,,,892,892,,,,892',
',892,892,892,892,892,892,892,,,,,,892,892,892,892,892,892,892,,,892',
',,,,,,892,,,892,892,892,892,892,892,892,892,,892,892,892,,892,892,,',
',892,,,,,,,,,,,,,,,,,,,,892,,,892,,,892,892,,,892,,,,,,,,,,,,,,,,,,',
'892,892,892,892,892,892,,,,892,892,,,,,,,892,,,892,892,892,229,229,229',
',229,,,,229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229',
'229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229',
'229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229',
',,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,,,',
',,,229,,,229,229,229,415,415,415,,415,,,,415,415,,,,415,,415,415,415',
'415,415,415,415,,,,,,415,415,415,415,415,415,415,,,415,,,,,,,415,,,415',
'415,415,415,415,415,415,415,,415,415,415,,415,415,,415,415,415,,,,,',
',,,,,,,,,,,,,,415,,,415,,,415,415,,,415,,,,,,415,,,,,,,,415,,,,,415',
'415,415,415,415,415,,,,415,415,,,,,,,415,,,415,415,415,38,38,38,,38',
',,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38',
',,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,',
',,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,',
',38,38,,,,38,,,38,,,38,38,38,232,232,232,,232,,,,232,232,,,,232,,232',
'232,232,232,232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,',
',232,,,232,232,232,232,232,232,232,232,,232,232,232,,232,232,,232,232',
'232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232',
',,,,232,232,232,232,232,232,,,,232,232,,,,,,,232,,,232,232,232,233,233',
'233,,233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233',
'233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233',
',233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233',
'233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233',
',,,,,,233,,,233,233,233,234,234,234,,234,,,,234,234,,,,234,,234,234',
'234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234',
',,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,234',
',,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,',
',234,234,234,234,234,234,,,,234,234,,,,,,,234,,,234,234,234,235,235',
'235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235',
'235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235',
',235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235',
'235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235',
',,,,,,235,,,235,235,235,236,236,236,,236,,,,236,236,,,,236,,236,236',
'236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236',
',,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236',
',,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,',
',236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,237,237',
'237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237',
'237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237',
',237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237',
'237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237',
',,,,,,237,,,237,237,237,238,238,238,,238,,,,238,238,,,,238,,238,238',
'238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238',
',,238,238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238',
',,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,',
',238,238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238,238,239,239',
'239,,239,,,,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239',
'239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239',
',239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239',
'239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239,239',
',,,,,,239,,,239,239,239,240,240,240,,240,,,,240,240,,,,240,,240,240',
'240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240',
',,240,240,240,240,240,240,240,240,,240,240,240,,240,240,,240,240,240',
',,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,',
',240,240,240,240,240,240,,,,240,240,,,,,,,240,,,240,240,240,241,241',
'241,,241,,,,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241',
'241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241',
',241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241',
'241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241',
',,,,,,241,,,241,241,241,242,242,242,,242,,,,242,242,,,,242,,242,242',
'242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242',
',,242,242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242,242',
',,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,',
',242,242,242,242,242,242,,,,242,242,,,,,,,242,,,242,242,242,243,243',
'243,,243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243',
'243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243',
',243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243',
'243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243',
',,,,,,243,,,243,243,243,244,244,244,,244,,,,244,244,,,,244,,244,244',
'244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244',
',,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244,244,244',
',,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,',
',244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244,245,245',
'245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245',
'245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245',
',245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245',
'245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245',
',,,,,,245,,,245,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246',
'246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246',
',,246,246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246',
',,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,',
',246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,247,247',
'247,,247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247',
'247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247',
',247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247',
'247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247',
',,,,,,247,,,247,247,247,248,248,248,,248,,,,248,248,,,,248,,248,248',
'248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248',
',,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248,248',
',,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,',
',248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248,249,249',
'249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249',
'249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249',
',249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249',
'249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249',
',,,,,,249,,,249,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250',
'250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250',
',,250,250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250',
',,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,',
',250,250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,251,251',
'251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251',
'251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251',
',251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251',
'251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251',
',,,,,,251,,,251,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252',
'252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252',
',,252,252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252,252',
',,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,',
',252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,253,253',
'253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253',
'253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253',
',253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253',
'253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253',
',,,,,,253,,,253,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254',
'254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254',
',,254,254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254',
',,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,',
',254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,255,255',
'255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255',
'255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255',
',255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255',
'255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255',
',,,,,,255,,,255,255,255,256,256,256,,256,,,,256,256,,,,256,,256,256',
'256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256',
',,256,256,256,256,256,256,256,256,,256,256,256,,256,256,,256,256,256',
',,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,',
',256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256,256,257,257',
'257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257',
'257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257',
',257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257',
'257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257',
',,,,,,257,,,257,257,257,598,598,598,,598,,,,598,598,,,,598,,598,598',
'598,598,598,598,598,,,,,,598,598,598,598,598,598,598,,,598,,,,,,,598',
',,598,598,598,598,598,598,598,598,,598,598,598,,598,598,,598,598,598',
',,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,,598,,,,,,598,,,,,,,,598,,,',
',598,598,598,598,598,598,,,,598,598,,,,,,,598,,,598,598,598,37,37,37',
',37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,',
',37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,',
',,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37',
'37,,,,37,37,,,,,,,37,,,37,37,37,264,264,264,,264,,,,264,264,,,,264,',
'264,264,264,264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,',
',,,,,264,,,264,264,264,264,264,264,264,264,264,264,264,264,,264,264',
',264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,,264,,264,,264',
',264,,,,,,,,264,,,,,264,264,264,264,264,264,,,,264,264,,,,,,,264,,264',
'264,264,264,733,733,733,,733,,,,733,733,,,,733,,733,733,733,733,733',
'733,733,,,,,,733,733,733,733,733,733,733,,,733,,,,,,,733,,,733,733,733',
'733,733,733,733,733,,733,733,733,,733,733,,733,733,733,,,,,,,,,,,,,',
',,,,,,733,,,733,,,733,733,,,733,,733,,,,733,,,,,,,,733,,,,,733,733,733',
'733,733,733,,,,733,733,,,,,,,733,,,733,733,733,270,270,270,,270,,,,270',
'270,,,,270,,270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270',
'270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270,270,270,270,270',
',270,270,,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,',
'270,,270,,270,,,,,,,,270,,,,,270,270,270,270,270,270,,,,270,270,,,,',
',,270,,270,270,270,270,273,273,273,,273,,,,273,273,,,,273,,273,273,273',
'273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273',
'273,273,273,273,273,273,273,273,273,273,273,,273,273,,273,273,273,,',
',,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,,273,,273,,,,,,,,273',
',,,,273,273,273,273,273,273,,,,273,273,273,,,,,,273,,273,273,273,273',
'8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8',
'8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8',
'8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,34,34',
'34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34',
',,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34',
',,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34',
'34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,586,586,586,,586,,,,586',
'586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586,586,586,586',
'586,,,586,,,,,,,586,,,586,586,586,586,586,586,586,586,586,586,586,586',
',586,586,,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,',
'586,,586,,586,,,,,,,,586,,,,,586,586,586,586,586,586,,,,586,586,,,,',
',,586,,586,586,586,586,280,280,280,,280,,,,280,280,,,,280,,280,280,280',
'280,280,280,280,,,,,,280,280,280,280,280,280,280,,,280,,,,,,,280,,,280',
'280,280,280,280,280,280,280,,280,280,280,,280,280,,280,280,280,,,,,',
',,,,,,,,,,,,,,280,,,280,,,280,280,,,280,,,,,,280,,,,,,,,280,,,,,280',
'280,280,280,280,280,,,,280,280,,,,,,,280,,,280,280,280,783,783,783,',
'783,,,,783,783,,,,783,,783,783,783,783,783,783,783,,,,,,783,783,783',
'783,783,783,783,,,783,,,,,,,783,,,783,783,783,783,783,783,783,783,,783',
'783,783,,783,783,,783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783',
',,783,,,,,,783,,,,,,,,783,,,,,783,783,783,783,783,783,,,,783,783,,,',
',,,783,,,783,783,783,282,282,282,,282,,,,282,282,,,,282,,282,282,282',
'282,282,282,282,,,,,,282,282,282,282,282,282,282,,,282,,,,,,,282,,,282',
'282,282,282,282,282,282,282,,282,282,282,,282,282,,282,282,282,,,,,',
',,,,,,,,,,,,,,282,,,282,,,282,282,,,282,,,,,,282,,,,,,,,282,,,,,282',
'282,282,282,282,282,,,,282,282,,,,,,,282,,,282,282,282,284,284,284,',
'284,,,,284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284,284,284',
'284,284,284,284,,,284,,,,,,,284,,,284,284,284,284,284,284,284,284,,284',
'284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284,,,284,284',
',,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284,,,,284,284,,,',
',,,284,,,284,284,284,285,285,285,,285,,,,285,285,,,,285,,285,285,285',
'285,285,285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285',
'285,285,285,285,285,285,285,,285,285,285,,285,285,,285,285,285,,,,,',
',,,,,,,,,,,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,,,285,,,,,285',
'285,285,285,285,285,,,,285,285,,,,,,,285,,,285,285,285,784,784,784,',
'784,,,,784,784,,,,784,,784,784,784,784,784,784,784,,,,,,784,784,784',
'784,784,784,784,,,784,,,,,,,784,,,784,784,784,784,784,784,784,784,,784',
'784,784,,784,784,,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784',
',,784,,,,,,784,,,,,,,,784,,,,,784,784,784,784,784,784,,,,784,784,,,',
',,,784,,,784,784,784,877,877,877,,877,,,,877,877,,,,877,,877,877,877',
'877,877,877,877,,,,,,877,877,877,877,877,877,877,,,877,,,,,,,877,,,877',
'877,877,877,877,877,877,877,,877,877,877,,877,877,,877,877,877,,,,,',
',,,,,,,,,,,,,,877,,,877,,,877,877,,,877,,,,,,877,,,,,,,,877,,,,,877',
'877,877,877,877,877,,,,877,877,,,,,,,877,,,877,877,877,291,291,291,291',
'291,,,,291,291,,,,291,,291,291,291,291,291,291,291,,,,,,291,291,291',
'291,291,291,291,,,291,,,,,,291,291,,291,291,291,291,291,291,291,291',
'291,,291,291,291,,291,291,,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291',
',,291,291,,,291,,291,,,,291,,,,,,,,291,,,,,291,291,291,291,291,291,',
',,291,291,,,,,,,291,,,291,291,291,452,452,452,,452,,,,452,452,,,,452',
',452,452,452,452,452,452,452,,,,,,452,452,452,452,452,452,452,,,452',
',,,,,,452,,,452,452,452,452,452,452,452,452,452,452,452,452,,452,452',
',452,452,452,,,,,,,,,,,,,,,,,,,,452,,,452,,,452,452,,,452,,452,,452',
',452,,,,,,,,452,,,,,452,452,452,452,452,452,,,,452,452,,,,,,,452,,452',
'452,452,452,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33',
'33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33',
',33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33',
',,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,32,32',
'32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32',
',,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32',
',,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32',
'32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,785,785,785,,785,,,,785',
'785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785,785,785,785,785',
'785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785,785,785,',
'785,785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,',
',,,785,,,,,,,,785,,,,,785,785,785,785,785,785,,,,785,785,,,,,,,785,',
',785,785,785,454,454,454,,454,,,,454,454,,,,454,,454,454,454,454,454',
'454,454,,,,,,454,454,454,454,454,454,454,,,454,,,,,,,454,,,454,454,454',
'454,454,454,454,454,,454,454,454,,454,454,,454,454,454,,,,,,,,,,,,,',
',,,,,,454,,,454,,,454,454,,,454,,,,,,454,,,,,,,,454,,,,,454,454,454',
'454,454,454,,,,454,454,,,,,,,454,,,454,454,454,297,297,297,,297,,,,297',
'297,,,,297,,297,297,297,297,297,297,297,,,,,,297,297,297,297,297,297',
'297,,,297,,,,,,,297,,,297,297,297,297,297,297,297,297,,297,297,297,',
'297,297,,,,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,,297,,,,,,,,',
',,,,,,,,,,297,297,297,297,297,297,,,,297,297,,,,297,,,297,,,297,297',
'297,455,455,455,,455,,,,455,455,,,,455,,455,455,455,455,455,455,455',
',,,,,455,455,455,455,455,455,455,,,455,,,,,,,455,,,455,455,455,455,455',
'455,455,455,,455,455,455,,455,455,,455,455,455,,,,,,,,,,,,,,,,,,,,455',
',,455,,,455,455,,,455,,,,,,455,,,,,,,,455,,,,,455,455,455,455,455,455',
',,,455,455,,,,,,,455,,,455,455,455,786,786,786,,786,,,,786,786,,,,786',
',786,786,786,786,786,786,786,,,,,,786,786,786,786,786,786,786,,,786',
',,,,,,786,,,786,786,786,786,786,786,786,786,,786,786,786,,786,786,,786',
'786,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,,786,,,,,,786,,,,,,',
',786,,,,,786,786,786,786,786,786,,,,786,786,,,,,,,786,,,786,786,786',
'788,788,788,,788,,,,788,788,,,,788,,788,788,788,788,788,788,788,,,,',
',788,788,788,788,788,788,788,,,788,,,,,,,788,,,788,788,788,788,788,788',
'788,788,,788,788,788,,788,788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,',
'788,,,788,788,,,788,,,,,,788,,,,,,,,788,,,,,788,788,788,788,788,788',
',,,788,788,,,,,,,788,,,788,788,788,565,565,565,,565,,,,565,565,,,,565',
',565,565,565,565,565,565,565,,,,,,565,565,565,565,565,565,565,,,565',
',,,,,,565,,,565,565,565,565,565,565,565,565,,565,565,565,,565,565,,565',
'565,565,,,,,,,,,,,,,,,,,,,,565,,,565,,,565,565,,,565,,,,,,565,,,,,,',
',565,,,,,565,565,565,565,565,565,,,,565,565,,,,,,,565,,,565,565,565',
'688,688,688,,688,,,,688,688,,,,688,,688,688,688,688,688,688,688,,,,',
',688,688,688,688,688,688,688,,,688,,,,,,,688,,,688,688,688,688,688,688',
'688,688,,688,688,688,,688,688,,,,688,,,,,,,,,,,,,,,,,,,,688,,,688,,',
'688,688,,,688,,,,,,,,,,,,,,,,,,,688,688,688,688,688,688,,,,688,688,',
',,,,,688,,,688,688,688,800,800,800,,800,,,,800,800,,,,800,,800,800,800',
'800,800,800,800,,,,,,800,800,800,800,800,800,800,,,800,,,,,,,800,,,800',
'800,800,800,800,800,800,800,,800,800,800,,800,800,,,,800,,,,,,,,,,,',
',,,,,,,,800,,,800,,,800,800,,,800,,,,,,,,,,,,,,,,,,,800,800,800,800',
'800,800,,,,800,800,,,,,,,800,,,800,800,800,745,745,745,,745,,,,745,745',
',,,745,,745,745,745,745,745,745,745,,,,,,745,745,745,745,745,745,745',
',,745,,,,,,,745,,,745,745,745,745,745,745,745,745,745,745,745,745,,745',
'745,,745,745,745,,,,,,,,,,,,,,,,,,,,745,,,745,,,745,745,,,745,,745,',
'745,,745,,,,,,,,745,,,,,745,745,745,745,745,745,,,,745,745,,,,,,,745',
',745,745,745,745,456,456,456,,456,,,,456,456,,,,456,,456,456,456,456',
'456,456,456,,,,,,456,456,456,456,456,456,456,,,456,,,,,,,456,,,456,456',
'456,456,456,456,456,456,,456,456,456,,456,456,,456,456,456,,,,,,,,,',
',,,,,,,,,,456,,,456,,,456,456,,,456,,,,,,456,,,,,,,,456,,,,,456,456',
'456,456,456,456,,,,456,456,,,,,,,456,,,456,456,456,694,694,694,,694',
',,,694,694,,,,694,,694,694,694,694,694,694,694,,,,,,694,694,694,694',
'694,694,694,,,694,,,,,,,694,,,694,694,694,694,694,694,694,694,,694,694',
'694,,694,694,,694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694',
',694,,,,694,,,,,,,,694,,,,,694,694,694,694,694,694,,,,694,694,,,,,,',
'694,,,694,694,694,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23',
',,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23',
'23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,',
'23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,876',
'876,876,,876,,,,876,876,,,,876,,876,876,876,876,876,876,876,,,,,,876',
'876,876,876,876,876,876,,,876,,,,,,,876,,,876,876,876,876,876,876,876',
'876,876,876,876,876,,876,876,,876,876,876,,,,,,,,,,,,,,,,,,,,876,,,876',
',,876,876,,,876,,,,876,,876,,,,,,,,876,,,,,876,876,876,876,876,876,',
',,876,876,,,,,,,876,,876,876,876,876,541,541,541,,541,,,,541,541,,,',
'541,,541,541,541,541,541,541,541,,,,,,541,541,541,541,541,541,541,,',
'541,,,,,,,541,,,541,541,541,541,541,541,541,541,541,541,541,541,,541',
'541,,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,,,,,,541',
',,,,,,,541,,,,,541,541,541,541,541,541,,,,541,541,,,,,,,541,,541,541',
'541,541,314,314,314,,314,,,,314,314,,,,314,,314,314,314,314,314,314',
'314,,,,,,314,314,314,314,314,314,314,,,314,,,,,,,314,,,314,314,314,314',
'314,314,314,314,,314,314,314,,314,314,,,,314,,,,,,,,,,,,,,,,,,,,314',
',,314,,,314,314,,,314,,,,,,,,,,,,,,,,,,,314,314,314,314,314,314,,,,314',
'314,,,,,,,314,,,314,314,314,538,538,538,,538,,,,538,538,,,,538,,538',
'538,538,538,538,538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,',
',538,,,538,538,538,538,538,538,538,538,538,538,538,538,,538,538,,538',
'538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538,,,538,,538,,,,538,,,',
',,,,538,,,,,538,538,538,538,538,538,,,,538,538,,,,,,,538,,538,538,538',
'538,845,845,845,,845,,,,845,845,,,,845,,845,845,845,845,845,845,845',
',,,,,845,845,845,845,845,845,845,,,845,,,,,,,845,,,845,845,845,845,845',
'845,845,845,,845,845,845,,845,845,,845,845,845,,,,,,,,,,,,,,,,,,,,845',
',,845,,,845,845,,,845,,,,,,845,,,,,,,,845,,,,,845,845,845,845,845,845',
',,,845,845,,,,,,,845,,,845,845,845,858,858,858,,858,,,,858,858,,,,858',
',858,858,858,858,858,858,858,,,,,,858,858,858,858,858,858,858,,,858',
',,,,,,858,,,858,858,858,858,858,858,858,858,,858,858,858,,858,858,,858',
'858,858,,,,,,,,,,,,,,,,,,,,858,,,858,,,858,858,,,858,,,,,,858,,,,,,',
',858,,,,,858,858,858,858,858,858,,,,858,858,,,,,,,858,,,858,858,858',
'532,532,532,,532,,,,532,532,,,,532,,532,532,532,532,532,532,532,,,,',
',532,532,532,532,532,532,532,,,532,,,,,,,532,,,532,532,532,532,532,532',
'532,532,,532,532,532,,532,532,,532,532,532,,,,,,,,,,,,,,,,,,,,532,,',
'532,,,532,532,,,532,,,,,,532,,,,,,,,532,,,,,532,532,532,532,532,532',
',,,532,532,,,,,,,532,,,532,532,532,929,929,929,,929,,,,929,929,,,,929',
',929,929,929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929',
',,,,,,929,,,929,929,929,929,929,929,929,929,,929,929,929,,929,929,,929',
'929,929,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,929,,,,929,,,',
',,,,929,,,,,929,929,929,929,929,929,,,,929,929,,,,,,,929,,,929,929,929',
'323,323,323,,323,,,,323,323,,,,323,,323,323,323,323,323,323,323,,,,',
',323,323,323,323,323,323,323,,,323,,,,,,,323,,,323,323,323,323,323,323',
'323,323,,323,323,323,,323,323,,323,323,323,,,,,,,,,,,,,,,,,,,,323,,',
'323,323,,323,323,,,323,,,,,,323,,,,,,,,323,,,,,323,323,323,323,323,323',
',,,323,323,,,,,,,323,,,323,323,323,712,712,712,,712,,,,712,712,,,,712',
',712,712,712,712,712,712,712,,,,,,712,712,712,712,712,712,712,,,712',
',,,,,,712,,,712,712,712,712,712,712,712,712,,712,712,712,,712,712,,712',
'712,712,,,,,,,,,,,,,,,,,,,,712,,,712,,,712,712,,,712,,,,,,712,,,,,,',
',712,,,,,712,712,712,712,712,712,,,,712,712,,,,,,,712,,,712,712,712',
'528,528,528,,528,,,,528,528,,,,528,,528,528,528,528,528,528,528,,,,',
',528,528,528,528,528,528,528,,,528,,,,,,,528,,,528,528,528,528,528,528',
'528,528,,528,528,528,,528,528,,528,528,528,,,,,,,,,,,,,,,,,,,,528,,',
'528,,,528,528,,,528,,,,,,528,,,,,,,,528,,,,,528,528,528,528,528,528',
',,,528,528,,,,,,,528,,,528,528,528,497,497,497,,497,,,,497,497,,,,497',
',497,497,497,497,497,497,497,,,,,,497,497,497,497,497,497,497,,,497',
',,,,,,497,,,497,497,497,497,497,497,497,497,497,497,497,497,,497,497',
',497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,497,,497',
',497,,,,,,,,497,,,,,497,497,497,497,497,497,,,,497,497,,,,,,,497,,497',
'497,497,497,527,527,527,,527,,,,527,527,,,,527,,527,527,527,527,527',
'527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527',
'527,527,527,527,527,,527,527,527,,527,527,,527,527,527,,,,,,,,,,,,,',
',,,,,,527,,,527,,,527,527,,,527,,,,,,527,,,,,,,,527,,,,,527,527,527',
'527,527,527,,,,527,527,,,,,,,527,,,527,527,527,526,526,526,,526,,,,526',
'526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526,526,526,526,526',
'526,,,526,,,,,,,526,,,526,526,526,526,526,526,526,526,,526,526,526,',
'526,526,,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,',
',,,526,,,,,,,,526,,,,,526,526,526,526,526,526,,,,526,526,,,,,,,526,',
',526,526,526,739,739,739,,739,,,,739,739,,,,739,,739,739,739,739,739',
'739,739,,,,,,739,739,739,739,739,739,739,,,739,,,,,,,739,,,739,739,739',
'739,739,739,739,739,,739,739,739,,739,739,,739,739,739,,,,,,,,,,,,,',
',,,,,,739,,,739,,,739,739,,,739,,,,,,739,,,,,,,,739,,,,,739,739,739',
'739,739,739,,,,739,739,,,,,,,739,,,739,739,739,507,507,507,507,507,',
',,507,507,,,,507,,507,507,507,507,507,507,507,,,,,,507,507,507,507,507',
'507,507,,,507,,,,,,507,507,,507,507,507,507,507,507,507,507,507,,507',
'507,507,,507,507,,507,507,507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507,507',
',,507,,507,,,,507,,,,,,,,507,,,,,507,507,507,507,507,507,,,,507,507',
',,,,,507,507,,,507,507,507,357,357,357,,357,,,,357,357,,,,357,,357,357',
'357,357,357,357,357,,,,,,357,357,357,357,357,357,357,,,357,,,,,,,357',
',,357,357,357,357,357,357,357,357,,357,357,357,,357,357,,,,357,,,,,',
',,,,,,,,,,,,,,357,,,357,,,357,357,,,357,,,,,,,,,,,,,,,,,,,357,357,357',
'357,357,357,,,,357,357,,,,,,,357,,,357,357,357,516,516,516,,516,,,,516',
'516,,,,516,,516,516,516,516,516,516,516,,,,,,516,516,516,516,516,516',
'516,,,516,,,,,,,516,,,516,516,516,516,516,516,516,516,516,516,516,516',
',516,516,,516,516,516,,,,,,,,,,,,,,,,,,,,516,,,516,,,516,516,,,516,',
'516,,516,,516,,,,,,,,516,,,,,516,516,516,516,516,516,,,,516,516,,,,',
',,516,,516,516,516,516,355,355,355,,355,,,,355,355,,,,355,,355,355,355',
'355,355,355,355,,,,,,355,355,355,355,355,355,355,,,355,,,,,,,355,,,355',
'355,355,355,355,355,355,355,,355,355,355,,355,355,,,,355,,,,,,,,,,,',
',,,,,,,,355,,,355,,,355,355,,,355,,,,,,,,,,,,,,,,,,,355,355,355,355',
'355,355,,,,355,355,,,,,,,355,,,355,355,355,514,514,514,,514,,,,514,514',
',,,514,,514,514,514,514,514,514,514,,,,,,514,514,514,514,514,514,514',
',,514,,,,,,,514,,,514,514,514,514,514,514,514,514,,514,514,514,,514',
'514,,,,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,,,,,,,,,,,,',
',,,,,,514,514,514,514,514,514,,,,514,514,,,,,,,514,,,514,514,514,904',
'904,904,,904,,,,904,904,,,,904,,904,904,904,904,904,904,904,,,,,,904',
'904,904,904,904,904,904,,,904,,,,,,,904,,,904,904,904,904,904,904,904',
'904,,904,904,904,,904,904,,,,904,,,,,,,,,,,,,,,,,,,,904,,,904,,,904',
'904,,,904,,,,,,,,,,,,,,,,,,,904,904,904,904,904,904,,,,904,904,,,,,',
',904,,,904,904,904,500,500,500,,500,,,,500,500,,,,500,,500,500,500,500',
'500,500,500,,,,,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500',
'500,500,500,500,500,500,500,500,500,500,,500,500,,500,500,500,,,,,,',
',,,,,,,,,,,,,500,,,500,,,500,500,,,500,,,,500,,500,,,,,,,,500,,,,,500',
'500,500,500,500,500,,,,500,500,,,,,,,500,,500,500,500,500,342,342,342',
',342,,,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342',
'342,342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342,342,,342',
'342,342,,342,342,,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342',
',,342,,,,,,342,,,,,,,,342,,,,,342,342,342,342,342,342,,,,342,342,,,',
',,,342,,,342,342,342,343,343,343,,343,,,,343,343,,,,343,,343,343,343',
'343,343,343,343,,,,,,343,343,343,343,343,343,343,,,343,,,,,,,343,,,343',
'343,343,343,343,343,343,343,,343,343,343,,343,343,,343,343,343,,,,,',
',,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,343,,,,,,,,343,,,,,343',
'343,343,343,343,343,,,,343,343,,,,,,,343,,,343,343,343,523,523,523,',
'523,,,,523,523,,,,523,,523,523,523,523,523,523,523,,,,,,523,523,523',
'523,523,523,523,,,523,,,,,,,523,,,523,523,523,523,523,523,523,523,,523',
'523,523,,523,523,,,,523,,,,,59,,,,,,,59,59,59,,,59,59,59,523,59,,523',
',,523,523,,,523,59,59,59,,,,,,,,59,59,,59,59,59,59,59,523,523,523,523',
'523,523,,,,523,523,,,,,,,523,,,523,523,523,59,59,59,59,59,59,59,59,59',
'59,59,59,59,59,,,59,59,59,,,59,,,59,,,59,59,,59,,59,,59,,59,59,59,59',
'59,59,59,,59,,59,,,,,,,,,,,,,59,59,59,59,436,59,,59,,,,436,436,436,',
',436,436,436,706,436,706,706,706,706,706,,,,436,436,436,436,,,706,,',
',,436,436,,436,436,436,436,436,,,,,,,,,,706,,,,,,,,,706,706,706,706',
',436,436,436,436,436,436,436,436,436,436,436,436,436,436,,,436,436,436',
',,436,,,436,,,436,436,,436,706,436,,436,,436,436,436,436,436,436,436',
',436,436,436,,,,,,,,,,,,,436,436,436,436,435,436,,436,,,,435,435,435',
',,435,435,435,338,435,338,338,338,338,338,,,,435,435,435,435,,,338,',
',,,435,435,,435,435,435,435,435,,,,,,,,,,338,338,,,,,,,,338,338,338',
'338,,435,435,435,435,435,435,435,435,435,435,435,435,435,435,,,435,435',
'435,,,435,,,435,,,435,435,,435,338,435,,435,,435,435,435,435,435,435',
'435,,435,435,435,,,,,,,,,,,,,435,435,435,435,30,435,,435,,,,30,30,30',
',,30,30,30,708,30,708,708,708,708,708,,,,30,30,30,,,,708,,,,,30,30,',
'30,30,30,30,30,,,,,,,,,,708,,,,,,,,,708,708,708,708,,30,30,30,30,30',
'30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,708,30',
',30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,426,30,30,,30,,30,426',
'426,426,,,426,426,426,939,426,939,939,939,939,939,,,,426,426,426,,,',
'939,,,,,426,426,,426,426,426,426,426,,,,,,,,,,939,939,,,,,,,,939,939',
'939,939,,426,426,426,426,426,426,426,426,426,426,426,426,426,426,,,426',
'426,426,,,426,,426,426,,,426,426,,426,939,426,,426,,426,426,426,426',
'426,426,426,,426,426,426,,,,,,,,,,,,484,426,426,,426,,426,484,484,484',
',,484,484,484,546,484,546,546,546,546,546,,,,484,484,,,,,546,,,,,484',
'484,,484,484,484,484,484,,,,,,,,,,546,,,,,,,,,546,546,546,546,,31,,',
',,,,31,31,31,,484,31,31,31,,31,,484,,,,,484,484,,31,31,,,,546,,,,,31',
'31,,31,31,31,31,31,,484,484,,,,,,,,,,,,,484,,,,,484,,,31,31,31,31,31',
'31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,,31,,31',
',31,31,31,31,31,31,31,,31,,31,,,,,,211,211,,,211,,,31,31,,31,,31,211',
'211,,211,211,211,211,211,211,211,,,211,211,,,,211,211,211,211,,,,,,211',
',,,,,,,211,211,,211,211,211,211,211,211,211,211,211,211,211,,989,211',
'989,989,989,989,989,,,,,260,260,,,260,989,,,,,211,,,260,260,211,260',
'260,260,260,260,260,260,,,260,260,989,,,260,260,260,260,,,989,989,989',
'989,,,,,,,,260,260,,260,260,260,260,260,260,260,260,260,260,260,,,260',
',,,,,,,,989,588,588,,,588,,,,,,260,,,588,588,260,588,588,588,588,588',
'588,588,,,588,588,,,,588,588,588,588,,,,,,588,,,,,,,,588,588,,588,588',
'588,588,588,588,588,588,588,588,588,,,588,,,,,,,,,,744,744,,,744,,,',
',,588,,,744,744,588,744,744,744,744,744,744,744,,,744,744,,,,744,744',
'744,744,,,,,,744,,,,,,,,744,744,,744,744,744,744,744,744,744,744,744',
'744,744,,,744,,,,,,,,,,587,587,,,587,,,,,,744,,,587,587,744,587,587',
'587,587,587,587,587,,,587,587,,,,587,587,587,587,,,,,,587,,,,,,,,587',
'587,,587,587,587,587,587,587,587,587,587,587,587,,,587,,,,,,,,,,1005',
'1005,,,1005,,,,,,587,,,1005,1005,587,1005,1005,1005,1005,1005,1005,1005',
',,1005,1005,,,,1005,1005,1005,1005,,,,,,1005,,,,,,,,1005,1005,,1005',
'1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,,,1005,,,,,,,,,,743',
'743,,,743,,,,,,1005,,,743,743,1005,743,743,743,743,743,743,743,,,743',
'743,,,,743,743,743,743,,,,,,743,,,,,,,,743,743,,743,743,743,743,743',
'743,743,743,743,743,743,,,743,,,,,,,,,,1006,1006,,,1006,,,,,,743,,,1006',
'1006,743,1006,1006,1006,1006,1006,1006,1006,,,1006,1006,,,,1006,1006',
'1006,1006,,,,,,1006,,,,,,,,1006,1006,,1006,1006,1006,1006,1006,1006',
'1006,1006,1006,1006,1006,,,1006,,,,,,,,,,956,956,,,956,,,,,,1006,,,956',
'956,1006,956,956,956,956,956,956,956,,,956,956,,,,956,956,956,956,,',
',,,956,,,,,,,,956,956,,956,956,956,956,956,956,956,956,956,956,956,',
',956,,,,,,,,,,451,451,,,451,,,,,,956,,,451,451,956,451,451,451,451,451',
'451,451,,,451,451,,,,451,451,451,451,,,,,,451,,,,,,,,451,451,,451,451',
'451,451,451,451,451,451,451,451,451,,,451,,,,,,,,,,450,450,,,450,,,',
',,451,,,450,450,451,450,450,450,450,450,450,450,,,450,450,,,,450,450',
'450,450,,,,,,450,,,,,,,,450,450,,450,450,450,450,450,450,450,450,450',
'450,450,,,450,,,,,,,,,,517,517,,,517,,,,,,450,,,517,517,450,517,517',
'517,517,517,517,517,,,517,517,,,,517,517,517,517,,,,,,517,,,,,,,,517',
'517,,517,517,517,517,517,517,517,517,517,517,517,,,517,,,,,,,,,,529',
'529,,,529,,,,,,517,,,529,529,517,529,529,529,529,529,529,529,,,529,529',
',,,529,529,529,529,,,,,,529,,,,,,,,529,529,,529,529,529,529,529,529',
'529,529,529,529,529,,,529,,,,,,,,,,212,212,,,212,,,,,,529,,,212,212',
'529,212,212,212,212,212,212,212,,,212,212,,,,212,212,212,212,,,,,,212',
',,,,,,,212,212,,212,212,212,212,212,212,212,212,212,212,212,,,212,,',
',,,,,,,530,530,,,530,,,,,,212,,,530,530,212,530,530,530,530,530,530',
'530,,,530,530,,,,530,530,530,530,,,,,,530,,,,,,,,530,530,,530,530,530',
'530,530,530,530,530,530,530,530,,,530,,,,,,,,,,518,518,,,518,,,,,,530',
',,518,518,530,518,518,518,518,518,518,518,,,518,518,,,,518,518,518,518',
',,,,,518,,,,,,,,518,518,,518,518,518,518,518,518,518,518,518,518,518',
',910,518,910,910,910,910,910,600,,600,600,600,600,600,,,910,,,,,518',
',600,,882,518,882,882,882,882,882,,,,,,,910,,,882,,,,600,600,910,910',
'910,910,,,,600,600,600,600,,,,,659,882,659,659,659,659,659,,,,882,882',
'882,882,,,659,,,,885,910,885,885,885,885,885,,600,,,,,,,,885,,659,753',
',753,753,753,753,753,882,659,659,659,659,,,,,753,,,885,,,,,,,,,885,885',
'885,885,,,,,659,,753,,,,,,659,,,753,753,753,753,,,,,,,,,,,,,,885,,,',
',,,,,,,,,,,,,,,753' ]
        racc_action_check = arr = ::Array.new(25640, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    10,  5447,  1387,   nil,   622,   nil,   nil, 16465,   979,
   nil,   795,   933,  1274,   nil,  1230,  1260,  1052,   311,  1203,
   536,   nil,   -72, 20001,  2707,  1318,   nil,   565,   nil,   156,
 23862, 24179, 18233, 18097, 16601,   nil,  3529, 15785, 11977,   nil,
  1206,   391,   390,  1278,   237,  9121,  7761,  7625,  1206,  1106,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23472,
   nil,  6809,  6673,  5857,    41,   nil,  5993,  6129,   nil,   nil,
  6265,  6401,  1248,   nil,  1623,   nil,   nil,   nil,   nil,   nil,
   -67,   nil,   nil,   nil,   nil,   nil,   nil,  1200,  1199,  1198,
  1194,  1071,   nil,   nil,   nil,   396,   nil,   nil,   132,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  7897,   nil,   nil,   nil,   nil,  8033,  8169,  8305,  8441,
  8577,  1210,   nil,   647,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1192,   nil,  4625,  9257,  9393,
  9529, 24247, 25196,  9937, 10073, 10209, 10345, 10481, 10617,   nil,
   nil,   830,   -53,   -43,  1254,   187,  1163,  1218,   nil, 11705,
  4077,  1212, 12113, 12249, 12385, 12521, 12657, 12793, 12929, 13065,
 13201, 13337, 13473, 13609, 13745, 13881, 14017, 14153, 14289, 14425,
 14561, 14697, 14833, 14969, 15105, 15241, 15377, 15513,   nil,   nil,
 24320,   nil,   nil,  1204, 15921,   nil,  1210,   nil,   nil,   nil,
 16193,   nil,   nil, 16329,   nil,  2981,   nil,  1169,  1168,   nil,
 16873,  1201, 17145,   nil, 17281, 17417,   nil,   nil,   624,   nil,
   953, 17825,  1124,  3255,  1139,  1172,  1133, 18641,  5584,   481,
   968,  1190,  1197,  1109,   nil,  1160,  1123,   -19,   nil,   nil,
   nil,  1158,   590,  1077, 20409,   nil,   273,  1134,  1130,  1210,
   nil,  1129,   nil, 21225,  2844,   525,   nil,  1080,   nil,    96,
   359,  1069,  1050,   nil,   465,  1073,   nil,   nil, 23696,   282,
   -10,   -11, 23129, 23265,   660,  1144,  1028,    57,    34,  1108,
  1090,    28,  1110,   nil,   nil, 22585,   nil, 22313,   473,   356,
   430,   375,   475,   531,   571,   343,   453,   nil,   432,   nil,
   nil,   nil,   nil,   nil,   334,   nil,   321,   nil,   130,   nil,
  1010,   304,   nil,  1009,   257,   nil,  1004,   124,   nil,   989,
   125,   nil,   324,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  2433,  1347,   nil,   nil,   nil,
   nil,   998,   nil,   981,   nil, 11841,   969,   nil,  2022,   971,
   nil,   nil,   942,   941,   -83,   363, 23987,   nil,   nil,   nil,
   528,   653,   979,   nil,   nil, 23732, 23602,   nil,  3940,   nil,
   925,   nil,   nil,  1748,   nil,   nil,   nil,   nil,   -14,   nil,
 24977, 24904, 17961,    91, 18505, 18777, 19729,  4899,  5173,   -48,
   521,   999,   997,   984,   983,   786,   924,   580,  5310,   598,
  4762,  4625,   684,  4077,  4214,  4351,  5584,  4488,   571,   451,
  5036,  5447,  2159,   146, 24112,   nil,   nil,   nil,   nil,   nil,
   nil,   -45,   247,   907,   898,   nil,   nil, 21633,   nil,   nil,
 22993,   nil,  6945,   nil,   nil,   nil,   nil, 22177,   933,   887,
   883,   nil,   nil,   882, 22721,   873, 22449, 25050, 25342,  1071,
   900,   nil,   nil, 23401,   860,   nil, 21905, 21769, 21497, 25123,
 25269,  3803, 20953,   979,   951,   807,   nil,   nil, 20545,   nil,
   nil, 20273,   nil,   nil,   nil,     1, 24076,   nil,   752,   745,
   nil,   732,   729,   694,   nil,   nil,   nil,   nil,   nil,   nil,
   679,   nil,   nil,   360,   nil, 19185,   nil,   nil,   nil,   683,
   nil,   nil,   nil,   667,   nil,   nil,   647,  2981,   679,   nil,
  3118,    39,    24,   656,   649,   nil, 16737, 24539, 24393,     9,
   nil,   404,   436,   141,   nil,   971,   nil,    16, 15649,   nil,
 25411,   nil, 11433,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    58,   nil,   nil,   164,   nil,   nil,
   nil,   510,   nil,   nil,   500,   nil,   515,   nil,  1485,   nil,
   489, 11161, 11025,   319,   497, 10889, 10753,  9801,  9665,   466,
   nil,   nil,   nil,  8849,  8713,   455,   nil,  7353,  7081,   nil,
   258,   239,   264,     0,   414,  1885,   385,   nil,   nil, 25466,
   nil,   nil,   469,   -10,   -13,   nil,   nil,   nil,   nil,   357,
   nil,   371,  7489,   nil,   nil,   795,   -84, 11297,   271,   nil,
   263,   153,   127,   272,   172,   967,   256,   199, 19321,  2433,
   241,   220,   -12,   269, 19865,   nil,   nil,   257,   nil,  2022,
  1885,   141,   253,   nil,   nil,   587, 23566,   nil, 23826,   nil,
  5901,   nil, 21361,   nil,   525,   nil,    85,   270,   nil,   -34,
   nil,   nil,   nil,   nil,   498,   nil,    39,   nil,   nil,   nil,
   nil,    29,   nil, 16057,   325,    62,     7,     8,   140, 22041,
   nil,   532,   nil, 24685, 24466, 19593,   nil,   nil,   nil,   542,
   146,  3940,  4351, 25505,   650,  1209,   -16,   798,  4899,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   403,  6537,  3118,  8985,
   nil,   445,   nil,  3666,   nil,  2844,   nil,   nil,  3255,   nil,
  2296,   nil,  3529, 17009, 17553, 18369, 18913,    89, 19049,   606,
   620,   nil,   634,   641,   645,   nil,   669,   666,   663,   678,
 19457,   nil,   nil,  2570,   nil,   nil,   nil,  5721,  2296,   nil,
   nil,   744,   217,   nil,   nil,   867,   nil,  2159,   759,   807,
   nil,   nil,   nil,   800,   908,   795,   793,   nil,   nil,   nil,
   796,   797,   nil,   798,   801,   nil,   802,   nil,   806,   492,
   830,   591,   nil,   952,   nil, 20681,   978,  4488,  4762,   nil,
    23,    58,    63,   203,  1209,   nil,   900,  5036, 20817,   nil,
   785,  1045,  1046,   933,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   947,   934,   nil,  2570, 20137, 17689,  3392,   318,
   nil,   nil, 25429,   nil,   nil, 25486,   nil,  7125,   nil,   nil,
   990,   718, 11569,  1073,  1058,  1105,  5310,  1016,  1122,   nil,
  5173,   nil,   nil,    -7, 22857,   nil,   nil,   nil,   nil,   nil,
 25404,   nil,  6989,   nil,  6853,   nil,  6037,   nil,   nil,   nil,
   nil,   259,   657,  1039,   nil,    -9,   nil,  1180,  1183, 21089,
  1748,   nil,   nil,  1189,   723,   nil,   nil,   nil,   nil, 23951,
   nil,  1078,   nil,   nil,  1079,  1080,  1106,  1107,   nil,  1108,
   nil,    69,   nil,   nil,   nil,  1105, 24831,   nil,   nil,  1138,
   nil,   nil,   nil,  2707,   499,   829,   834,  1211,   272,   nil,
  1140,  1141,  1142,  1143,  1154,   688,  1167,   532,  3392,   nil,
   nil,   nil,    47,  3666,   nil,   nil,  3803,  4214,   nil, 24309,
   nil,  6581,   nil,  6309,   nil,  6173,   nil,   nil,   nil,   662,
  1235,  1236,   nil,  1320,  7217, 24612, 24758,  1110,  7533,   nil,
   nil,   nil,   nil,   829,  1205,   417,   nil,   nil,   nil,  1327,
  1328,  1329,  1210,  1211,  1212,  1213,   nil,   nil,  1218,    36,
    -1,   123,  1072,  1245,  1246,   nil,   nil,   nil,   nil,  7397,
   nil,   nil,   nil,   nil,    35,   nil,  1259,   nil ]

racc_action_default = [
    -1,  -626,  -625,  -626,    -2,  -612,    -4,    -5,  -626,    -8,
    -9,  -626,  -626,  -626,   -29,  -626,  -626,  -626,  -283,  -626,
   -41,   -44,  -614,  -626,   -49,   -51,   -52,   -53,   -58,  -260,
  -260,  -260,  -295,  -334,  -335,   -70,  -625,   -74,   -82,   -84,
  -626,  -519,  -520,  -626,  -626,  -626,  -626,  -626,  -614,  -241,
  -274,  -275,  -276,  -277,  -278,  -279,  -280,  -281,  -282,  -602,
  -285,  -614,  -625,  -625,  -303,  -406,  -626,  -626,  -308,  -311,
  -612,  -626,  -319,  -326,  -626,  -336,  -337,  -448,  -449,  -450,
  -451,  -452,  -453,  -625,  -456,  -625,  -625,  -625,  -625,  -625,
  -625,  -625,  -493,  -499,  -500,  -600,  -508,  -509,  -601,  -511,
  -512,  -513,  -514,  -515,  -516,  -517,  -518,  -523,  -524,  1048,
    -3,  -613,  -621,  -622,  -623,    -7,  -626,  -626,  -626,  -626,
  -626,  -626,   -17,  -626,  -113,  -114,  -115,  -116,  -117,  -118,
  -119,  -120,  -121,  -125,  -126,  -127,  -128,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,  -196,   -22,  -122,  -625,  -626,  -626,
  -625,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -614,  -615,
   -48,  -626,  -519,  -520,  -626,  -283,  -626,  -626,  -233,  -626,
  -625,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -412,  -415,
  -626,  -610,  -611,   -59,  -626,  -302,  -626,  -429,  -432,   -65,
  -625,  -426,   -66,  -614,   -67,  -242,  -255,  -625,  -625,  -259,
  -626,  -265,  -626,  -595,  -626,  -626,   -68,   -69,  -612,   -13,
   -14,  -626,   -72,  -625,  -614,  -626,   -75,   -78,  -625,   -90,
   -91,  -626,  -626,   -98,  -295,  -298,  -614,  -419,  -334,  -335,
  -338,  -427,  -626,   -80,  -626,   -86,  -292,  -501,  -502,  -626,
  -218,  -219,  -234,  -626,  -625,  -288,  -287,  -626,  -243,  -618,
  -618,  -626,  -626,  -593,  -618,  -626,  -304,  -305,  -551,   -50,
  -626,  -626,  -626,  -626,  -612,  -626,  -613,  -519,  -520,  -626,
  -626,  -283,  -626,  -359,  -360,  -626,  -322,  -626,  -113,  -114,
  -156,  -157,  -158,  -174,  -179,  -186,  -189,  -329,  -626,  -519,
  -520,  -590,  -591,  -454,  -626,  -477,  -626,  -479,  -626,  -481,
  -626,  -626,  -461,  -626,  -626,  -467,  -626,  -626,  -473,  -626,
  -626,  -475,  -626,  -492,  -494,  -495,  -496,  -497,    -6,  -624,
   -23,   -24,   -25,   -26,   -27,  -625,  -626,   -19,   -20,   -21,
  -123,  -626,   -30,   -39,   -40,  -626,  -626,   -31,  -199,  -614,
  -250,  -251,  -625,  -625,  -603,  -604,  -260,  -424,  -605,  -606,
  -604,  -603,  -260,  -423,  -425,  -605,  -606,   -37,  -207,   -38,
  -626,   -42,   -43,  -197,  -265,   -45,   -46,   -47,  -614,  -301,
  -626,  -626,  -625,  -292,  -626,  -626,  -626,  -208,  -209,  -210,
  -211,  -212,  -213,  -214,  -215,  -220,  -221,  -222,  -223,  -224,
  -225,  -226,  -227,  -228,  -229,  -230,  -231,  -232,  -235,  -236,
  -237,  -238,  -614,  -625,  -260,  -603,  -604,   -55,   -60,  -261,
  -420,  -625,  -625,  -614,  -614,  -297,  -256,  -626,  -264,  -257,
  -626,  -262,  -626,  -266,  -598,  -599,   -12,  -613,   -16,  -614,
   -71,  -290,   -87,   -76,  -626,  -614,  -625,  -626,  -626,   -97,
  -626,  -501,  -502,  -626,   -83,   -88,  -626,  -626,  -626,  -626,
  -626,  -239,  -626,  -440,  -626,  -614,  -616,  -244,  -620,  -619,
  -246,  -620,  -293,  -294,  -594,  -626,  -551,  -409,  -589,  -589,
  -534,  -536,  -536,  -536,  -550,  -552,  -553,  -554,  -555,  -556,
  -557,  -558,  -559,  -626,  -563,  -626,  -569,  -571,  -572,  -574,
  -579,  -581,  -582,  -584,  -585,  -586,  -626,  -625,  -350,  -351,
  -625,  -626,  -626,  -626,  -626,  -435,  -625,  -626,  -626,  -292,
  -316,  -108,  -109,  -626,  -111,  -626,  -283,  -626,  -626,  -327,
  -551,  -331,  -626,  -455,  -478,  -483,  -484,  -486,  -457,  -480,
  -458,  -482,  -459,  -460,  -626,  -463,  -465,  -626,  -466,  -469,
  -470,  -626,  -471,  -472,  -626,  -498,  -626,   -18,  -626,   -28,
  -273,  -626,  -626,  -428,  -626,  -252,  -254,  -626,  -626,   -61,
  -248,  -249,  -421,  -626,  -626,   -63,  -422,  -626,  -626,  -300,
  -603,  -604,  -603,  -604,  -614,  -197,  -626,  -395,  -396,  -614,
  -398,  -413,   -54,  -416,  -625,  -430,  -433,  -247,  -296,  -625,
  -263,  -267,  -626,  -596,  -597,   -15,   -73,  -626,   -79,   -85,
  -614,  -603,  -604,  -625,   -94,   -96,  -626,   -81,  -626,  -206,
  -216,  -217,  -614,  -625,  -625,  -286,  -289,  -618,  -407,  -625,
  -625,  -614,  -626,  -532,  -533,  -626,  -626,  -543,  -626,  -546,
  -626,  -548,  -626,  -361,  -626,  -363,  -365,  -372,  -557,  -614,
  -565,  -573,  -583,  -587,  -625,  -352,  -625,  -309,  -353,  -354,
  -312,  -626,  -315,  -626,  -614,  -603,  -604,  -607,  -291,  -626,
  -108,  -109,  -110,  -626,  -626,  -625,  -320,  -525,  -526,  -626,
  -323,  -625,  -625,  -551,  -626,  -626,  -614,  -626,  -625,  -462,
  -464,  -468,  -474,  -476,   -10,  -124,  -271,  -626,  -200,  -626,
  -617,  -625,   -33,  -202,   -34,  -203,   -62,   -35,  -205,   -36,
  -204,   -64,  -198,  -626,  -626,  -626,  -626,  -428,  -626,  -589,
  -589,  -377,  -625,  -625,  -625,  -394,  -626,  -614,  -400,  -557,
  -626,  -567,  -577,  -625,  -418,  -417,   -56,  -625,  -625,  -258,
  -268,   -77,   -92,   -89,  -299,  -625,  -357,  -625,  -441,  -625,
  -442,  -443,  -245,  -626,  -626,  -614,  -589,  -570,  -588,  -535,
  -536,  -536,  -564,  -536,  -536,  -580,  -536,  -575,  -614,  -626,
  -370,  -626,  -560,  -626,  -355,  -626,  -626,  -625,  -625,  -314,
  -626,  -428,  -626,  -108,  -109,  -112,  -614,  -625,  -626,  -528,
  -626,  -626,  -626,  -614,  -530,  -332,  -592,  -485,  -488,  -489,
  -490,  -491,  -626,  -272,   -32,  -201,  -253,  -626,  -240,  -626,
  -375,  -376,  -385,  -379,  -387,  -626,  -390,  -626,  -392,  -397,
  -626,  -626,  -626,  -566,  -626,  -626,  -625,  -626,  -626,   -11,
  -625,  -447,  -358,  -626,  -626,  -445,  -410,  -411,  -408,  -531,
  -626,  -539,  -626,  -541,  -626,  -544,  -626,  -547,  -549,  -362,
  -364,  -368,  -626,  -373,  -306,  -626,  -307,  -626,  -626,  -626,
  -625,  -317,  -428,  -626,  -626,  -324,  -328,  -330,  -529,  -551,
  -487,  -589,  -568,  -378,  -625,  -625,  -625,  -625,  -578,  -625,
  -399,  -614,  -402,  -404,  -405,  -576,  -626,  -292,  -414,  -626,
  -431,  -434,  -446,  -625,   -99,  -100,  -626,  -626,  -107,  -444,
  -536,  -536,  -536,  -536,  -366,  -626,  -371,  -626,  -625,  -310,
  -313,  -267,  -625,  -625,  -321,  -527,  -625,  -625,  -374,  -626,
  -382,  -626,  -384,  -626,  -388,  -626,  -391,  -393,  -401,  -626,
  -291,  -607,   -57,  -440,  -625,  -626,  -626,  -106,  -626,  -537,
  -540,  -542,  -545,  -626,  -369,  -625,  -436,  -437,  -438,  -626,
  -626,  -626,  -625,  -625,  -625,  -625,  -403,  -439,  -614,  -603,
  -604,  -607,  -105,  -536,  -367,  -356,  -318,  -325,  -333,  -626,
  -380,  -383,  -386,  -389,  -428,  -538,  -625,  -381 ]

clist = [
'6,217,276,276,276,259,220,296,367,325,17,534,336,271,339,339,17,584',
'339,127,127,554,277,277,277,394,633,323,499,577,580,221,130,130,693',
'442,114,414,4,547,221,221,221,439,17,301,301,260,122,206,488,110,329',
'426,432,419,295,752,132,132,328,333,703,704,339,339,339,339,670,221',
'111,670,313,843,221,221,294,815,221,349,292,375,127,377,379,382,385',
'388,391,377,537,540,340,341,673,544,344,923,832,127,793,114,484,278',
'278,278,263,269,272,719,846,524,835,727,730,493,345,742,796,17,920,661',
'310,310,221,221,221,221,17,665,666,952,794,330,334,673,954,948,614,115',
'376,617,400,401,402,403,392,373,274,286,287,597,355,599,857,9,310,598',
'860,986,825,9,357,445,446,447,448,604,751,600,755,611,939,499,615,739',
'406,615,976,831,276,833,848,343,795,354,205,899,847,797,342,412,417',
'535,427,324,437,441,416,368,951,664,746,545,416,698,670,670,420,338',
'121,352,483,803,491,17,221,221,221,807,436,221,221,221,221,221,221,411',
'492,554,673,1014,808,1016,276,733,819,903,17,1026,276,948,398,276,954',
'983,374,701,896,490,295,378,381,337,277,731,890,332,920,384,838,787',
'387,277,9,390,335,855,420,1034,867,757,221,404,832,498,498,758,221,393',
'858,221,371,554,525,520,2,812,830,663,339,339,426,432,271,827,942,654',
'713,17,331,17,806,880,881,301,17,628,832,602,1,678,,295,835,,,,295,114',
'687,,301,944,,,,,,,,513,17,509,506,278,,292,515,,909,851,292,,278,,',
',,,221,221,,507,,945,,,946,683,,680,,595,1035,595,1017,,581,582,326',
'683,,,,114,,,,,489,,310,970,931,,,832,601,494,583,,,,,,987,,634,310',
',,,6,,,,760,,641,760,413,,17,127,646,,444,,809,498,498,276,,640,,776',
'130,,683,,734,781,427,,,554,,861,862,310,626,310,627,508,,,670,,713',
'420,,840,132,863,988,,,822,436,221,656,1022,932,,,,641,442,,673,,,,811',
',,,,,692,657,640,501,525,503,276,504,505,657,657,,,525,,,,,,,427,,,639',
'1027,,,,,645,,,427,,420,17,,,,,,809,301,820,221,,436,449,,,16,301,,',
',,16,,436,930,221,,,,933,,750,,,,756,,,,,,276,,9,,,662,,,16,,,,669,',
'427,,,,713,,713,,,,,,495,,420,17,683,,17,,856,,963,,221,,436,724,,310',
'726,,,510,,,221,,310,697,221,805,728,728,978,,,,630,,772,774,554,,,',
'777,779,747,,441,,,634,,1044,127,,798,16,,,804,,,221,221,525,16,130',
',221,221,,1018,221,974,713,813,634,675,,657,,,765,641,498,,646,,,,1020',
'1021,132,,,,,798,640,,,416,301,,339,,865,,816,821,,,,301,,,,671,,,335',
',674,771,17,17,,713,,713,634,,276,,,,823,824,,816,850,816,,,427,,,,',
',,,16,,,,,,671,,420,335,,,221,713,,,436,874,221,,,790,649,16,17,17,',
'310,127,,852,17,,720,498,,,,310,,,798,221,872,,859,707,709,711,,864',
',,,,883,883,883,339,,,,,,826,,,667,668,,,339,,893,,,17,,901,,17,17,905',
'676,16,,16,,895,679,17,16,897,898,,,,,,766,634,,902,671,335,,,29,792',
'696,,,683,29,1028,,,16,221,,17,17,,,,,,,29,,17,221,927,928,,,925,29',
'29,29,810,29,,,,,,,728,934,310,791,,884,886,888,935,834,,836,,,818,',
',955,29,,,17,,29,29,17,,29,,966,,,837,959,,42,,962,,,,42,,,,,828,998',
',828,16,,,444,,17,,,,883,883,883,883,,883,,,982,29,42,300,300,,29,29',
'29,29,29,,,,436,985,,,,,873,17,,,276,,941,310,,790,816,,790,1003,790',
',17,348,427,310,370,17,,,17,17,,,1015,,,814,420,1019,,,,634,,,,,221',
'816,436,,,,,,883,883,883,883,,,,42,842,,,,,,,16,42,,,,990,992,994,996',
'883,997,,29,29,29,29,,,29,29,29,29,29,29,,911,913,,915,917,866,918,',
',947,29,949,,,,,,,,335,,,,,,,790,,790,,790,,790,,971,,972,,973,,,,,',
'29,16,828,,16,791,29,,791,29,791,,,,1040,1041,1042,1043,,42,,,,,,,,29',
'981,29,908,,790,,29,,,,1047,,,,42,919,,,,,,,,,,,,,,,,,29,,,,,,,,938',
'1023,,1024,,1025,,,,,29,29,,,,,,,,,1033,,,,,,,,1009,1010,1011,1012,',
',,42,,42,,,,300,42,,791,,791,,791,,791,1046,,,,16,16,,300,,,,,,,,,,42',
',,,,29,,,,,,,,,,,,,,,,,,1045,,,791,,,,,370,,370,,,,41,,16,16,,,41,,',
'16,,,,,,29,,,,,,,,,,,,,,,,,,,41,299,299,,,,,,,,42,,,,,,,,,,16,,,,16',
'16,,,,,,,,,16,347,29,,369,,,,,,,29,,,,,,,,,,,,,,,,29,,,16,16,,,,,,,',
',16,41,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,29,,,29,,,42,16,,29,,16,,300',
',,,,,,,29,300,,,29,,,,,,,,,,,,,,,,16,,,,,,,,18,,,,,,18,,,,,29,29,,,',
'41,29,29,,,29,,,,16,,42,,,42,,,,18,303,303,,,41,16,,,,,16,,,16,16,,',
',,,,,,,,,,,,,,,,,351,,,,29,29,,,,,,,,,,,,,,,,,,,,,,,,,,41,,41,,,,299',
'41,,18,,,,29,,,,,18,29,,,,299,,29,29,300,19,,,,29,41,19,,,,300,,,,,29',
',,,,,42,42,,,,,,,,,,,,19,,369,,369,,,,,,,,,,,29,,,,29,29,,,,,,,,,29',
',,,,,353,,,,42,42,,,18,,,42,,,,,,41,,,,,29,,29,29,,,,,,18,,,29,29,,',
',,19,,,,,,,,,19,,,,370,,,42,,,,42,42,,,,,,,,,42,,,29,,,,29,,,,,,,,,',
',,,,,18,,18,,,,303,18,42,42,,,,,,29,,,42,,,,,303,,,,41,,,,,,18,299,',
',,,,,,,299,19,,,,29,,,440,,370,,,,42,,,,42,,29,596,965,596,19,29,,,29',
'29,,,,,,,,,,,,,,,,,29,,42,,,,,,41,,,41,,,,,,,,,,,,,,18,,,,,,,,,,42,',
',,19,,19,,,,,19,,,,42,,,,,42,,,42,42,,,,,,,,,,,,,19,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,299,,,,,,,,,,,299,,,,,,,,18,,,41,41,,,303,,,,,,,',
',303,,,,,,,,,,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,41,,,,,,41,,,,,,,,18',
',,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,369,,,41,,,,41,41,,,,,,,,,41,,,,',
',,19,,,,,,,,,,,,,,,,,,,,,,,41,41,,,,,,,,,41,,,,,,,,,303,,,,,,,,,,,303',
',,,,,,,,,,18,18,,,369,,19,,41,19,,,41,,,,964,,,,,,,,,,,,,,,,,,,,,,,',
',,41,,,,,,,,,,18,18,,,,,871,18,,,,,,,,,,,,,,,,41,440,,,,,,,,,,,,,,41',
',,,,41,,,41,41,,596,,,18,,,,18,18,,,,,,,,,18,,,,,,,,,,19,19,,,,,,,,',
',,,,,,,,,,18,18,,,228,,,,,,18,,,275,275,275,,,,,,,,,,,320,321,322,,',
',19,19,,,,,,19,,,,275,275,596,,,,18,,,,18,,,,968,,,,,,,,,,,,,,,,,,,',
',,,,,,18,19,,,,19,19,,,,,,,,,19,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,19,19',
',18,,,,,18,,19,18,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,19,,',
',969,,,,275,418,275,,,438,443,,,,,,,,,,,,,,,228,19,,457,458,459,460',
'461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477',
'478,479,480,481,482,,,,,,19,275,,,,,,275,,,275,,,,,19,,275,,275,19,275',
'275,19,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,531,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,275,,438,655,418,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,275,,,275,,275,,,,,,,,,,,,,,275,,,',
',,,,,,689,690,691,,,,,,,,,,275,,,275,,,,,,,,,,,,,,,,,,,,,,,,275,,,,',
',,,,,,,,,,,,,,,,275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,275',
'768,,,275,275,773,775,,,,,778,780,,,655,782,,,,,,,,,,,,,,,,,,,,,,,,275',
',,,,,,,,,,,,,,,,,,,,,275,,,,,,,,,,,,,,,,,,275,,,,,,,,,,,,,,,,,,,,,275',
',,,,,,,,,,,275,,,,,,,,,,,,,,,,,,,,,,275,,875,,,,,,,,,,,,,,773,775,780',
'778,,878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,275,875,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,275' ]
        racc_goto_table = arr = ::Array.new(3297, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,35,35,35,151,22,52,59,31,24,10,87,71,31,31,24,93,31,60,60,182,68',
'68,68,59,26,33,73,90,90,24,63,63,13,20,96,29,2,150,24,24,24,29,24,24',
'24,38,17,17,41,5,68,39,39,25,12,97,64,64,6,6,135,135,31,31,31,31,74',
'24,8,74,53,91,24,24,49,14,24,24,48,6,60,6,6,6,6,6,6,6,69,69,19,19,196',
'69,19,131,187,60,140,96,39,70,70,70,40,40,40,130,14,54,191,92,92,25',
'5,57,143,24,128,42,66,66,24,24,24,24,24,42,42,145,141,70,70,196,146',
'192,171,7,168,171,19,19,19,19,168,166,47,47,47,58,107,58,108,9,66,109',
'110,111,143,9,112,31,31,31,31,172,113,114,115,172,116,73,172,105,32',
'172,131,141,35,141,104,103,132,21,18,15,102,138,101,22,22,100,71,99',
'22,22,68,98,144,44,95,147,68,148,74,74,6,149,11,94,152,153,156,24,24',
'24,24,157,60,24,24,24,24,24,24,12,158,182,196,131,159,160,35,161,162',
'163,24,145,35,192,7,35,146,106,167,150,45,71,12,169,170,89,68,93,143',
'86,128,173,130,26,174,68,9,175,30,57,6,131,176,177,24,9,187,6,6,178',
'24,179,181,24,85,182,52,33,3,26,185,72,31,31,39,39,71,188,189,25,129',
'24,67,24,42,135,135,24,24,65,187,195,1,54,,12,191,,,,12,96,54,,24,140',
',,,,,,,53,24,49,5,70,,48,49,,135,26,48,,70,,,,,,24,24,,8,,141,,,141',
'39,,25,,24,91,24,14,,19,19,50,39,,,,96,,,,,47,,66,141,92,,,187,38,47',
'5,,,,,,97,,33,66,,,,6,,,,172,,71,172,30,,24,60,71,,30,,73,6,6,35,,6',
',41,63,,39,,25,41,71,,,182,,10,10,66,2,66,17,9,,,74,,129,6,,129,64,150',
'135,,,69,60,24,33,141,26,,,,71,20,,196,,,,54,,,,,,31,6,6,30,52,30,35',
'30,30,6,6,,,52,,,,,,,71,,,40,13,,,,,40,,,71,,6,24,,,,,,73,24,29,24,',
'60,50,,,23,24,,,,,23,,60,90,24,,,,10,,31,,,,31,,,,,,35,,9,,,40,,,23',
',,,70,,71,,,,129,,129,,,,,,50,,6,24,39,,24,,25,,90,,24,,60,12,,66,12',
',,50,,,24,,66,70,24,87,96,96,90,,,,30,,22,22,182,,,,22,22,96,,22,,,33',
',26,60,,33,23,,,151,,,24,24,52,23,63,,24,24,,93,24,129,129,52,33,9,',
'6,,,17,71,6,,71,,,,10,10,64,,,,,33,6,,,68,24,,31,,59,,6,6,,,,24,,,,30',
',,30,,30,70,24,24,,129,,129,33,,35,,,,12,12,,6,68,6,,,71,,,,,,,,23,',
',,,,30,,6,30,,,24,129,,,60,22,24,,,134,50,23,24,24,,66,60,,19,24,,30',
'6,,,,66,,,33,24,12,,96,184,184,184,,96,,,,,6,6,6,31,,,,,,134,,,50,50',
',,31,,24,,,24,,6,,24,24,6,50,23,,23,,12,50,24,23,12,12,,,,,,30,33,,12',
'30,30,,,43,139,50,,,39,43,25,,,23,24,,24,24,,,,,,,43,,24,24,12,12,,',
'19,43,43,43,30,43,,,,,,,96,19,66,136,,137,137,137,96,139,,139,,,30,',
',24,43,,,24,,43,43,24,,43,,24,,,30,12,,56,,12,,,,56,,,,,136,33,,136',
'23,,,30,,24,,,,6,6,6,6,,6,,,12,43,56,56,56,,43,43,43,43,43,,,,60,96',
',,,,30,24,,,35,,134,66,,134,6,,134,12,134,,24,56,71,66,56,24,,,24,24',
',,12,,,50,6,12,,,,33,,,,,24,6,60,,,,,,6,6,6,6,,,,56,50,,,,,,,23,56,',
',,137,137,137,137,6,137,,43,43,43,43,,,43,43,43,43,43,43,,184,184,,184',
'184,50,184,,,139,43,139,,,,,,,,30,,,,,,,134,,134,,134,,134,,139,,139',
',139,,,,,,43,23,136,,23,136,43,,136,43,136,,,,137,137,137,137,,56,,',
',,,,,43,30,43,50,,134,,43,,,,137,,,,56,50,,,,,,,,,,,,,,,,,43,,,,,,,',
'50,139,,139,,139,,,,,43,43,,,,,,,,,139,,,,,,,,184,184,184,184,,,,56',
',56,,,,56,56,,136,,136,,136,,136,139,,,,23,23,,56,,,,,,,,,,56,,,,,43',
',,,,,,,,,,,,,,,,,184,,,136,,,,,56,,56,,,,55,,23,23,,,55,,,23,,,,,,43',
',,,,,,,,,,,,,,,,,,55,55,55,,,,,,,,56,,,,,,,,,,23,,,,23,23,,,,,,,,,23',
'55,43,,55,,,,,,,43,,,,,,,,,,,,,,,,43,,,23,23,,,,,,,,,23,55,,,,,,,,,55',
',,,,,,,,,,,,,,,,,,,,,43,,,43,,,56,23,,43,,23,,56,,,,,,,,43,56,,,43,',
',,,,,,,,,,,,,,23,,,,,,,,27,,,,,,27,,,,,43,43,,,,55,43,43,,,43,,,,23',
',56,,,56,,,,27,27,27,,,55,23,,,,,23,,,23,23,,,,,,,,,,,,,,,,,,,,27,,',
',43,43,,,,,,,,,,,,,,,,,,,,,,,,,,55,,55,,,,55,55,,27,,,,43,,,,,27,43',
',,,55,,43,43,56,28,,,,43,55,28,,,,56,,,,,43,,,,,,56,56,,,,,,,,,,,,28',
',55,,55,,,,,,,,,,,43,,,,43,43,,,,,,,,,43,,,,,,28,,,,56,56,,,27,,,56',
',,,,,55,,,,,43,,43,43,,,,,,27,,,43,43,,,,,28,,,,,,,,,28,,,,56,,,56,',
',,56,56,,,,,,,,,56,,,43,,,,43,,,,,,,,,,,,,,,27,,27,,,,27,27,56,56,,',
',,,43,,,56,,,,,27,,,,55,,,,,,27,55,,,,,,,,,55,28,,,,43,,,28,,56,,,,56',
',,,56,,43,27,56,27,28,43,,,43,43,,,,,,,,,,,,,,,,,43,,56,,,,,,55,,,55',
',,,,,,,,,,,,,27,,,,,,,,,,56,,,,28,,28,,,,,28,,,,56,,,,,56,,,56,56,,',
',,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,,,,,,,,,,,55,,,,',
',,,27,,,55,55,,,27,,,,,,,,,27,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,55,55,,,,,,55,,,,,,,,27,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,,,55',
',,,55,55,,,,,,,,,55,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,55,55,,,,,,,,,55',
',,,,,,,,27,,,,,,,,,,,27,,,,,,,,,,,27,27,,,55,,28,,55,28,,,55,,,,55,',
',,,,,,,,,,,,,,,,,,,,,,,,55,,,,,,,,,,27,27,,,,,27,27,,,,,,,,,,,,,,,,55',
'28,,,,,,,,,,,,,,55,,,,,55,,,55,55,,27,,,27,,,,27,27,,,,,,,,,27,,,,,',
',,,,28,28,,,,,,,,,,,,,,,,,,,27,27,,,34,,,,,,27,,,34,34,34,,,,,,,,,,',
'34,34,34,,,,28,28,,,,,,28,,,,34,34,27,,,,27,,,,27,,,,27,,,,,,,,,,,,',
',,,,,,,,,,,,,27,28,,,,28,28,,,,,,,,,28,,,,,,,,,,,,,,,,,,27,,,,,,,,,',
',,28,28,,27,,,,,27,,28,27,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28',
',,,28,,,,28,,,,34,34,34,,,34,34,,,,,,,,,,,,,,,34,28,,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,,,,,',
'28,34,,,,,,34,,,34,,,,,28,,34,,34,28,34,34,28,28,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,34,,34,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34',
',,34,,34,,,,,,,,,,,,,,34,,,,,,,,,,34,34,34,,,,,,,,,,34,,,34,,,,,,,,',
',,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,34,34,,,34,34,34,34,,,,,34,34,,,34,34,,,,,,,,,,,,,',
',,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,',
',,,,,,,,,34,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,34,,34,,,,,,,,,,,,,,34',
'34,34,34,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3297, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   310,    36,   286,   nil,    46,    -2,   131,    65,   153,
  -313,   200,    20,  -499,  -616,  -628,   nil,    37,   174,    26,
  -179,   114,   -17,   528,     8,  -155,  -393,  1464,  1592,  -171,
   203,   -52,    54,   -21,  2292,   -30,   nil,   nil,    20,  -158,
    77,  -213,  -362,   840,  -286,  -558,   nil,   116,    44,    40,
   309,   nil,   -30,    34,  -203,  1275,   916,  -476,  -204,   -66,
     8,   nil,   nil,    21,    47,  -103,    85,   238,   -10,  -239,
    71,   -17,  -195,  -250,  -429,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   208,   194,   -52,   nil,   188,
  -311,  -651,  -468,  -328,   140,  -395,    31,  -543,   125,   135,
  -132,   122,  -539,   114,  -548,  -415,  -686,    80,  -592,  -199,
  -592,  -776,    89,  -431,  -198,  -431,  -693,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -719,  -265,
  -454,  -744,  -475,   nil,    97,  -486,   227,    96,  -470,   184,
  -559,  -527,   nil,  -541,  -691,  -760,  -755,  -135,  -340,   144,
  -299,   -20,   -46,  -448,   nil,   nil,   -53,  -446,   -40,  -434,
  -749,  -350,  -458,  -582,   nil,   nil,    67,   163,    55,   165,
   165,  -243,  -207,   171,   173,   175,  -487,  -335,  -330,   188,
   nil,  -468,  -317,   nil,   230,  -418,   nil,  -608,  -407,  -583,
   nil,  -596,  -748,   nil,   nil,   -63,  -406 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   289,     7,   346,   290,
   nil,   nil,   533,   nil,   844,   nil,   288,   nil,   nil,   nil,
    14,    15,    21,   227,   319,   nil,   nil,   225,   226,   nil,
   281,    20,   nil,   327,    24,    25,    26,    27,   nil,   686,
   nil,   nil,   nil,   307,   nil,   nil,    28,   421,    35,   nil,
   nil,    37,    40,    39,   nil,   222,   223,   594,   nil,   129,
   429,   128,   131,    78,    79,   nil,    49,   nil,   422,   nil,
   423,   434,   642,   496,   279,   264,   nil,    50,    51,    52,
    53,    54,    55,    56,    57,    58,   nil,   265,    64,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   578,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   715,   561,
   nil,   716,   943,   789,   549,   nil,   550,   nil,   nil,   551,
   nil,   553,   658,   nil,   nil,   nil,   559,   nil,   nil,   nil,
   754,   nil,   nil,   nil,   433,   266,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    77,    80,    82,   nil,   nil,   nil,
   nil,   nil,   609,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   829,   548,   nil,   552,   562,   564,   566,   801,
   569,   570,   802,   573,   576,   nil,   283 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 177, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  3, 154, :_reduce_40,
  1, 154, :_reduce_none,
  3, 165, :_reduce_42,
  3, 165, :_reduce_43,
  1, 176, :_reduce_none,
  3, 176, :_reduce_45,
  3, 176, :_reduce_46,
  3, 176, :_reduce_47,
  2, 176, :_reduce_48,
  1, 176, :_reduce_none,
  1, 164, :_reduce_50,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_54,
  0, 189, :_reduce_55,
  0, 190, :_reduce_56,
  6, 186, :_reduce_57,
  1, 188, :_reduce_58,
  2, 180, :_reduce_59,
  3, 180, :_reduce_60,
  4, 180, :_reduce_61,
  5, 180, :_reduce_62,
  4, 180, :_reduce_63,
  5, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  2, 180, :_reduce_69,
  1, 166, :_reduce_none,
  3, 166, :_reduce_71,
  1, 194, :_reduce_none,
  3, 194, :_reduce_73,
  1, 193, :_reduce_74,
  2, 193, :_reduce_75,
  3, 193, :_reduce_76,
  5, 193, :_reduce_77,
  2, 193, :_reduce_78,
  4, 193, :_reduce_79,
  2, 193, :_reduce_80,
  4, 193, :_reduce_81,
  1, 193, :_reduce_82,
  3, 193, :_reduce_83,
  1, 197, :_reduce_none,
  3, 197, :_reduce_85,
  2, 196, :_reduce_86,
  3, 196, :_reduce_87,
  1, 199, :_reduce_88,
  3, 199, :_reduce_89,
  1, 198, :_reduce_90,
  1, 198, :_reduce_91,
  4, 198, :_reduce_92,
  3, 198, :_reduce_93,
  3, 198, :_reduce_94,
  3, 198, :_reduce_95,
  3, 198, :_reduce_96,
  2, 198, :_reduce_97,
  1, 198, :_reduce_98,
  1, 173, :_reduce_99,
  1, 173, :_reduce_100,
  4, 173, :_reduce_101,
  3, 173, :_reduce_102,
  3, 173, :_reduce_103,
  3, 173, :_reduce_104,
  3, 173, :_reduce_105,
  2, 173, :_reduce_106,
  1, 173, :_reduce_107,
  1, 202, :_reduce_108,
  1, 202, :_reduce_none,
  2, 203, :_reduce_110,
  1, 203, :_reduce_111,
  3, 203, :_reduce_112,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_116,
  1, 204, :_reduce_117,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_120,
  1, 162, :_reduce_none,
  1, 163, :_reduce_122,
  0, 210, :_reduce_123,
  4, 163, :_reduce_124,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  3, 179, :_reduce_197,
  5, 179, :_reduce_198,
  3, 179, :_reduce_199,
  5, 179, :_reduce_200,
  6, 179, :_reduce_201,
  5, 179, :_reduce_202,
  5, 179, :_reduce_203,
  5, 179, :_reduce_204,
  5, 179, :_reduce_205,
  4, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  3, 179, :_reduce_213,
  3, 179, :_reduce_214,
  3, 179, :_reduce_215,
  4, 179, :_reduce_216,
  4, 179, :_reduce_217,
  2, 179, :_reduce_218,
  2, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  3, 179, :_reduce_230,
  3, 179, :_reduce_231,
  3, 179, :_reduce_232,
  2, 179, :_reduce_233,
  2, 179, :_reduce_234,
  3, 179, :_reduce_235,
  3, 179, :_reduce_236,
  3, 179, :_reduce_237,
  3, 179, :_reduce_238,
  3, 179, :_reduce_239,
  6, 179, :_reduce_240,
  1, 179, :_reduce_none,
  1, 175, :_reduce_242,
  1, 212, :_reduce_none,
  2, 212, :_reduce_244,
  4, 212, :_reduce_245,
  2, 212, :_reduce_246,
  3, 216, :_reduce_247,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 170, :_reduce_250,
  1, 170, :_reduce_251,
  2, 170, :_reduce_252,
  4, 170, :_reduce_253,
  2, 170, :_reduce_254,
  1, 192, :_reduce_255,
  2, 192, :_reduce_256,
  2, 192, :_reduce_257,
  4, 192, :_reduce_258,
  1, 192, :_reduce_259,
  0, 220, :_reduce_260,
  2, 185, :_reduce_261,
  2, 219, :_reduce_262,
  2, 218, :_reduce_263,
  1, 218, :_reduce_none,
  1, 213, :_reduce_265,
  2, 213, :_reduce_266,
  3, 213, :_reduce_267,
  4, 213, :_reduce_268,
  1, 221, :_reduce_269,
  1, 221, :_reduce_270,
  3, 174, :_reduce_271,
  4, 174, :_reduce_272,
  2, 174, :_reduce_273,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_284,
  0, 244, :_reduce_285,
  4, 211, :_reduce_286,
  2, 211, :_reduce_287,
  0, 245, :_reduce_288,
  4, 211, :_reduce_289,
  3, 211, :_reduce_290,
  3, 211, :_reduce_291,
  2, 211, :_reduce_292,
  3, 211, :_reduce_293,
  3, 211, :_reduce_294,
  1, 211, :_reduce_295,
  4, 211, :_reduce_296,
  3, 211, :_reduce_297,
  1, 211, :_reduce_298,
  5, 211, :_reduce_299,
  4, 211, :_reduce_300,
  3, 211, :_reduce_301,
  2, 211, :_reduce_302,
  1, 211, :_reduce_none,
  2, 211, :_reduce_304,
  2, 211, :_reduce_305,
  6, 211, :_reduce_306,
  6, 211, :_reduce_307,
  0, 246, :_reduce_308,
  0, 247, :_reduce_309,
  7, 211, :_reduce_310,
  0, 248, :_reduce_311,
  0, 249, :_reduce_312,
  7, 211, :_reduce_313,
  5, 211, :_reduce_314,
  4, 211, :_reduce_315,
  0, 250, :_reduce_316,
  0, 251, :_reduce_317,
  9, 211, :_reduce_318,
  0, 252, :_reduce_319,
  0, 253, :_reduce_320,
  7, 211, :_reduce_321,
  0, 254, :_reduce_322,
  0, 255, :_reduce_323,
  0, 256, :_reduce_324,
  9, 211, :_reduce_325,
  0, 257, :_reduce_326,
  0, 258, :_reduce_327,
  6, 211, :_reduce_328,
  0, 259, :_reduce_329,
  6, 211, :_reduce_330,
  0, 260, :_reduce_331,
  0, 261, :_reduce_332,
  9, 211, :_reduce_333,
  1, 211, :_reduce_334,
  1, 211, :_reduce_335,
  1, 211, :_reduce_336,
  1, 211, :_reduce_337,
  1, 169, :_reduce_338,
  1, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  2, 235, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 236, :_reduce_none,
  5, 236, :_reduce_356,
  1, 159, :_reduce_none,
  2, 159, :_reduce_358,
  1, 239, :_reduce_none,
  1, 239, :_reduce_360,
  1, 273, :_reduce_none,
  3, 273, :_reduce_362,
  1, 276, :_reduce_363,
  3, 276, :_reduce_364,
  1, 275, :_reduce_365,
  4, 275, :_reduce_366,
  6, 275, :_reduce_367,
  3, 275, :_reduce_368,
  5, 275, :_reduce_369,
  2, 275, :_reduce_370,
  4, 275, :_reduce_371,
  1, 275, :_reduce_372,
  3, 275, :_reduce_373,
  4, 277, :_reduce_374,
  2, 277, :_reduce_375,
  2, 277, :_reduce_376,
  1, 277, :_reduce_377,
  2, 282, :_reduce_378,
  1, 282, :_reduce_none,
  6, 283, :_reduce_380,
  8, 283, :_reduce_381,
  4, 283, :_reduce_382,
  6, 283, :_reduce_383,
  4, 283, :_reduce_384,
  2, 283, :_reduce_385,
  6, 283, :_reduce_386,
  2, 283, :_reduce_387,
  4, 283, :_reduce_388,
  6, 283, :_reduce_389,
  2, 283, :_reduce_390,
  4, 283, :_reduce_391,
  2, 283, :_reduce_392,
  4, 283, :_reduce_393,
  1, 283, :_reduce_394,
  1, 187, :_reduce_395,
  1, 187, :_reduce_none,
  3, 287, :_reduce_397,
  1, 287, :_reduce_398,
  4, 287, :_reduce_399,
  1, 288, :_reduce_none,
  4, 288, :_reduce_401,
  1, 289, :_reduce_402,
  3, 289, :_reduce_403,
  1, 290, :_reduce_404,
  1, 290, :_reduce_none,
  0, 294, :_reduce_406,
  3, 234, :_reduce_407,
  4, 292, :_reduce_408,
  1, 292, :_reduce_409,
  3, 293, :_reduce_410,
  3, 293, :_reduce_411,
  0, 297, :_reduce_412,
  0, 298, :_reduce_413,
  6, 296, :_reduce_414,
  2, 182, :_reduce_415,
  4, 182, :_reduce_416,
  5, 182, :_reduce_417,
  5, 182, :_reduce_418,
  0, 300, :_reduce_419,
  3, 233, :_reduce_420,
  4, 233, :_reduce_421,
  4, 233, :_reduce_422,
  3, 233, :_reduce_423,
  3, 233, :_reduce_424,
  3, 233, :_reduce_425,
  2, 233, :_reduce_426,
  1, 233, :_reduce_427,
  4, 233, :_reduce_428,
  0, 301, :_reduce_429,
  0, 302, :_reduce_430,
  6, 232, :_reduce_431,
  0, 303, :_reduce_432,
  0, 304, :_reduce_433,
  6, 232, :_reduce_434,
  0, 306, :_reduce_435,
  6, 238, :_reduce_436,
  1, 305, :_reduce_none,
  1, 305, :_reduce_none,
  6, 158, :_reduce_439,
  0, 158, :_reduce_440,
  1, 307, :_reduce_441,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  2, 308, :_reduce_444,
  1, 308, :_reduce_none,
  2, 160, :_reduce_446,
  1, 160, :_reduce_none,
  1, 222, :_reduce_448,
  1, 222, :_reduce_449,
  1, 222, :_reduce_none,
  1, 223, :_reduce_451,
  1, 310, :_reduce_452,
  1, 310, :_reduce_none,
  2, 310, :_reduce_454,
  3, 311, :_reduce_455,
  1, 311, :_reduce_456,
  3, 224, :_reduce_457,
  3, 225, :_reduce_458,
  3, 226, :_reduce_459,
  3, 226, :_reduce_460,
  1, 315, :_reduce_461,
  3, 315, :_reduce_462,
  1, 316, :_reduce_none,
  2, 316, :_reduce_464,
  3, 228, :_reduce_465,
  3, 228, :_reduce_466,
  1, 318, :_reduce_467,
  3, 318, :_reduce_468,
  3, 227, :_reduce_469,
  3, 227, :_reduce_470,
  3, 229, :_reduce_471,
  3, 229, :_reduce_472,
  1, 319, :_reduce_473,
  3, 319, :_reduce_474,
  1, 320, :_reduce_475,
  3, 320, :_reduce_476,
  1, 312, :_reduce_477,
  2, 312, :_reduce_478,
  1, 313, :_reduce_479,
  2, 313, :_reduce_480,
  1, 314, :_reduce_481,
  2, 314, :_reduce_482,
  1, 317, :_reduce_483,
  0, 322, :_reduce_484,
  3, 317, :_reduce_485,
  0, 323, :_reduce_486,
  4, 317, :_reduce_487,
  1, 321, :_reduce_488,
  1, 321, :_reduce_489,
  1, 321, :_reduce_490,
  1, 321, :_reduce_none,
  2, 208, :_reduce_492,
  1, 208, :_reduce_493,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  3, 209, :_reduce_498,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  2, 309, :_reduce_501,
  2, 309, :_reduce_502,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_512,
  1, 201, :_reduce_513,
  1, 201, :_reduce_514,
  1, 201, :_reduce_515,
  1, 201, :_reduce_516,
  1, 201, :_reduce_517,
  1, 201, :_reduce_518,
  1, 230, :_reduce_519,
  1, 230, :_reduce_520,
  1, 168, :_reduce_521,
  1, 168, :_reduce_522,
  1, 172, :_reduce_523,
  1, 172, :_reduce_524,
  1, 240, :_reduce_525,
  0, 326, :_reduce_526,
  4, 240, :_reduce_527,
  2, 240, :_reduce_528,
  3, 242, :_reduce_529,
  2, 242, :_reduce_530,
  4, 327, :_reduce_531,
  2, 327, :_reduce_532,
  2, 327, :_reduce_533,
  1, 327, :_reduce_none,
  2, 329, :_reduce_535,
  0, 329, :_reduce_536,
  6, 295, :_reduce_537,
  8, 295, :_reduce_538,
  4, 295, :_reduce_539,
  6, 295, :_reduce_540,
  4, 295, :_reduce_541,
  6, 295, :_reduce_542,
  2, 295, :_reduce_543,
  4, 295, :_reduce_544,
  6, 295, :_reduce_545,
  2, 295, :_reduce_546,
  4, 295, :_reduce_547,
  2, 295, :_reduce_548,
  4, 295, :_reduce_549,
  1, 295, :_reduce_550,
  0, 295, :_reduce_551,
  1, 291, :_reduce_552,
  1, 291, :_reduce_553,
  1, 291, :_reduce_554,
  1, 291, :_reduce_555,
  1, 274, :_reduce_none,
  1, 274, :_reduce_557,
  1, 331, :_reduce_none,
  1, 332, :_reduce_none,
  3, 332, :_reduce_560,
  1, 332, :_reduce_none,
  3, 332, :_reduce_562,
  1, 284, :_reduce_563,
  3, 284, :_reduce_564,
  2, 333, :_reduce_565,
  2, 334, :_reduce_566,
  1, 278, :_reduce_none,
  3, 278, :_reduce_568,
  1, 328, :_reduce_none,
  3, 328, :_reduce_570,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 279, :_reduce_573,
  1, 279, :_reduce_574,
  3, 336, :_reduce_575,
  3, 337, :_reduce_576,
  1, 285, :_reduce_577,
  3, 285, :_reduce_578,
  1, 330, :_reduce_579,
  3, 330, :_reduce_580,
  1, 338, :_reduce_none,
  1, 338, :_reduce_none,
  2, 286, :_reduce_583,
  1, 286, :_reduce_584,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 281, :_reduce_587,
  2, 280, :_reduce_588,
  0, 280, :_reduce_589,
  1, 243, :_reduce_none,
  0, 340, :_reduce_591,
  4, 243, :_reduce_592,
  1, 231, :_reduce_593,
  2, 231, :_reduce_594,
  1, 215, :_reduce_none,
  3, 215, :_reduce_596,
  3, 341, :_reduce_597,
  2, 341, :_reduce_598,
  2, 341, :_reduce_599,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 195, :_reduce_none,
  2, 171, :_reduce_none,
  0, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 241, :_reduce_621,
  1, 241, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_624,
  0, 151, :_reduce_625 ]

racc_reduce_n = 626

racc_shift_n = 1048

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "mrhs_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "simple_numeric",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_56(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_60(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

def _reduce_197(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_198(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_201(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_205(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_206(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_207(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_208(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_209(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                      ## TODO: why is this 2.0 only?
                      debug20 12, val, result
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_235(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_255(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_260(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_261(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 264 omitted

def _reduce_265(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_267(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

def _reduce_284(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_286(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_288(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_289(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_295(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_301(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_302(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 303 omitted

def _reduce_304(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_312(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_317(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_324(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_330(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_332(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_333(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_338(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 361 omitted

def _reduce_362(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_365(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_369(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_371(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_372(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_373(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
 result = 0 
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

# reduce 400 omitted

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 405 omitted

def _reduce_406(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_407(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_413(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_414(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_415(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_416(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_419(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_420(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_428(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_434(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 437 omitted

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_440(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 442 omitted

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_452(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 453 omitted

def _reduce_454(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_462(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0].dup << word
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_468(val, _values, result)
                      list, sym, _ = val

                      case sym[0]
                      when :dstr then
                        sym[0] = :dsym
                      when :str then
                        sym = s(:lit, sym.last.to_sym)
                      else
                        debug20 24
                        sym = s(:dsym, "", result)
                      end

                      result = list.dup << sym
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].dup << s(:str, val[1])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0].dup << s(:lit, val[1].to_sym)
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_478(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_480(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_482(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_484(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_485(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = [lexer.lex_strterm, 
                                lexer.brace_nest, 
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store, 
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_487(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_DEND
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_488(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 491 omitted

def _reduce_492(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_493(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 499 omitted

# reduce 500 omitted

def _reduce_501(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_502(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

def _reduce_512(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_513(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_514(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_515(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_516(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_517(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_518(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_519(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_520(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_521(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_522(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_523(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_524(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_525(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_526(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_528(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_529(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_530(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_531(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

# reduce 534 omitted

def _reduce_535(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_550(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_551(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_552(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_553(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_554(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_555(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 558 omitted

# reduce 559 omitted

def _reduce_560(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 561 omitted

def _reduce_562(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_563(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_564(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_565(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_566(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      result = args val
                    
    result
end

# reduce 571 omitted

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_574(val, _values, result)
                      debug20 36, val, result
                    
    result
end

def _reduce_575(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_576(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_579(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_580(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 581 omitted

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_584(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 585 omitted

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_589(val, _values, result)
                      result = nil
                    
    result
end

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_594(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 595 omitted

def _reduce_596(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

def _reduce_621(val, _values, result)
 yyerrok 
    result
end

# reduce 622 omitted

# reduce 623 omitted

def _reduce_624(val, _values, result)
 yyerrok 
    result
end

def _reduce_625(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
