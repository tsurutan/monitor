#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.13
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby23Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-509,296,72,73,74,12,60,-509,-509,-509,66,67,-509,-509,-509,70,-509',
'68,69,71,33,34,75,76,-509,721,-509,-509,-509,32,31,30,104,103,105,106',
'-509,-509,22,-509,-509,-509,-509,-509,11,48,3,13,108,107,109,98,59,100',
'99,101,-93,102,110,111,872,94,95,770,45,46,44,-509,-509,-509,-509,-509',
'-509,-509,-509,-509,-509,-509,-509,-509,-509,-108,-105,-509,-509,-509',
'43,-509,-509,36,839,-509,61,62,-509,-509,63,-509,38,-509,222,-509,47',
'-509,-509,-509,-509,-509,-509,-509,23,-509,271,-509,805,91,83,85,86',
'87,89,862,619,-93,84,92,-509,-509,-509,-509,720,-509,65,-509,-104,81',
'88,90,-512,804,96,97,-108,-509,-509,-512,-512,-512,678,-106,-512,-512',
'-512,271,-512,-101,221,-92,-93,-105,222,-93,-512,271,-512,-512,-512',
'218,219,769,-102,-107,218,219,-512,-512,-93,-512,-512,-512,-512,-512',
'677,621,620,617,-97,-94,116,635,83,-96,222,115,-103,-107,-104,464,84',
'270,839,-108,-105,-94,693,-512,-512,-512,-512,-512,-512,-512,-512,-512',
'-512,-512,-512,-512,-512,-109,-95,-512,-512,-512,-92,-512,-512,-610',
'-421,-512,-110,749,-512,-512,749,-512,-104,-512,242,-512,270,-512,-512',
'-512,-512,-512,-512,-512,-104,-512,270,-512,634,-104,-111,592,-108,222',
'-96,-92,-90,-108,-92,-106,-512,-512,-512,-512,-106,-512,-94,-512,592',
'-105,-108,-91,-293,-92,-105,-110,-103,-512,-512,-293,-293,-293,-610',
'-95,-293,-293,-293,-105,-293,-96,-101,-97,-96,-611,592,-92,-520,749',
'-293,-293,-293,-94,-109,-520,-94,-107,592,-96,-293,-293,-107,-293,-293',
'-293,-293,-293,-111,-523,-95,-94,-102,-95,-106,-107,218,219,592,116',
'678,-109,116,-99,115,116,-109,115,-95,-93,115,-293,-293,-293,-293,-293',
'-293,-293,-293,-293,-293,-293,-293,-293,-293,-111,271,-293,-293,-293',
'-97,807,-293,551,677,-293,553,116,-293,-293,-611,-293,115,-293,538,-293',
'-101,-293,-293,-293,-293,-293,-293,-293,116,-293,839,-293,598,115,-610',
'-110,-103,94,95,-97,-110,-103,-97,116,-293,-293,-293,-293,115,-293,-101',
'-293,638,-98,116,-101,-614,-97,710,115,222,-293,-109,-614,-614,-614',
'116,-100,-614,-614,-614,115,-614,-95,-96,-110,218,219,678,-85,-102,-614',
'-614,-614,-614,-102,116,270,-524,952,273,115,-614,-614,-71,-614,-614',
'-614,-614,-614,94,95,411,-517,678,273,116,413,412,619,-517,115,677,-111',
'619,637,96,97,-111,551,273,-614,553,-614,-614,-614,-614,-614,-614,-614',
'-614,-614,-614,-614,-614,-614,-614,900,677,-614,-614,-614,-340,806,-614',
'-102,222,-614,619,-340,-614,-614,619,-614,710,-614,512,-614,-340,-614',
'-614,-614,-614,-614,-614,-614,222,-614,-614,-614,621,620,617,510,-614',
'621,620,622,651,96,97,-614,-614,-614,-614,-614,-610,-614,-293,-614,-614',
'619,577,261,-103,-293,-293,-293,-518,-614,-106,-293,-293,580,-293,-518',
'577,-340,-614,621,620,760,-509,621,620,761,-608,580,782,-509,-93,809',
'780,-269,-293,-293,-519,-293,-293,-293,-293,-293,222,-519,497,-104,588',
'587,572,-614,569,568,567,619,570,222,218,219,1022,619,588,587,621,620',
'639,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293',
'-293,-512,581,-293,-293,-293,497,657,-512,-607,899,-293,791,-608,-293',
'619,581,-512,624,-293,-268,-293,785,-293,-293,-293,-293,-293,-293,-293',
'784,-293,264,-293,764,-608,621,620,627,265,783,979,621,620,632,-614',
'-293,-293,998,-98,766,-293,-614,-614,-614,218,219,752,-614,-614,264',
'-614,-509,-293,-109,598,-512,265,-512,-509,-614,745,242,-515,-607,-512',
'621,620,-509,743,-515,-614,-614,742,-614,-614,-614,-614,-614,572,-285',
'569,568,567,540,570,-607,-285,741,765,-514,542,902,790,239,-523,-285',
'-514,241,240,462,726,-614,-614,-614,-614,-614,-614,-614,-614,-614,-614',
'-614,-614,-614,-614,529,-509,-614,-614,-614,-516,658,531,551,116,-614',
'553,-516,-614,115,905,528,-524,-614,-92,-614,-90,-614,-614,-614,-614',
'-614,-614,-614,-285,-614,-614,-614,541,-103,116,-101,116,116,908,115',
'864,115,115,-632,-614,-614,910,-95,538,-614,-632,-632,-632,868,839,-632',
'-632,-632,-91,-632,-522,-614,-106,551,530,-293,550,-522,-632,-632,-632',
'-294,-293,-102,588,587,-522,-611,-294,-632,-632,-293,-632,-632,-632',
'-632,-632,-294,-294,116,-99,912,764,-521,115,-294,868,839,222,763,-521',
'218,219,216,-294,-110,914,915,766,-521,-632,-632,-632,-632,-632,-632',
'-632,-632,-632,-632,-632,-632,-632,-632,733,-522,-632,-632,-632,731',
'-293,-632,729,273,-632,727,-294,-632,-632,710,-632,652,-632,726,-632',
'-100,-632,-632,-632,-632,-632,-632,-632,-294,-632,-632,-632,765,-521',
'923,-111,572,723,569,568,567,-267,570,-615,-632,-632,927,-632,929,-632',
'-615,-615,-615,930,222,-615,-615,-615,-96,-615,764,-632,242,726,933',
'459,935,979,-615,-615,-615,-615,461,-107,735,937,766,939,939,-615,-615',
'462,-615,-615,-615,-615,-615,976,-293,569,568,567,222,570,239,-293,222',
'945,241,240,-611,716,947,572,-293,569,568,567,715,570,-615,-615,-615',
'-615,-615,-615,-615,-615,-615,-615,-615,-615,-615,-615,949,765,-615',
'-615,-615,213,460,-615,710,544,-615,222,214,-615,-615,696,-615,735,-615',
'-85,-615,212,-615,-615,-615,-615,-615,-615,-615,-293,-615,-615,-615',
'572,222,569,568,567,577,570,119,120,121,122,123,-615,-615,-615,-615',
'580,-615,-286,-615,119,120,121,122,123,-286,-286,-286,222,-615,-286',
'-286,-286,222,-286,1028,222,215,575,242,242,959,1029,960,-286,-286,-286',
'585,584,588,587,1027,222,963,-286,-286,-270,-286,-286,-286,-286,-286',
'242,600,242,663,273,891,892,650,602,893,110,111,649,222,222,645,572',
'599,569,568,567,581,570,-286,-286,-286,-286,-286,-286,-286,-286,-286',
'-286,-286,-286,-286,-286,973,541,-286,-286,-286,-267,643,-286,636,980',
'-286,981,633,-286,-286,983,-286,735,-286,984,-286,630,-286,-286,-286',
'-286,-286,-286,-286,601,-286,626,-286,572,604,569,568,567,577,570,119',
'120,121,122,123,-286,-286,-286,-286,580,-286,-300,-286,119,120,121,122',
'123,-300,-300,-300,603,-286,-300,-300,-300,572,-300,569,568,567,575',
'570,403,598,512,555,-300,-300,554,585,584,588,587,1000,548,1002,-300',
'-300,1003,-300,-300,-300,-300,-300,572,242,569,568,567,539,570,1007',
'535,735,273,572,726,569,568,567,1012,570,738,1014,1016,581,1018,-300',
'-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,1018',
'735,-300,-300,-300,222,276,-300,532,276,-300,1025,735,-300,-300,524',
'-300,523,-300,222,-300,944,-300,-300,-300,-300,-300,-300,-300,242,-300',
'-70,-300,1030,512,572,1031,569,568,567,939,570,939,939,-616,-300,-300',
'1036,-300,510,-300,-616,-616,-616,1000,507,-616,-616,-616,242,-616,239',
'-300,273,497,241,240,237,238,-616,-616,-616,-616,735,221,256,257,466',
'465,463,-616,-616,738,-616,-616,-616,-616,-616,222,414,409,239,393,245',
'-611,241,240,237,238,-610,715,243,572,244,569,568,567,390,570,387,384',
'-616,-616,-616,-616,-616,-616,-616,-616,-616,-616,-616,-616,-616,-616',
'360,222,-616,-616,-616,321,1000,-616,320,1059,-616,1060,1061,-616,-616',
'735,-616,1062,-616,1018,-616,1018,-616,-616,-616,-616,-616,-616,-616',
'1018,-616,-616,-616,572,222,569,568,567,577,570,261,217,211,210,939',
'-616,-616,-616,-616,580,-616,-632,-616,1000,209,112,1018,,-632,-632',
'-632,,-616,-632,-632,-632,,-632,242,,,575,,,,,-632,-632,-632,,585,584',
'588,587,256,257,,-632,-632,,-632,-632,-632,-632,-632,976,,569,568,567',
'239,570,245,,241,240,237,238,,,243,,244,,,,581,,-632,-632,-632,-632',
'-632,-632,-632,-632,-632,-632,-632,-632,-632,-632,,242,-632,-632,-632',
',,-632,,273,-632,,,-632,-632,,-632,,-632,,-632,,-632,-632,-632,-632',
'-632,-632,-632,,-632,-632,-632,239,,,,241,240,237,238,,,,-431,-632,-632',
',-632,,-632,-431,-431,-431,,,-431,-431,-431,242,-431,,-632,,,,,,,-431',
'-431,-431,,,,256,257,,,,-431,-431,,-431,-431,-431,-431,-431,,,,239,',
'245,,241,240,237,238,,,243,,244,,,,,,,,-431,-431,-431,-431,-431,-431',
'-431,-431,-431,-431,-431,-431,-431,-431,,,-431,-431,-431,,,-431,,273',
'-431,,,-431,-431,,-431,,-431,,-431,,-431,-431,-431,-431,-431,-431,-431',
',-431,-431,-431,,,,,,,,,,,,,-431,-431,,-431,,-431,296,72,73,74,12,60',
',,,66,67,-431,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,664,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,',
'256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247',
'243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,-244,,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,646,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,664,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252',
'253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87',
'89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43',
',,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,298,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,298,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,222,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43',
',,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,298,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,,254',
'255,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
'249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,-633,-633,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252',
'253,248,250,,,254,255,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252',
'253,248,250,258,259,254,255,,-633,-633,,,256,257,,43,,,36,,,61,62,,',
'63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,242,-633,-633,-633,-633,248,250,,,-633,-633,,,,,,256,257,,43,,,36',
',,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,-633,-633,-633,-633,248,250,,,-633,-633,,,,,,256,257,',
'43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-633,-633,-633,-633,248,250,,,-633,-633,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,-633,-633,-633,-633,248,250,,,-633,-633,,,',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,242',
'61,62,,,63,,38,239,,245,47,241,240,237,238,256,257,243,23,244,,,,91',
'83,85,86,87,89,,,239,84,92,,241,240,237,238,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,-633,-633,-633,-633,248,250,,,-633,-633,,,',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,-633,-633,-633,-633,248,250,,,-633',
'-633,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,',
',,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43',
',,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,690,239,,245',
'47,241,240,237,238,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,',
'115,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,354',
',,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,990',
',,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,',
',,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,311,,,108,107,109,605,59,100,99,606,,102,110,111',
',94,95,,,,317,,,,,,,,,,,,,,,,,,,,607,,,233,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,',
'290,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,403,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,690,,283,,47,,,,,,,,232,,,,,91,286,85,86',
'87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,788,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,419,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,419,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86',
'87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,',
',,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,',
',,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47',
',,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,222,,,,,,65,,290,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,917,,,233,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,',
',233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,319',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,',
',,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,302,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,',
',,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,',
',,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,',
',,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,',
',,,,,,,,,,,,,,,,,,307,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,526,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,',
'234,,,,,,,311,,,108,107,109,605,59,100,99,606,,102,110,111,,94,95,,',
',317,,,,,,,,,,,,,,,,,,,,607,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,',
'234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63',
',38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,',
'32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62',
',,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,403,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,',
',,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,',
',,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,690,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,690,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,544,,61,62,,,63,,',
',,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86',
'87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,419,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,917,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,126,,128',
',,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193',
'183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186',
'179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170',
'166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200',
'173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192',
'194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178',
'169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,400,399,128,,401,,,,,,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,',
',,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,,',
',,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180',
'175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,369,368,370',
'367,172,191,190,,,,,,171,178,169,170,364,365,366,362,129,100,99,363',
',102,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,376,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182',
'203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195',
'202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168',
'127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,91,,,,-632,,,,,,92,-632,-632,-632,,,-632,-632',
'-632,158,-632,572,,569,568,567,577,570,,-632,-632,,,,,,,580,,,-632,-632',
',-632,-632,-632,-632,-632,572,,569,568,567,577,570,,,,,575,,,,,580,',
',,585,584,588,587,,,,,,,,,,,-632,,,,575,,,-632,,,,,273,-632,,588,587',
',,,,,581,,,495,433,,,496,,,,,-632,-632,,,161,162,,157,139,140,141,148',
'145,147,-632,581,142,143,,-632,,163,164,149,150,,,,,,273,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,572,165,569,568,567',
'577,570,,,495,433,,,496,,,580,,,,,158,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,575,163,164,149,150,,,,,,273,588,587,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,668,433,,,669,,581',
',,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,572,165,569,568,567,577,570,572,,569,568,567,577,570,,,580,,,,',
'158,,580,,,,,,,,,,,,,,,575,,,,,,,575,,755,433,588,587,756,,,,,588,587',
',,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,581,,,273,,,,581,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,666,433,,,667,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,572,165,569,568,567,577,570,572',
',569,568,567,577,570,,,580,,,,,158,,580,572,,569,568,567,577,570,,,',
',,,,575,,580,,,,,575,558,585,584,588,587,,,,585,584,588,587,,,,,575',
',,,,,,,,,,588,587,,,,670,440,,,671,581,,,,,,,581,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,581,163,164,149,150,,,,,,273,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,876,440,',
',877,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,495,433,,,496,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,443,433,,,444,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,670,440,,,671,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,572,165,569,568,567,577,570,,,668',
'433,,,669,,,580,,,,,158,161,162,,157,139,140,141,148,145,147,,,142,143',
',,575,163,164,149,150,,,,,,273,588,587,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,572,165,569,568,567,577,570,,,,,,581,,',
',580,,,,572,158,569,568,567,577,570,,,,,,,,,,580,,575,,,,,,,,,,,588',
'587,,,,,,,,575,1054,440,,,1055,,,,585,584,588,587,,161,162,,157,139',
'140,141,148,145,147,,581,142,143,,,,163,164,149,150,,,,,,273,,,,,581',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,1052',
'433,,,1053,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,572,165,569,568,567,577,570,572,,569,568,567,577',
'570,,,580,,,,,158,,580,,,,,,,,,,,,,,,575,,,,,,,575,,429,433,588,587',
'430,,,,,588,587,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,581,,,273,,,,581,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,666,433,,,667,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,1024',
'440,,,1023,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,436,440,,,435,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,572,165,569,568',
'567,577,570,,,,,,,,,,580,,,,,158,,,,,572,,569,568,567,577,570,,,,,,575',
'774,443,433,580,,444,,,585,584,588,587,,,161,162,,157,139,140,141,148',
'145,147,,575,142,143,,,,163,164,149,150,,588,587,,,273,,,,581,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,572,165,569,568,567',
'577,570,581,,,,,,,,,580,,,,,158,,,,,,,,,,,,,,,,,575,706,440,,,707,,',
',585,584,588,587,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,273,,,,,581,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,703,433,,,704,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,700',
'433,,,701,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,757,440,,,758,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,572,165,569,568',
'567,577,570,572,,569,568,567,577,570,,,580,,,,,158,,580,572,,569,568',
'567,577,570,,,,,,,,575,,580,,,,,575,774,585,584,588,587,,,,585,584,588',
'587,,,,,575,,,,,,,,,585,584,588,587,,,,,,,,,581,,,,,,,581,,,,,,,,,,',
',,,,,,581' ]
        racc_action_table = arr = ::Array.new(27024, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'98,772,772,772,772,772,772,98,98,98,772,772,98,98,98,772,98,772,772',
'772,772,772,772,772,98,557,98,98,98,772,772,772,772,772,772,772,98,98',
'772,98,98,98,98,98,772,772,1,772,772,772,772,772,772,772,772,772,700',
'772,772,772,751,772,772,611,772,772,772,98,98,98,98,98,98,98,98,98,98',
'98,98,98,98,444,443,98,98,98,772,98,98,772,746,98,772,772,98,98,772',
'98,772,98,739,98,772,98,98,98,98,98,98,98,772,98,64,98,667,772,772,772',
'772,772,772,737,514,700,772,772,98,98,98,98,557,98,772,98,1052,772,772',
'772,101,666,772,772,669,98,98,101,101,101,501,1054,101,101,101,312,101',
'351,22,834,700,668,722,700,101,29,101,101,101,713,713,611,352,667,771',
'771,101,101,700,101,101,101,101,101,501,514,514,514,444,443,611,391',
'80,701,22,611,874,1053,666,228,80,64,714,444,443,703,514,101,101,101',
'101,101,101,101,101,101,101,101,101,101,101,1055,706,101,101,101,834',
'101,101,1054,29,101,603,594,101,101,875,101,755,101,712,101,312,101',
'101,101,101,101,101,101,1052,101,29,101,391,1052,228,926,669,713,701',
'834,351,669,834,1054,101,101,101,101,1054,101,703,101,948,668,669,352',
'671,834,668,1030,1067,101,101,671,671,671,706,706,671,671,671,668,671',
'701,987,704,701,1055,345,874,366,595,671,671,671,703,758,366,703,1053',
'344,701,671,671,1053,671,671,671,671,671,355,225,706,703,988,706,757',
'756,777,777,873,594,502,1055,875,603,594,770,1055,875,706,755,770,671',
'671,671,671,671,671,671,671,671,671,671,671,671,671,991,681,671,671',
'671,704,671,671,338,502,671,338,926,671,671,758,671,926,671,463,671',
'225,671,671,671,671,671,671,671,948,671,1005,671,1005,948,757,1030,1067',
'44,44,704,1030,1067,704,595,671,671,671,671,595,671,987,671,394,758',
'345,987,670,704,709,345,777,671,671,670,670,670,344,355,670,670,670',
'344,670,757,756,463,457,457,493,695,988,670,670,670,670,988,873,681',
'226,873,708,873,670,670,695,670,670,670,670,670,317,317,126,367,682',
'705,293,126,126,378,367,293,493,991,380,394,44,44,991,718,702,876,718',
'670,670,670,670,670,670,670,670,670,670,670,670,670,670,808,682,670',
'670,670,49,670,670,226,699,670,631,49,670,670,628,670,697,670,689,670',
'49,670,670,670,670,670,670,670,457,670,670,670,378,378,378,687,876,380',
'380,380,429,317,317,876,670,670,670,670,876,670,435,670,876,396,902',
'680,808,435,435,435,365,670,670,435,435,902,435,365,723,49,876,631,631',
'607,362,628,628,607,606,723,631,362,429,674,628,787,435,435,364,435',
'435,435,435,435,672,364,659,429,902,902,944,876,944,944,944,385,944',
'974,329,329,974,388,723,723,396,396,396,435,435,435,435,435,435,435',
'435,435,435,435,435,435,435,606,902,435,435,435,653,435,606,605,792',
'435,648,606,435,382,723,606,382,435,644,435,640,435,435,435,435,435',
'435,435,638,435,27,435,978,606,385,385,385,27,635,978,388,388,388,436',
'435,435,944,435,978,435,436,436,436,20,20,597,436,436,372,436,605,435',
'435,596,606,372,363,605,436,591,469,369,605,363,382,382,605,589,369',
'436,436,586,436,436,436,436,436,738,308,738,738,738,323,738,605,308',
'582,978,368,323,810,647,469,41,308,368,469,469,323,811,436,436,436,436',
'436,436,436,436,436,436,436,436,436,436,306,605,436,436,436,370,436',
'306,334,348,436,334,370,436,348,813,306,42,436,647,436,41,436,436,436',
'436,436,436,436,308,436,436,436,323,647,775,41,5,957,814,775,738,5,957',
'431,436,436,815,436,321,436,431,431,431,744,744,431,431,431,42,431,305',
'436,436,333,306,877,333,305,431,431,431,532,877,42,726,726,305,877,532',
'431,431,877,431,431,431,431,431,532,761,883,321,817,609,304,883,761',
'1038,1038,818,609,304,343,343,18,761,321,819,820,609,304,431,431,431',
'431,431,431,431,431,431,431,431,431,431,431,574,305,431,431,431,565',
'877,431,564,431,431,563,532,431,431,833,431,430,431,561,431,18,431,431',
'431,431,431,431,431,761,431,431,431,609,304,837,18,864,560,864,864,864',
'840,864,440,431,431,841,431,845,431,440,440,440,846,847,440,440,440',
'430,440,916,431,470,848,852,224,853,916,440,440,440,440,224,430,864',
'855,916,856,858,440,440,224,440,440,440,440,440,914,707,914,914,914',
'861,914,470,707,547,863,470,470,707,546,866,945,707,945,945,945,545',
'945,440,440,440,440,440,440,440,440,440,440,440,440,440,440,869,916',
'440,440,440,17,224,440,536,533,440,527,17,440,440,525,440,945,440,522',
'440,17,440,440,440,440,440,440,440,707,440,440,440,677,521,677,677,677',
'677,677,295,295,295,295,295,440,440,440,440,677,440,59,440,694,694,694',
'694,694,59,59,59,504,440,59,59,59,879,59,989,503,17,677,474,473,884',
'989,885,59,59,59,677,677,677,677,989,886,895,59,59,896,59,59,59,59,59',
'472,353,471,449,437,778,778,428,353,778,778,778,427,677,424,420,1000',
'353,1000,1000,1000,677,1000,59,59,59,59,59,59,59,59,59,59,59,59,59,59',
'913,989,59,59,59,418,415,59,393,917,59,918,390,59,59,920,59,1000,59',
'921,59,387,59,59,59,59,59,59,59,353,59,384,59,558,356,558,558,558,558',
'558,9,9,9,9,9,59,59,59,59,558,59,31,59,520,520,520,520,520,31,31,31',
'354,59,31,31,31,735,31,735,735,735,558,735,350,349,339,336,31,31,335',
'558,558,558,558,946,331,950,31,31,951,31,31,31,31,31,998,325,998,998',
'998,322,998,956,318,735,316,862,964,862,862,862,967,862,735,968,969',
'558,970,31,31,31,31,31,31,31,31,31,31,31,31,31,31,972,998,31,31,31,311',
'310,31,307,31,31,982,862,31,31,301,31,300,31,299,31,862,31,31,31,31',
'31,31,31,488,31,297,31,990,284,575,993,575,575,575,994,575,995,996,441',
'31,31,997,31,281,31,441,441,441,999,280,441,441,441,479,441,488,31,269',
'266,488,488,488,488,441,441,441,441,575,234,479,479,230,229,227,441',
'441,575,441,441,441,441,441,754,207,124,479,90,479,1023,479,479,479',
'479,1024,1026,479,1036,479,1036,1036,1036,89,1036,88,87,441,441,441',
'441,441,441,441,441,441,441,441,441,441,441,72,48,441,441,441,43,1037',
'441,40,1042,441,1043,1044,441,441,1036,441,1045,441,1046,441,1047,441',
'441,441,441,441,441,441,1048,441,441,441,729,1051,729,729,729,729,729',
'25,19,16,15,1056,441,441,441,441,729,441,442,441,1057,13,3,1069,,442',
'442,442,,441,442,442,442,,442,480,,,729,,,,,442,442,442,,729,729,729',
'729,480,480,,442,442,,442,442,442,442,442,1022,,1022,1022,1022,480,1022',
'480,,480,480,480,480,,,480,,480,,,,729,,442,442,442,442,442,442,442',
'442,442,442,442,442,442,442,,489,442,442,442,,,442,,442,442,,,442,442',
',442,,442,,442,,442,442,442,442,442,442,442,,442,442,442,489,,,,489',
'489,489,489,,,,30,442,442,,442,,442,30,30,30,,,30,30,30,482,30,,442',
',,,,,,30,30,30,,,,482,482,,,,30,30,,30,30,30,30,30,,,,482,,482,,482',
'482,482,482,,,482,,482,,,,,,,,30,30,30,30,30,30,30,30,30,30,30,30,30',
'30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30,,30,,30,30,30,30,30,30,30',
',30,30,30,,,,,,,,,,,,,30,30,,30,,30,773,773,773,773,773,773,,,,773,773',
'30,,,773,,773,773,773,773,773,773,773,,,,,,773,773,773,773,773,773,773',
',,773,,,,,452,773,773,,773,773,773,773,773,773,773,773,773,,773,773',
'773,,773,773,,773,773,773,452,452,452,452,452,452,452,452,452,452,452',
',452,452,,,452,452,,773,,,773,,,773,773,,,773,,773,452,,452,773,452',
'452,452,452,452,452,452,773,452,,,,773,773,773,773,773,773,,,,773,773',
',452,,452,,,773,,,773,773,773,,,773,773,880,880,880,880,880,880,,,,880',
'880,,,,880,,880,880,880,880,880,880,880,,,,,,880,880,880,880,880,880',
'880,,,880,,,,,423,880,880,,880,880,880,880,880,880,880,880,880,,880',
'880,880,,880,880,,880,880,880,423,423,423,423,423,423,423,423,423,423',
'423,,423,423,,,423,423,,880,,,880,,,880,880,,,880,,880,423,,423,880',
'423,423,423,423,423,423,423,880,423,,,,880,880,880,880,880,880,,,,880',
'880,,423,,,,,880,,,880,880,880,,,880,880,953,953,953,953,953,953,,,',
'953,953,,,,953,,953,953,953,953,953,953,953,,,,,,953,953,953,953,953',
'953,953,,,953,,,,,673,953,953,,953,953,953,953,953,953,953,953,953,',
'953,953,953,,953,953,,953,953,953,673,673,673,673,673,673,673,673,673',
'673,673,,673,673,,,673,673,,953,,,953,,,953,953,,,953,,953,673,,673',
'953,673,673,673,673,673,673,673,953,673,,,,953,953,953,953,953,953,',
',,953,953,,673,,,,,953,,,953,953,953,,,953,953,871,871,871,871,871,871',
',,,871,871,,,,871,,871,871,871,871,871,871,871,,,,,,871,871,871,871',
'871,871,871,,,871,,,,,,871,871,,871,871,871,871,871,871,871,871,871',
',871,871,871,,871,871,,871,871,871,796,796,796,796,796,796,796,796,796',
'796,796,,796,796,,,796,796,,871,,,871,,,871,871,,,871,,871,796,,796',
'871,796,796,796,796,796,796,796,871,796,,,,871,871,871,871,871,871,',
',,871,871,,796,,,,,871,,,871,871,871,,,871,871,870,870,870,870,870,870',
',,,870,870,,,,870,,870,870,870,870,870,870,870,,,,,,870,870,870,870',
'870,870,870,,,870,,,,,,870,870,,870,870,870,870,870,870,870,870,870',
',870,870,870,,870,870,,870,870,870,901,901,901,901,901,901,901,901,901',
'901,901,,901,901,,,901,901,,870,,,870,,,870,870,,,870,,870,901,,901',
'870,901,901,901,901,901,901,901,870,901,,,,870,870,870,870,870,870,',
',,870,870,,901,,,,,870,,,870,870,870,,,870,870,303,303,303,303,303,303',
',,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303',
'303,303,303,,,303,,,,,,303,303,,303,303,303,303,303,303,303,303,303',
',303,303,303,,303,303,,303,303,303,799,799,799,799,799,799,799,799,799',
'799,799,,799,799,,,799,799,,303,,,303,,,303,303,,,303,,303,799,,799',
'303,799,799,799,799,799,799,799,303,799,,,,303,303,303,303,303,303,',
',,303,303,,799,,,,,303,,,303,303,303,,,303,303,779,779,779,779,779,779',
',,,779,779,,,,779,,779,779,779,779,779,779,779,,,,,,779,779,779,779',
'779,779,779,,,779,,,,,,779,779,,779,779,779,779,779,779,779,779,779',
',779,779,779,,779,779,,779,779,779,447,447,447,447,447,447,447,447,447',
'447,447,,447,447,,,447,447,,779,,,779,,,779,779,,,779,,779,447,,447',
'779,447,447,447,447,447,447,447,779,447,,,,779,779,779,779,779,779,',
',,779,779,,447,,,,,779,,,779,779,779,,,779,779,328,328,328,328,328,328',
',,,328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328',
'328,328,328,,,328,,,,,,328,328,,328,328,328,328,328,328,328,328,328',
',328,328,328,,328,328,,328,328,328,801,801,801,801,801,801,801,801,801',
'801,801,,801,801,,,801,801,,328,,,328,,,328,328,,,328,,328,801,,801',
'328,801,801,801,801,801,801,801,328,801,,,,328,328,328,328,328,328,',
',,328,328,,801,,,,,328,,,328,328,328,,,328,328,720,720,720,720,720,720',
',,,720,720,,,,720,,720,720,720,720,720,720,720,,,,,,720,720,720,720',
'720,720,720,,,720,,,,,,720,720,,720,720,720,720,720,720,720,720,720',
',720,720,720,,720,720,,720,720,720,803,803,803,803,803,803,803,803,803',
'803,803,,803,803,,,803,803,,720,,,720,,,720,720,,,720,,720,803,,803',
'720,803,803,803,803,803,803,803,720,803,,,,720,720,720,720,720,720,',
',,720,720,,803,,,,,720,,,720,720,720,,,720,720,986,986,986,986,986,986',
',,,986,986,,,,986,,986,986,986,986,986,986,986,,,,,,986,986,986,986',
'986,986,986,,,986,,,,,,986,986,,986,986,986,986,986,986,986,986,986',
',986,986,986,,986,986,,986,986,986,278,278,278,278,278,278,278,278,278',
'278,278,,278,278,,,278,278,,986,,,986,,,986,986,,,986,,986,278,,278',
'986,278,278,278,278,278,278,278,986,278,,,,986,986,986,986,986,986,',
',,986,986,,278,,,,,986,,,986,986,986,,,986,986,298,298,298,298,298,298',
',,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298,298,298,298',
'298,298,298,,,298,,,,,,298,298,,298,298,298,298,298,298,298,298,298',
',298,298,298,,298,298,,298,298,298,492,492,492,492,492,492,492,492,492',
'492,492,,492,492,,,492,492,,298,,,298,,,298,298,,,298,,298,492,,492',
'298,492,492,492,492,492,492,492,298,492,,,,298,298,298,298,298,298,',
',,298,298,492,492,,,,,298,,,298,298,298,,,298,298,839,839,839,839,839',
'839,,,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,,839,839,839',
'839,839,839,839,,,839,,,,,,839,839,,839,839,839,839,839,839,839,839',
'839,,839,839,839,,839,839,,839,839,839,711,711,711,711,711,711,711,711',
'711,711,711,,711,711,,,711,711,,839,,,839,,,839,839,,,839,,839,711,',
'711,839,711,711,711,711,711,711,711,839,711,,,,839,839,839,839,839,839',
',,,839,839,,711,,,,,839,,,839,839,839,,,839,839,36,36,36,36,36,36,,',
',36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,',
',,,36,36,,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,794',
'794,794,794,794,794,794,794,794,794,794,,794,794,,,794,794,,36,,,36',
',,36,36,,,36,,36,794,,794,36,794,794,794,794,794,794,794,36,794,,,,36',
'36,36,36,36,36,,,,36,36,,794,,,,,36,,,36,36,36,,,36,36,829,829,829,829',
'829,829,,,,829,829,,,,829,,829,829,829,829,829,829,829,,,,,,829,829',
'829,829,829,829,829,,,829,,,,,,829,829,,829,829,829,829,829,829,829',
'829,829,,829,829,829,,829,829,,829,829,829,789,789,789,789,789,789,789',
'789,789,789,789,,789,789,,,789,789,,829,,,829,,,829,829,,,829,,829,789',
',789,829,789,789,789,789,789,789,789,829,789,,,,829,829,829,829,829',
'829,,,,829,829,,789,,,,,829,,,829,829,829,,,829,829,828,828,828,828',
'828,828,,,,828,828,,,,828,,828,828,828,828,828,828,828,,,,,,828,828',
'828,828,828,828,828,,,828,,,,,,828,828,,828,828,828,828,828,828,828',
'828,828,,828,828,828,,828,828,,828,828,828,24,24,24,24,24,24,24,24,24',
'24,24,,24,24,,,24,24,,828,,,828,,,828,828,,,828,,828,24,,24,828,24,24',
'24,24,24,24,24,828,24,,,,828,828,828,828,828,828,,,,828,828,,24,,,,',
'828,,,828,828,828,,,828,828,824,824,824,824,824,824,,,,824,824,,,,824',
',824,824,824,824,824,824,824,,,,,,824,824,824,824,824,824,824,,,824',
',,,,,824,824,,824,824,824,824,824,824,824,824,824,,824,824,824,,824',
'824,,824,824,824,898,898,898,898,898,898,898,898,898,898,898,,898,898',
',,898,898,,824,,,824,,,824,824,,,824,,824,898,,898,824,898,898,898,898',
'898,898,898,824,898,,,,824,824,824,824,824,824,,,,824,824,,898,,,,,824',
',,824,824,824,,,824,824,721,721,721,721,721,721,,,,721,721,,,,721,,721',
'721,721,721,721,721,721,,,,,,721,721,721,721,721,721,721,,,721,,,,,',
'721,721,,721,721,721,721,721,721,721,721,721,,721,721,721,,721,721,',
'721,721,721,543,543,543,543,543,543,543,543,543,543,543,,543,543,,,543',
'543,,721,,,721,,,721,721,,,721,,721,543,,543,721,543,543,543,543,543',
'543,543,721,543,,,,721,721,721,721,721,721,,,,721,721,,543,,,,,721,',
',721,721,721,,,721,721,409,409,409,409,409,409,,,,409,409,,,,409,,409',
'409,409,409,409,409,409,,,,,,409,409,409,409,409,409,409,,,409,,,,,',
'409,409,409,409,409,409,409,409,409,409,409,409,,409,409,409,,409,409',
',409,409,409,491,491,491,491,491,491,491,491,,491,491,,,,,,491,491,',
'409,,,409,,,409,409,,,409,,409,491,,491,409,491,491,491,491,491,491',
'491,409,491,,,,409,409,409,409,409,409,,,,409,409,,,,,,,409,,,409,409',
'409,,,409,409,1001,1001,1001,1001,1001,1001,,,,1001,1001,,,,1001,,1001',
'1001,1001,1001,1001,1001,1001,,,,,,1001,1001,1001,1001,1001,1001,1001',
',,1001,,,,,,1001,1001,,1001,1001,1001,1001,1001,1001,1001,1001,1001',
',1001,1001,1001,,1001,1001,,1001,1001,1001,467,467,467,467,467,467,467',
'467,467,467,467,,467,467,,,467,467,,1001,,,1001,,,1001,1001,,,1001,',
'1001,467,,467,1001,467,467,467,467,467,467,467,1001,467,,,,1001,1001',
'1001,1001,1001,1001,,,,1001,1001,,,,,,,1001,,,1001,1001,1001,,,1001',
'1001,1006,1006,1006,1006,1006,1006,,,,1006,1006,,,,1006,,1006,1006,1006',
'1006,1006,1006,1006,,,,,,1006,1006,1006,1006,1006,1006,1006,,,1006,',
',,,,1006,1006,,1006,1006,1006,1006,1006,1006,1006,1006,1006,,1006,1006',
'1006,,1006,1006,,1006,1006,1006,490,490,490,490,490,490,490,,,490,490',
',,,,,490,490,,1006,,,1006,,,1006,1006,,,1006,,1006,490,,490,1006,490',
'490,490,490,490,490,490,1006,490,,,,1006,1006,1006,1006,1006,1006,,',
',1006,1006,,,,,,,1006,,,1006,1006,1006,,,1006,1006,233,233,233,233,233',
'233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233',
'233,233,233,233,,,233,,,,,,233,233,,233,233,233,233,233,233,233,233',
'233,,233,233,233,,233,233,,233,233,233,468,468,468,468,468,468,468,468',
'468,468,468,,468,468,,,468,468,,233,,,233,,,233,233,,,233,,233,468,',
'468,233,468,468,468,468,468,468,468,233,468,,,,233,233,233,233,233,233',
',,,233,233,,,,,,,233,,,233,233,233,,,233,233,1009,1009,1009,1009,1009',
'1009,,,,1009,1009,,,,1009,,1009,1009,1009,1009,1009,1009,1009,,,,,,1009',
'1009,1009,1009,1009,1009,1009,,,1009,,,,,,1009,1009,,1009,1009,1009',
'1009,1009,1009,1009,1009,1009,,1009,1009,1009,,1009,1009,,1009,1009',
'1009,478,478,478,478,478,478,478,,,478,478,,,,,,478,478,,1009,,,1009',
',,1009,1009,,,1009,,1009,478,,478,1009,478,478,478,478,478,478,478,1009',
'478,,,,1009,1009,1009,1009,1009,1009,,,,1009,1009,,,,,,,1009,,,1009',
'1009,1009,,,1009,1009,1010,1010,1010,1010,1010,1010,,,,1010,1010,,,',
'1010,,1010,1010,1010,1010,1010,1010,1010,,,,,,1010,1010,1010,1010,1010',
'1010,1010,,,1010,,,,,,1010,1010,,1010,1010,1010,1010,1010,1010,1010',
'1010,1010,,1010,1010,1010,,1010,1010,,1010,1010,1010,487,487,487,487',
'487,487,487,,,487,487,,,,,,487,487,,1010,,,1010,,,1010,1010,,,1010,',
'1010,487,,487,1010,487,487,487,487,487,487,487,1010,487,,,,1010,1010',
'1010,1010,1010,1010,,,,1010,1010,,,,,,,1010,,,1010,1010,1010,,,1010',
'1010,590,590,590,590,590,590,,,,590,590,,,,590,,590,590,590,590,590',
'590,590,,,,,,590,590,590,590,590,590,590,,,590,,,,,,590,590,,590,590',
'590,590,590,590,590,590,590,,590,590,590,,590,590,,590,590,590,486,486',
'486,486,486,486,486,,,486,486,,,,,,486,486,,590,,,590,,,590,590,,,590',
',590,486,,486,590,486,486,486,486,486,486,486,590,486,,,,590,590,590',
'590,590,590,,,,590,590,,,,,,,590,,,590,590,590,,,590,590,593,593,593',
'593,593,593,,,,593,593,,,,593,,593,593,593,593,593,593,593,,,,,,593',
'593,593,593,593,593,593,,,593,,,,,,593,593,,593,593,593,593,593,593',
'593,593,593,,593,593,593,,593,593,,593,593,593,484,484,484,484,484,484',
'484,,,484,484,,,,,,484,484,,593,,,593,,,593,593,,,593,,593,484,,484',
'593,484,484,484,484,484,484,484,593,484,,,,593,593,593,593,593,593,',
',,593,593,,,,,,,593,,,593,593,593,,,593,593,919,919,919,919,919,919',
',,,919,919,,,,919,,919,919,919,919,919,919,919,,,,,,919,919,919,919',
'919,919,919,,,919,,,,,,919,919,,919,919,919,919,919,919,919,919,919',
',919,919,919,,919,919,,919,919,919,481,,,,,,,,,,,,,,,,481,481,,919,',
',919,,477,919,919,,,919,,919,481,,481,919,481,481,481,481,477,477,481',
'919,481,,,,919,919,919,919,919,919,,,477,919,919,,477,477,477,477,,919',
',,919,919,919,,,919,919,209,209,209,209,209,209,,,,209,209,,,,209,,209',
'209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,',
'209,209,,209,209,209,209,209,209,209,209,209,,209,209,209,,209,209,',
'209,209,209,483,483,483,483,483,483,483,,,483,483,,,,,,483,483,,209',
',,209,,,209,209,,,209,,209,483,,483,209,483,483,483,483,483,483,483',
'209,483,,,,209,209,209,209,209,209,,,,209,209,,,,,,,209,,,209,209,209',
',,209,209,923,923,923,923,923,923,,,,923,923,,,,923,,923,923,923,923',
'923,923,923,,,,,,923,923,923,923,923,923,923,,,923,,,,,,923,923,,923',
'923,923,923,923,923,923,923,923,,923,923,923,,923,923,,923,923,923,485',
'485,485,485,485,485,485,,,485,485,,,,,,485,485,,923,,,923,,,923,923',
',,923,,923,485,,485,923,485,485,485,485,485,485,485,923,485,,,,923,923',
'923,923,923,923,,,,923,923,,,,,,,923,,,923,923,923,,,923,923,2,2,2,2',
'2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2',
'2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,476,,,,,,,,,,,,,,,,476,476,,2,,,2,',
',2,2,,,2,,2,476,,476,2,476,476,476,476,,,,2,,,,,2,2,2,2,2,2,,,,2,2,',
',,,,,2,,,2,2,2,,,2,2,550,550,550,,550,,,,550,550,,,,550,,550,550,550',
'550,550,550,550,,,,,,550,550,550,550,550,550,550,,,550,,,,,,,550,,,550',
'550,550,550,550,550,550,550,550,550,550,550,,550,550,,550,550,550,475',
',,,,,,,,,,,,,,,475,475,,550,,,550,,,550,550,,,550,,550,475,,475,550',
'475,475,475,475,,,,550,,,,,550,550,550,550,550,550,,,,550,550,,,,,,',
'550,,550,550,550,550,,,550,550,66,66,66,,66,,,,66,66,,,,66,,66,66,66',
'66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66,66',
'66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66',
'66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,,66,,',
'66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,',
',,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67',
'67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,',
'67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67',
'67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70',
'70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70',
'70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,',
'70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,,,70,70,71,71,71',
',71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,',
',71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,,,,,',
',,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71,71',
'71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,657,657,657,,657,,,,657,657',
',,,657,,657,657,657,657,657,657,657,,,,,,657,657,657,657,657,657,657',
',,657,,,,,,,657,,,657,657,657,657,657,657,657,657,,657,657,657,,657',
'657,,657,657,657,,,,,,,,,,,,,,,,,,,,657,,,657,,,657,657,,,657,,,,,,657',
',,,,,,,657,,,,,657,657,657,657,657,657,,,,657,657,,,,,,,657,,,657,657',
'657,,,657,657,927,927,927,,927,,,,927,927,,,,927,,927,927,927,927,927',
'927,927,,,,,,927,927,927,927,927,927,927,,,927,,,,,,,927,,,927,927,927',
'927,927,927,927,927,,927,927,927,,927,927,,,,927,,,,,,,,,,,,,,,,,,,',
'927,,,927,,,927,927,,,927,,,,,,,,,,,,,,,,,,,927,927,927,927,927,927',
',,,927,927,,,,,,,927,,,927,927,927,,,927,927,790,790,790,,790,,,,790',
'790,,,,790,,790,790,790,790,790,790,790,,,,,,790,790,790,790,790,790',
'790,,,790,,,,,,,790,,,790,790,790,790,790,790,790,790,,790,790,790,',
'790,790,,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790,,',
',,,790,,,,,,,,790,,,,,790,790,790,790,790,790,,,,790,790,,,,,,,790,',
',790,790,790,,,790,790,652,652,652,,652,,,,652,652,,,,652,,652,652,652',
'652,652,652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,,,652,,,652',
'652,652,652,652,652,652,652,,652,652,652,,652,652,,652,652,652,,,,,',
',,,,,,,,,,,,,,652,,,652,,,652,652,,,652,,,,,,652,,,,,,,,652,,,,,652',
'652,652,652,652,652,,,,652,652,,,,,,,652,,,652,652,652,,,652,652,651',
'651,651,,651,,,,651,651,,,,651,,651,651,651,651,651,651,651,,,,,,651',
'651,651,651,651,651,651,,,651,,,,,,,651,,,651,651,651,651,651,651,651',
'651,,651,651,651,,651,651,,651,651,651,,,,,,,,,,,,,,,,,,,,651,,,651',
',,651,651,,,651,,,,,,651,,,,,,,,651,,,,,651,651,651,651,651,651,,,,651',
'651,,,,,,,651,,,651,651,651,,,651,651,1027,1027,1027,,1027,,,,1027,1027',
',,,1027,,1027,1027,1027,1027,1027,1027,1027,,,,,,1027,1027,1027,1027',
'1027,1027,1027,,,1027,,,,,,,1027,,,1027,1027,1027,1027,1027,1027,1027',
'1027,1027,1027,1027,1027,,1027,1027,,1027,1027,1027,,,,,,,,,,,,,,,,',
',,,1027,,,1027,,,1027,1027,,,1027,,1027,,1027,,1027,,,,,,,,1027,,,,',
'1027,1027,1027,1027,1027,1027,,,,1027,1027,,,,,,,1027,,1027,1027,1027',
'1027,,,1027,1027,650,650,650,,650,,,,650,650,,,,650,,650,650,650,650',
'650,650,650,,,,,,650,650,650,650,650,650,650,,,650,,,,,,,650,,,650,650',
'650,650,650,650,650,650,650,650,650,650,,650,650,,650,650,650,,,,,,',
',,,,,,,,,,,,,650,,,650,,,650,650,,,650,,,,650,,650,,,,,,,,650,,,,,650',
'650,650,650,650,650,,,,650,650,,,,,,,650,,650,650,650,650,,,650,650',
'361,361,361,,361,,,,361,361,,,,361,,361,361,361,361,361,361,361,,,,',
',361,361,361,361,361,361,361,,,361,,,,,,,361,,,361,361,361,361,361,361',
'361,361,,361,361,361,,361,361,,,,361,,,,,,,,,,,,,,,,,,,,361,,,361,,',
'361,361,,,361,,,,,,,,,,,,,,,,,,,361,361,361,361,361,361,,,,361,361,',
',,,,,361,,,361,361,361,,,361,361,63,63,63,,63,,,,63,63,,,,63,,63,63',
'63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63',
'63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63',
',,63,63,,,63,,,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63,,,,63,63,,,,,,',
'63,,63,63,63,63,,,63,63,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62',
'62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62',
'62,62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,',
',62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62',
'62,62,62,,,62,62,114,114,114,114,114,,,,114,114,,,,114,,114,114,114',
'114,114,114,114,,,,,,114,114,114,114,114,114,114,,,114,,,,,,114,114',
'114,114,114,114,114,114,114,114,114,114,,114,114,114,,114,114,,114,114',
'114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,',
'114,,,,,114,114,114,114,114,114,,,,114,114,,,,,,114,114,,,114,114,114',
',,114,114,119,119,119,,119,,,,119,119,,,,119,,119,119,119,119,119,119',
'119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119',
'119,119,119,119,,119,119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,',
',,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119',
'119,119,,,,119,119,,,,,,,119,,,119,119,119,,,119,119,120,120,120,,120',
',,,120,120,,,,120,,120,120,120,120,120,120,120,,,,,,120,120,120,120',
'120,120,120,,,120,,,,,,,120,,,120,120,120,120,120,120,120,120,,120,120',
'120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120',
',,,,,120,,,,,,,,120,,,,,120,120,120,120,120,120,,,,120,120,,,,,,,120',
',,120,120,120,,,120,120,121,121,121,,121,,,,121,121,,,,121,,121,121',
'121,121,121,121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121',
',,121,121,121,121,121,121,121,121,,121,121,121,,121,121,,121,121,121',
',,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,',
',121,121,121,121,121,121,,,,121,121,,,,,,,121,,,121,121,121,,,121,121',
'122,122,122,,122,,,,122,122,,,,122,,122,122,122,122,122,122,122,,,,',
',122,122,122,122,122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122',
'122,122,,122,122,122,,122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,',
'122,,,122,122,,,122,,,,,,122,,,,,,,,122,,,,,122,122,122,122,122,122',
',,,122,122,,,,,,,122,,,122,122,122,,,122,122,123,123,123,123,123,,,',
'123,123,,,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123',
'123,123,,,123,,,,,,123,123,,123,123,123,123,123,123,123,123,123,,123',
'123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123',
',,123,,123,,,,123,,,,,,,,123,,,,,123,123,123,123,123,123,,,,123,123',
',,,,,,123,,,123,123,123,,,123,123,649,649,649,,649,,,,649,649,,,,649',
',649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649,649,,,649',
',,,,,,649,,,649,649,649,649,649,649,649,649,649,649,649,649,,649,649',
',649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,649,,649',
',649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,,,,,,,649,,649',
'649,649,649,,,649,649,646,646,646,,646,,,,646,646,,,,646,,646,646,646',
'646,646,646,646,,,,,,646,646,646,646,646,646,646,,,646,,,,,,,646,,,646',
'646,646,646,646,646,646,646,,646,646,646,,646,646,,646,646,646,,,,,',
',,,,,,,,,,,,,,646,,,646,,,646,646,,,646,,,,,,646,,,,,,,,646,,,,,646',
'646,646,646,646,646,,,,646,646,,,,,,,646,,,646,646,646,,,646,646,645',
'645,645,,645,,,,645,645,,,,645,,645,645,645,645,645,645,645,,,,,,645',
'645,645,645,645,645,645,,,645,,,,,,,645,,,645,645,645,645,645,645,645',
'645,,645,645,645,,645,645,,645,645,645,,,,,,,,,,,,,,,,,,,,645,,,645',
',,645,645,,,645,,645,,,,645,,,,,,,,645,,,,,645,645,645,645,645,645,',
',,645,645,,,,,,,645,,,645,645,645,,,645,645,61,61,61,,61,,,,61,61,,',
',61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,',
'61,61,61,61,61,61,61,61,,61,61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,',
',,61,,,61,,,61,61,,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61',
'61,61,,,,,,61,,,61,61,61,,,61,61,210,210,210,,210,,,,210,210,,,,210',
',210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210',
',,,,,,210,,,210,210,210,210,210,210,210,210,,210,210,210,,210,210,,210',
'210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,,,210,,,',
',,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,,,210,210,210',
',,210,210,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211,211',
'211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211',
'211,211,211,211,,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,',
',,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211,,,,,211,211,211,211',
'211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211,211,212,212,212,,212',
',,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212',
'212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212',
'212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212',
',,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212',
',,,,,,212,,212,212,212,212,,,212,212,216,216,216,,216,,,,216,216,,,',
'216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,',
'216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216,,216,216',
',216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,',
',,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,,,,,,,216,,,216,216',
'216,,,216,216,616,616,616,,616,,,,616,616,,,,616,,616,616,616,616,616',
'616,616,,,,,,616,616,616,616,616,616,616,,,616,,,,,,,616,,,616,616,616',
'616,616,616,616,616,,616,616,616,,616,616,,616,616,616,,,,,,,,,,,,,',
',,,,,,616,,,616,,,616,616,,,616,,,,,,616,,,,,,,,616,,,,,616,616,616',
'616,616,616,,,,616,616,,,,,,,616,,,616,616,616,,,616,616,612,612,612',
',612,,,,612,612,,,,612,,612,612,612,612,612,612,612,,,,,,612,612,612',
'612,612,612,612,,,612,,,,,,,612,,,612,612,612,612,612,612,612,612,,612',
'612,612,,612,612,,612,612,612,,,,,,,,,,,,,,,,,,,,612,,,612,,,612,612',
',,612,,,,,,612,,,,,,,,612,,,,,612,612,612,612,612,612,,,,612,612,,,',
',,,612,,,612,612,612,,,612,612,599,599,599,,599,,,,599,599,,,,599,,599',
'599,599,599,599,599,599,,,,,,599,599,599,599,599,599,599,,,599,,,,,',
',599,,,599,599,599,599,599,599,599,599,599,599,599,599,,599,599,,599',
'599,599,,,,,,,,,,,,,,,,,,,,599,,,599,,,599,599,,,599,,599,,599,,599',
',,,,,,,599,,,,,599,599,599,599,599,599,,,,599,599,,,,,,,599,,599,599',
'599,599,,,599,599,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217',
'217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217',
'217,217,217,217,217,217,,217,217,217,,217,217,,217,217,217,,,,,,,,,',
',,,,,,,,,,217,,,217,,,217,217,,,217,,217,,,,217,,,,,,,,217,,,,,217,217',
'217,217,217,217,,,,217,217,,,,,,,217,,,217,217,217,,,217,217,218,218',
'218,,218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218',
'218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218',
',218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218',
'218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218',
',,,,,,218,,,218,218,218,,,218,218,219,219,219,,219,,,,219,219,,,,219',
',219,219,219,219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219',
',,,,,,219,,,219,219,219,219,219,219,219,219,,219,219,219,,219,219,,219',
'219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,',
',219,,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219,,,219,219,219',
',,219,219,220,220,220,,220,,,,220,220,,,,220,,220,220,220,220,220,220',
'220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220',
'220,220,220,220,,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,',
',,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220',
'220,220,,,,220,220,,,,,,,220,,,220,220,220,,,220,220,221,221,221,,221',
',,,221,221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221',
'221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221,,221,221',
'221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221',
',,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,221,,,,,',
'221,,,221,221,221,,,221,221,804,804,804,,804,,,,804,804,,,,804,,804',
'804,804,804,804,804,804,,,,,,804,804,804,804,804,804,804,,,804,,,,,',
',804,,,804,804,804,804,804,804,804,804,,804,804,804,,804,804,,804,804',
'804,,,,,,,,,,,,,,,,,,,,804,,,804,,,804,804,,,804,,,,,,804,,,,,,,,804',
',,,,804,804,804,804,804,804,,,,804,804,,,,,,,804,,,804,804,804,,,804',
'804,805,805,805,,805,,,,805,805,,,,805,,805,805,805,805,805,805,805',
',,,,,805,805,805,805,805,805,805,,,805,,,,,,,805,,,805,805,805,805,805',
'805,805,805,,805,805,805,,805,805,,805,805,805,,,,,,,,,,,,,,,,,,,,805',
',,805,,,805,805,,,805,,,,,,805,,,,,,,,805,,,,,805,805,805,805,805,805',
',,,805,805,,,,,,,805,,,805,805,805,,,805,805,663,663,663,,663,,,,663',
'663,,,,663,,663,663,663,663,663,663,663,,,,,,663,663,663,663,663,663',
'663,,,663,,,,,,,663,,,663,663,663,663,663,663,663,663,,663,663,663,',
'663,663,,663,663,663,,,,,,,,,,,,,,,,,,,,663,,,663,,,663,663,,,663,,',
',,,663,,,,,,,,663,,,,,663,663,663,663,663,663,,,,663,663,,,,,,,663,',
',663,663,663,,,663,663,806,806,806,,806,,,,806,806,,,,806,,806,806,806',
'806,806,806,806,,,,,,806,806,806,806,806,806,806,,,806,,,,,,,806,,,806',
'806,806,806,806,806,806,806,,806,806,806,,806,806,,806,806,806,,,,,',
',,,,,,,,,,,,,,806,,,806,,,806,806,,,806,,,,,,806,,,,,,,,806,,,,,806',
'806,806,806,806,806,,,,806,806,,,,,,,806,,,806,806,806,,,806,806,664',
'664,664,,664,,,,664,664,,,,664,,664,664,664,664,664,664,664,,,,,,664',
'664,664,664,664,664,664,,,664,,,,,,,664,,,664,664,664,664,664,664,664',
'664,,664,664,664,,664,664,,664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664',
',,664,664,,,664,,,,,,664,,,,,,,,664,,,,,664,664,664,664,664,664,,,,664',
'664,,,,,,,664,,,664,664,664,,,664,664,47,47,47,,47,,,,47,47,,,,47,,47',
'47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47',
'47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47',
',,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,',
'47,,,47,47,47,,,47,47,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46',
'46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46',
',46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,',
',,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46',
',,46,46,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232',
'232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232',
'232,232,232,232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,',
',,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232',
'232,232,,,,232,232,,,,,,,232,,,232,232,232,,,232,232,45,45,45,,45,,',
',45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,',
',,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,',
',,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45',
'45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,753,753,753,,753,,,,753,753',
',,,753,,753,753,753,753,753,753,753,,,,,,753,753,753,753,753,753,753',
',,753,,,,,,,753,,,753,753,753,753,753,753,753,753,,753,753,753,,753',
'753,,753,753,753,,,,,,,,,,,,,,,,,,,,753,,,753,,,753,753,,,753,,753,',
',,753,,,,,,,,753,,,,,753,753,753,753,753,753,,,,753,753,,,,,,,753,,',
'753,753,753,,,753,753,235,235,235,,235,,,,235,235,,,,235,,235,235,235',
'235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235',
'235,235,235,235,235,235,235,,235,235,235,,235,235,,235,235,235,,,,,',
',,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235',
'235,235,235,235,235,,,,235,235,,,,,,,235,,,235,235,235,,,235,235,236',
'236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236',
'236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236',
'236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236',
',,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236',
'236,,,,,,,236,,,236,236,236,,,236,236,237,237,237,,237,,,,237,237,,',
',237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237,',
',237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,,237,237',
',237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,',
',,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,,,237,237',
'237,,,237,237,238,238,238,,238,,,,238,238,,,,238,,238,238,238,238,238',
'238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238',
'238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,',
',,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238',
'238,238,238,,,,238,238,,,,,,,238,,,238,238,238,,,238,238,239,239,239',
',239,,,,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239',
'239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239',
'239,239,,239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239',
',,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239,239,,,',
',,,239,,,239,239,239,,,239,239,240,240,240,,240,,,,240,240,,,,240,,240',
'240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,',
',240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240,,240,240',
'240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240',
',,,,240,240,240,240,240,240,,,,240,240,,,,,,,240,,,240,240,240,,,240',
'240,241,241,241,,241,,,,241,241,,,,241,,241,241,241,241,241,241,241',
',,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241',
'241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241',
',,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241',
',,,241,241,,,,,,,241,,,241,241,241,,,241,241,242,242,242,,242,,,,242',
'242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242',
'242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,',
'242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,',
',,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,,,,,242,',
',242,242,242,,,242,242,243,243,243,,243,,,,243,243,,,,243,,243,243,243',
'243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243',
'243,243,243,243,243,243,243,,243,243,243,,243,243,,243,243,243,,,,,',
',,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243',
'243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243,243,244',
'244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244',
'244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244',
'244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244',
',,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244',
'244,,,,,,,244,,,244,244,244,,,244,244,245,245,245,,245,,,,245,245,,',
',245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245,',
',245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,,245,245',
',245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,',
',,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,,,245,245',
'245,,,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,',
',,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246',
'246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246,246,247,247,247',
',247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247',
'247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247',
'247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247',
',,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,,,',
',,,247,,,247,247,247,,,247,247,248,248,248,,248,,,,248,248,,,,248,,248',
'248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,',
',248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248',
'248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248',
',,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248,,,248',
'248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249,249,249',
',,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249',
'249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249',
',,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249',
',,,249,249,,,,,,,249,,,249,249,249,,,249,249,250,250,250,,250,,,,250',
'250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250',
'250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250,',
'250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,,,,,250,',
',250,250,250,,,250,250,251,251,251,,251,,,,251,251,,,,251,,251,251,251',
'251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251',
'251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,',
',,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251',
'251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251,251,252',
'252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252',
'252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252',
'252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252',
',,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252',
'252,,,,,,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253,253,,',
',253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,',
',253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253',
',253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,',
',,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253',
'253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,',
',,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254',
'254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,255,255,255',
',255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255',
'255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,',
',,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256,256,,,,256,,256',
'256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,',
',256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,,256,256',
'256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256',
',,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,,256',
'256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257',
'257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257',
',,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257',
',,,257,257,,,,,,,257,,,257,257,257,,,257,257,258,258,258,,258,,,,258',
'258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258',
'258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,',
'258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,',
',,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,',
',258,258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259',
'259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259,259,,,,,',
',,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259',
'259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,,259,259,260',
'260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260,,,,,,260',
'260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260',
'260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260',
',,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260',
'260,,,,,,,260,,,260,260,260,,,260,260,807,807,807,,807,,,,807,807,,',
',807,,807,807,807,807,807,807,807,,,,,,807,807,807,807,807,807,807,',
',807,,,,,,,807,,,807,807,807,807,807,807,807,807,,807,807,807,,807,807',
',807,807,807,,,,,,,,,,,,,,,,,,,,807,,,807,,,807,807,,,807,,,,,,807,',
',,,,,,807,,,,,807,807,807,807,807,807,,,,807,807,,,,,,,807,,,807,807',
'807,,,807,807,809,809,809,,809,,,,809,809,,,,809,,809,809,809,809,809',
'809,809,,,,,,809,809,809,809,809,809,809,,,809,,,,,,,809,,,809,809,809',
'809,809,809,809,809,,809,809,809,,809,809,,809,809,809,,,,,,,,,,,,,',
',,,,,,809,,,809,,,809,809,,,809,,,,,,809,,,,,,,,809,,,,,809,809,809',
'809,809,809,,,,809,809,,,,,,,809,,,809,809,809,,,809,809,267,267,267',
',267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267',
'267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,267',
'267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267',
'267,,,267,,267,,267,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267',
'267,,,,,,,267,,267,267,267,267,,,267,267,759,759,759,,759,,,,759,759',
',,,759,,759,759,759,759,759,759,759,,,,,,759,759,759,759,759,759,759',
',,759,,,,,,,759,,,759,759,759,759,759,759,759,759,,759,759,759,,759',
'759,,759,759,759,,,,,,,,,,,,,,,,,,,,759,,,759,,,759,759,,,759,,,,,,759',
',,,,,,,759,,,,,759,759,759,759,759,759,,,,759,759,,,,,,,759,,,759,759',
'759,,,759,759,273,273,273,,273,,,,273,273,,,,273,,273,273,273,273,273',
'273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273,273,273',
'273,273,273,273,273,273,273,273,273,,273,273,,273,273,273,,,,,,,,,,',
',,,,,,,,,273,,,273,,,273,273,,,273,,273,,273,,273,,,,,,,,273,,,,,273',
'273,273,273,273,273,,,,273,273,,,,,,,273,,273,273,273,273,,,273,273',
'276,276,276,,276,,,,276,276,,,,276,,276,276,276,276,276,276,276,,,,',
',276,276,276,276,276,276,276,,,276,,,,,,,276,,,276,276,276,276,276,276',
'276,276,276,276,276,276,,276,276,,276,276,276,,,,,,,,,,,,,,,,,,,,276',
',,276,,,276,276,,,276,,276,,276,,276,,,,,,,,276,,,,,276,276,276,276',
'276,276,,,,276,276,276,,,,,,276,,276,276,276,276,,,276,276,578,578,578',
',578,,,,578,578,,,,578,,578,578,578,578,578,578,578,,,,,,578,578,578',
'578,578,578,578,,,578,,,,,,,578,,,578,578,578,578,578,578,578,578,,578',
'578,578,,578,578,,578,578,578,,,,,,,,,,,,,,,,,,,,578,,,578,,,578,578',
',,578,,,,,,578,,,,,,,,578,,,,,578,578,578,578,578,578,,,,578,578,,,',
',,,578,,,578,578,578,,,578,578,821,821,821,,821,,,,821,821,,,,821,,821',
'821,821,821,821,821,821,,,,,,821,821,821,821,821,821,821,,,821,,,,,',
',821,,,821,821,821,821,821,821,821,821,,821,821,821,,821,821,,,,821',
',,,,,,,,,,,,,,,,,,,821,,,821,,,821,821,,,821,,,,,,,,,,,,,,,,,,,821,821',
'821,821,821,821,,,,821,821,,,,,,,821,,,821,821,821,,,821,821,788,788',
'788,,788,,,,788,788,,,,788,,788,788,788,788,788,788,788,,,,,,788,788',
'788,788,788,788,788,,,788,,,,,,,788,,,788,788,788,788,788,788,788,788',
',788,788,788,,788,788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788',
'788,,,788,,,,,,788,,,,,,,,788,,,,,788,788,788,788,788,788,,,,788,788',
',,,,,,788,,,788,788,788,,,788,788,283,283,283,,283,,,,283,283,,,,283',
',283,283,283,283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283',
',,,,,,283,,,283,283,283,283,283,283,283,283,,283,283,283,,283,283,,283',
'283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,',
',283,,,,,283,283,283,283,283,283,,,,283,283,,,,,,,283,,,283,283,283',
',,283,283,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,285,285',
'285,,285,,,,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285',
'285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285,285,285',
',285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285',
'285,,,285,,,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285,,,,285,285',
',,,,,,285,,,285,285,285,,,285,285,287,287,287,,287,,,,287,287,,,,287',
',287,287,287,287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287',
',,,,,,287,,,287,287,287,287,287,287,287,287,,287,287,287,,287,287,,287',
'287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,',
',287,,,,,287,287,287,287,287,287,,,,287,287,,,,,,,287,,,287,287,287',
',,287,287,289,289,289,,289,,,,289,289,,,,289,,289,289,289,289,289,289',
'289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289,289,289,289',
'289,289,289,289,,289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,',
',,289,,,289,,,289,289,,,289,,,,,,289,,,,,,,,289,,,,,289,289,289,289',
'289,289,,,,289,289,,,,,,,289,,,289,289,289,,,289,289,290,290,290,,290',
',,,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290',
'290,290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290,,290,290',
'290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290',
',,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,,,,,,,290',
',,290,290,290,,,290,290,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37',
'37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37',
'37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37',
',,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37',
'37,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34',
'34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34',
',34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,',
',34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,296',
'296,296,296,296,,,,296,296,,,,296,,296,296,296,296,296,296,296,,,,,',
'296,296,296,296,296,296,296,,,296,,,,,,296,296,,296,296,296,296,296',
'296,296,296,296,,296,296,296,,296,296,,296,296,296,,,,,,,,,,,,,,,,,',
',,296,,,296,,,296,296,,,296,,296,,,,296,,,,,,,,296,,,,,296,296,296,296',
'296,296,,,,296,296,,,,,,,296,,,296,296,296,,,296,296,553,553,553,,553',
',,,553,553,,,,553,,553,553,553,553,553,553,553,,,,,,553,553,553,553',
'553,553,553,,,553,,,,,,,553,,,553,553,553,553,553,553,553,553,553,553',
'553,553,,553,553,,553,553,553,,,,,,,,,,,,,,,,,,,,553,,,553,,,553,553',
',,553,,,,,,553,,,,,,,,553,,,,,553,553,553,553,553,553,,,,553,553,,,',
',,,553,,553,553,553,553,,,553,553,33,33,33,,33,,,,33,33,,,,33,,33,33',
'33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33',
'33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33',
',,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,',
',,,,33,,33,33,33,33,,,33,33,658,658,658,,658,,,,658,658,,,,658,,658',
'658,658,658,658,658,658,,,,,,658,658,658,658,658,658,658,,,658,,,,,',
',658,,,658,658,658,658,658,658,658,658,,658,658,658,,658,658,,658,658',
'658,,,,,,,,,,,,,,,,,,,,658,,,658,,,658,658,,,658,,,,,,658,,,,,,,,658',
',,,,658,658,658,658,658,658,,,,658,658,,,,,,,658,,,658,658,658,,,658',
'658,868,868,868,,868,,,,868,868,,,,868,,868,868,868,868,868,868,868',
',,,,,868,868,868,868,868,868,868,,,868,,,,,,,868,,,868,868,868,868,868',
'868,868,868,,868,868,868,,868,868,,868,868,868,,,,,,,,,,,,,,,,,,,,868',
',,868,,,868,868,,,868,,,,,,868,,,,,,,,868,,,,,868,868,868,868,868,868',
',,,868,868,,,,,,,868,,,868,868,868,,,868,868,32,32,32,,32,,,,32,32,',
',,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,',
',32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,',
',,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32',
',,,32,32,,,,,,,32,,32,32,32,32,,,32,32,302,302,302,,302,,,,302,302,',
',,302,,302,302,302,302,302,302,302,,,,,,302,302,302,302,302,302,302',
',,302,,,,,,,302,,,302,302,302,302,302,302,302,302,,302,302,302,,302',
'302,,,,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,,,,,,,,,,,',
',,,,,,302,302,302,302,302,302,,,,302,302,,,,302,,,302,,,302,302,302',
',,302,302,359,359,359,,359,,,,359,359,,,,359,,359,359,359,359,359,359',
'359,,,,,,359,359,359,359,359,359,359,,,359,,,,,,,359,,,359,359,359,359',
'359,359,359,359,,359,359,359,,359,359,,,,359,,,,,,,,,,,,,,,,,,,,359',
',,359,,,359,359,,,359,,,,,,,,,,,,,,,,,,,359,359,359,359,359,359,,,,359',
'359,,,,,,,359,,,359,359,359,,,359,359,544,544,544,,544,,,,544,544,,',
',544,,544,544,544,544,544,544,544,,,,,,544,544,544,544,544,544,544,',
',544,,,,,,,544,,,544,544,544,544,544,544,544,544,,544,544,544,,544,544',
',544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,,,,,544,',
',,,,,,544,,,,,544,544,544,544,544,544,,,,544,544,,,,,,,544,,,544,544',
'544,,,544,544,539,539,539,,539,,,,539,539,,,,539,,539,539,539,539,539',
'539,539,,,,,,539,539,539,539,539,539,539,,,539,,,,,,,539,,,539,539,539',
'539,539,539,539,539,,539,539,539,,539,539,,539,539,539,,,,,,,,,,,,,',
',,,,,,539,,,539,,,539,539,,,539,,,,,,539,,,,,,,,539,,,,,539,539,539',
'539,539,539,,,,539,539,,,,,,,539,,,539,539,539,,,539,539,538,538,538',
',538,,,,538,538,,,,538,,538,538,538,538,538,538,538,,,,,,538,538,538',
'538,538,538,538,,,538,,,,,,,538,,,538,538,538,538,538,538,538,538,,538',
'538,538,,538,538,,538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538',
',,538,,,,,,538,,,,,,,,538,,,,,538,538,538,538,538,538,,,,538,538,,,',
',,,538,,,538,538,538,,,538,538,690,690,690,,690,,,,690,690,,,,690,,690',
'690,690,690,690,690,690,,,,,,690,690,690,690,690,690,690,,,690,,,,,',
',690,,,690,690,690,690,690,690,690,690,,690,690,690,,690,690,,690,690',
'690,,,,,,,,,,,,,,,,,,,,690,,,690,,,690,690,,,690,,,,,,690,,,,,,,,690',
',,,,690,690,690,690,690,690,,,,690,690,,,,,,,690,,,690,690,690,,,690',
'690,535,535,535,,535,,,,535,535,,,,535,,535,535,535,535,535,535,535',
',,,,,535,535,535,535,535,535,535,,,535,,,,,,,535,,,535,535,535,535,535',
'535,535,535,,535,535,535,,535,535,,,,535,,,,,,,,,,,,,,,,,,,,535,,,535',
',,535,535,,,535,,,,,,,,,,,,,,,,,,,535,535,535,535,535,535,,,,535,535',
',,,,,,535,,,535,535,535,,,535,535,693,693,693,,693,,,,693,693,,,,693',
',693,693,693,693,693,693,693,,,,,,693,693,693,693,693,693,693,,,693',
',,,,,,693,,,693,693,693,693,693,693,693,693,,693,693,693,,693,693,,693',
'693,693,,,,,,,,,,,,,,,,,,,,693,,,693,,,693,693,,,693,,,,,,693,,,,,,',
',693,,,,,693,693,693,693,693,693,,,,693,693,,,,,,,693,,,693,693,693',
',,693,693,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,',
'8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,',
',8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8',
'8,8,,,8,8,526,526,526,,526,,,,526,526,,,,526,,526,526,526,526,526,526',
'526,,,,,,526,526,526,526,526,526,526,,,526,,,,,,,526,,,526,526,526,526',
'526,526,526,526,,526,526,526,,526,526,,,,526,,,,,,,,,,,,,,,,,,,,526',
',,526,,,526,526,,,526,,,,,,,,,,,,,,,,,,,526,526,526,526,526,526,,,,526',
'526,,,,,,,526,,,526,526,526,,,526,526,519,519,519,519,519,,,,519,519',
',,,519,,519,519,519,519,519,519,519,,,,,,519,519,519,519,519,519,519',
',,519,,,,,,519,519,,519,519,519,519,519,519,519,519,519,,519,519,519',
',519,519,,519,519,519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,',
'519,,,,519,,,,,,,,519,,,,,519,519,519,519,519,519,,,,519,519,,,,,,519',
'519,,,519,519,519,,,519,519,512,512,512,,512,,,,512,512,,,,512,,512',
'512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512,,,512,,,,,',
',512,,,512,512,512,512,512,512,512,512,,512,512,512,,512,512,,512,512',
'512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512,,,,,,512,,,,,,,,512',
',,,,512,512,512,512,512,512,,,,512,512,,,,,,,512,,,512,512,512,,,512',
'512,510,510,510,,510,,,,510,510,,,,510,,510,510,510,510,510,510,510',
',,,,,510,510,510,510,510,510,510,,,510,,,,,,,510,,,510,510,510,510,510',
'510,510,510,510,510,510,510,,510,510,,510,510,510,,,,,,,,,,,,,,,,,,',
',510,,,510,,,510,510,,,510,,,,510,,510,,,,,,,,510,,,,,510,510,510,510',
'510,510,,,,510,510,,,,,,,510,,510,510,510,510,,,510,510,319,319,319',
',319,,,,319,319,,,,319,,319,319,319,319,319,319,319,,,,,,319,319,319',
'319,319,319,319,,,319,,,,,,,319,,,319,319,319,319,319,319,319,319,,319',
'319,319,,319,319,,,,319,,,,,,,,,,,,,,,,,,,,319,,,319,,,319,319,,,319',
',,,,,,,,,,,,,,,,,,319,319,319,319,319,319,,,,319,319,,,,,,,319,,,319',
'319,319,,,319,319,507,507,507,,507,,,,507,507,,,,507,,507,507,507,507',
'507,507,507,,,,,,507,507,507,507,507,507,507,,,507,,,,,,,507,,,507,507',
'507,507,507,507,507,507,507,507,507,507,,507,507,,507,507,507,,,,,,',
',,,,,,,,,,,,,507,,,507,,,507,507,,,507,,507,,507,,507,,,,,,,,507,,,',
',507,507,507,507,507,507,,,,507,507,,,,,,,507,,507,507,507,507,,,507',
'507,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23',
'23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23',
',23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23',
',,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23,696,696,696',
',696,,,,696,696,,,,696,,696,696,696,696,696,696,696,,,,,,696,696,696',
'696,696,696,696,,,696,,,,,,,696,,,696,696,696,696,696,696,696,696,,696',
'696,696,,696,696,,,,696,,,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,,696',
',,,,,,,,,,,,,,,,,,696,696,696,696,696,696,,,,696,696,,,,,,,696,,,696',
'696,696,,,696,696,952,952,952,,952,,,,952,952,,,,952,,952,952,952,952',
'952,952,952,,,,,,952,952,952,952,952,952,952,,,952,,,,,,,952,,,952,952',
'952,952,952,952,952,952,,952,952,952,,952,952,,952,952,952,,,,,,,,,',
',,,,,,,,,,952,,,952,,,952,952,,,952,,952,,,,952,,,,,,,,952,,,,,952,952',
'952,952,952,952,,,,952,952,,,,,,,952,,,952,952,952,,,952,952,327,327',
'327,,327,,,,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327,327',
'327,327,327,327,327,,,327,,,,,,,327,,,327,327,327,327,327,327,327,327',
',327,327,327,,327,327,,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,327',
',327,327,,,327,,,,,,327,,,,,,,,327,,,,,327,327,327,327,327,327,,,,327',
'327,,,,,,,327,,,327,327,327,,,327,327,710,710,710,,710,,,,710,710,,',
',710,,710,710,710,710,710,710,710,,,,,,710,710,710,710,710,710,710,',
',710,,,,,,,710,,,710,710,710,710,710,710,710,710,,710,710,710,,710,710',
',,,710,,,,,,,,,,,,,,,,,,,,710,,,710,,,710,710,,,710,,,,,,,,,,,,,,,,',
',,710,710,710,710,710,710,,,,710,710,,,,,,,710,,,710,710,710,,,710,710',
'881,881,881,,881,,,,881,881,,,,881,,881,881,881,881,881,881,881,,,,',
',881,881,881,881,881,881,881,,,881,,,,,,,881,,,881,881,881,881,881,881',
'881,881,,881,881,881,,881,881,,881,881,881,,,,,,,,,,,,,,,,,,,,881,,',
'881,,,881,881,,,881,,,,,,881,,,,,,,,881,,,,,881,881,881,881,881,881',
',,,881,881,,,,,,,881,,,881,881,881,,,881,881,899,899,899,,899,,,,899',
'899,,,,899,,899,899,899,899,899,899,899,,,,,,899,899,899,899,899,899',
'899,,,899,,,,,,,899,,,899,899,899,899,899,899,899,899,899,899,899,899',
',899,899,,899,899,899,,,,,,,,,,,,,,,,,,,,899,,,899,,,899,899,,,899,',
',,899,,899,,,,,,,,899,,,,,899,899,899,899,899,899,,,,899,899,,,,,,,899',
',899,899,899,899,,,899,899,466,466,466,,466,,,,466,466,,,,466,,466,466',
'466,466,466,466,466,,,,,,466,466,466,466,466,466,466,,,466,,,,,,,466',
',,466,466,466,466,466,466,466,466,,466,466,466,,466,466,,466,466,466',
',,,,,,,,,,,,,,,,,,,466,,,466,,,466,466,,,466,,,,,,466,,,,,,,,466,,,',
',466,466,466,466,466,466,,,,466,466,,,,,,,466,,,466,466,466,,,466,466',
'465,465,465,,465,,,,465,465,,,,465,,465,465,465,465,465,465,465,,,,',
',465,465,465,465,465,465,465,,,465,,,,,,,465,,,465,465,465,465,465,465',
'465,465,,465,465,465,,465,465,,465,465,465,,,,,,,,,,,,,,,,,,,,465,,',
'465,,,465,465,,,465,,,,,,465,,,,,,,,465,,,,,465,465,465,465,465,465',
',,,465,465,,,,,,,465,,,465,465,465,,,465,465,464,464,464,,464,,,,464',
'464,,,,464,,464,464,464,464,464,464,464,,,,,,464,464,464,464,464,464',
'464,,,464,,,,,,,464,,,464,464,464,464,464,464,464,464,,464,464,464,',
'464,464,,464,464,464,,,,,,,,,,,,,,,,,,,,464,,,464,,,464,464,,,464,,',
',,,464,,,,,,,,464,,,,,464,464,464,464,464,464,,,,464,464,,,,,,,464,',
',464,464,464,,,464,464,462,462,462,,462,,,,462,462,,,,462,,462,462,462',
'462,462,462,462,,,,,,462,462,462,462,462,462,462,,,462,,,,,,,462,,,462',
'462,462,462,462,462,462,462,462,462,462,462,,462,462,,462,462,462,,',
',,,,,,,,,,,,,,,,,462,,,462,,,462,462,,,462,,462,,462,,462,,,,,,,,462',
',,,,462,462,462,462,462,462,,,,462,462,,,,,,,462,,462,462,462,462,,',
'462,462,900,900,900,,900,,,,900,900,,,,900,,900,900,900,900,900,900',
'900,,,,,,900,900,900,900,900,900,900,,,900,,,,,,,900,,,900,900,900,900',
'900,900,900,900,,900,900,900,,900,900,,900,900,900,,,,,,,,,,,,,,,,,',
',,900,,,900,,,900,900,,,900,,,,,,900,,,,,,,,900,,,,,900,900,900,900',
'900,900,,,,900,900,,,,,,,900,,,900,900,900,,,900,900,766,766,766,,766',
',,,766,766,,,,766,,766,766,766,766,766,766,766,,,,,,766,766,766,766',
'766,766,766,,,766,,,,,,,766,,,766,766,766,766,766,766,766,766,766,766',
'766,766,,766,766,,766,766,766,,,,,,,,,,,,,,,,,,,,766,,,766,,,766,766',
',,766,,766,,766,,766,,,,,,,,766,,,,,766,766,766,766,766,766,,,,766,766',
',,,,,,766,,766,766,766,766,,,766,766,715,715,715,,715,,,,715,715,,,',
'715,,715,715,715,715,715,715,715,,,,,,715,715,715,715,715,715,715,,',
'715,,,,,,,715,,,715,715,715,715,715,715,715,715,,715,715,715,,715,715',
',715,715,715,,,,,,,,,,,,,,,,,,,,715,,,715,,,715,715,,,715,,715,,,,715',
',,,,,,,715,,,,,715,715,715,715,715,715,,,,715,715,,,,,,,715,,,715,715',
'715,,,715,715,915,915,915,,915,,,,915,915,,,,915,,915,915,915,915,915',
'915,915,,,,,,915,915,915,915,915,915,915,,,915,,,,,,,915,,,915,915,915',
'915,915,915,915,915,,915,915,915,,915,915,,,,915,,,,,,,,,,,,,,,,,,,',
'915,,,915,,,915,915,,,915,,,,,,,,,,,,,,,,,,,915,915,915,915,915,915',
',,,915,915,,,,,,,915,,,915,915,915,,,915,915,419,419,419,,419,,,,419',
'419,,,,419,,419,419,419,419,419,419,419,,,,,,419,419,419,419,419,419',
'419,,,419,,,,,,,419,,,419,419,419,419,419,419,419,419,,419,419,419,',
'419,419,,419,419,419,,,,,,,,,,,,,,,,,,,,419,,,419,,,419,419,,,419,,',
',,,419,,,,,,,,419,,,,,419,419,419,419,419,419,,,,419,419,,,,,,,419,',
',419,419,419,,,419,419,733,733,733,,733,,,,733,733,,,,733,,733,733,733',
'733,733,733,733,,,,,,733,733,733,733,733,733,733,,,733,,,,,,,733,,,733',
'733,733,733,733,733,733,733,,733,733,733,,733,733,,733,733,733,,,,,',
',,,,,,,,,,,,,,733,,,733,,,733,733,,,733,,,,,,733,,,,,,,,733,,,,,733',
'733,733,733,733,733,,,,733,733,,,,,,,733,,,733,733,733,,,733,733,346',
'346,346,,346,,,,346,346,,,,346,,346,346,346,346,346,346,346,,,,,,346',
'346,346,346,346,346,346,,,346,,,,,,,346,,,346,346,346,346,346,346,346',
'346,,346,346,346,,346,346,,346,346,346,,,,,,,,,,,,,,,,,,,,346,,,346',
',,346,346,,,346,,,,,,346,,,,,,,,346,,,,,346,346,346,346,346,346,,,,346',
'346,,,,,,,346,,,346,346,346,,,346,346,347,347,347,,347,,,,347,347,,',
',347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347,',
',347,,,,,,,347,,,347,347,347,347,347,347,347,347,,347,347,347,,347,347',
',347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347,,,,,,347,',
',,,,,,347,,,,,347,347,347,347,347,347,,,,347,347,,,,,,,347,,,347,347',
'347,,,347,347,528,528,528,,528,,,,528,528,,,,528,,528,528,528,528,528',
'528,528,,,,,,528,528,528,528,528,528,528,,,528,,,,,,,528,,,528,528,528',
'528,528,528,528,528,528,528,528,528,,528,528,,528,528,528,,,,,,,,,,',
',,,,,,,,,528,,,528,,,528,528,,,528,,528,,528,,528,,,,,,,,528,,,,,528',
'528,528,528,528,528,,,,528,528,,,,,,,528,,528,528,528,528,,,528,528',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11',
'11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,',
',,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,',
'11,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12',
'12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12',
'12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12',
',,,,,,,,,12,,,,,,,,,12,776,776,776,776,776,776,776,776,776,776,776,776',
'776,776,776,776,776,776,776,776,776,776,776,776,,,,776,776,776,776,776',
'776,776,776,776,776,,,,,,776,776,776,776,776,776,776,776,776,,,776,',
',,,,,,,776,776,,776,776,776,776,776,776,776,,,776,776,,,,776,776,776',
'776,,,,,,,,,,,,,,776,776,,776,776,776,776,776,776,776,776,776,776,776',
',,776,,,,,,,,,,,,,,,,,,,,776,642,642,642,642,642,642,642,642,642,642',
'642,642,642,642,642,642,642,642,642,642,642,642,642,642,,,,642,642,642',
'642,642,642,642,642,642,642,,,,,,642,642,642,642,642,642,642,642,642',
',,642,,,,,,,,,642,642,,642,642,642,642,642,642,642,,,642,642,,,,642',
'642,642,642,,,,,,,,,,,,,,642,642,,642,642,642,642,642,642,642,642,642',
'642,642,,,642,642,,,,,,,,,,642,,,,,,,,,642,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91,91',
'91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91,,91',
'91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91',
'91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74',
'74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,',
',74,74,,74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74',
'74,,74,74,74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,410',
'410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410',
'410,410,410,410,410,410,,,,410,410,410,410,410,410,410,410,410,410,',
',,,,410,410,410,410,410,410,410,410,410,,,410,,,,,,,,,410,410,,410,410',
'410,410,410,410,410,,,410,410,,,,410,410,410,410,,,,,,,,,,,,,,410,410',
',410,410,410,410,410,410,410,410,410,410,410,,,410,410,,,,494,,,,,,410',
'494,494,494,,,494,494,494,410,494,727,,727,727,727,727,727,,494,494',
',,,,,,727,,,494,494,,494,494,494,494,494,937,,937,937,937,937,937,,',
',,727,,,,,937,,,,727,727,727,727,,,,,,,,,,,494,,,,937,,,494,,,,,494',
'494,,937,937,,,,,,727,,,764,764,,,764,,,,,494,494,,,764,764,,764,764',
'764,764,764,764,764,494,937,764,764,,494,,764,764,764,764,,,,,,764,',
',,,,,,764,764,,764,764,764,764,764,764,764,764,764,764,764,,1062,764',
'1062,1062,1062,1062,1062,,,765,765,,,765,,,1062,,,,,764,765,765,,765',
'765,765,765,765,765,765,,,765,765,,,1062,765,765,765,765,,,,,,765,1062',
'1062,,,,,,765,765,,765,765,765,765,765,765,765,765,765,765,765,,,765',
',,,,460,460,,,460,,1062,,,,,,,460,460,765,460,460,460,460,460,460,460',
',,460,460,,,,460,460,460,460,,,,,,460,,,,,,,,460,460,,460,460,460,460',
'460,460,460,460,460,460,460,,910,460,910,910,910,910,910,1014,,1014',
'1014,1014,1014,1014,,,910,,,,,460,,1014,,,,,,,,,,,,,,,910,,,,,,,1014',
',600,600,910,910,600,,,,,1014,1014,,,600,600,,600,600,600,600,600,600',
'600,,,600,600,,,,600,600,600,600,,,910,,,600,,,,1014,,,,600,600,,600',
'600,600,600,600,600,600,600,600,600,600,,,600,,,,,459,459,,,459,,,,',
',,,,459,459,600,459,459,459,459,459,459,459,,,459,459,,,,459,459,459',
'459,,,,,,459,,,,,,,,459,459,,459,459,459,459,459,459,459,459,459,459',
'459,,774,459,774,774,774,774,774,342,,342,342,342,342,342,,,774,,,,',
'459,,342,731,,731,731,731,731,731,,,,,,,,774,,731,,,,,342,342,774,774',
'774,774,,,,342,342,342,342,,,,,731,,,,,,,,,,,731,731,,,,461,461,,,461',
'774,,,,,,,342,461,461,,461,461,461,461,461,461,461,,,461,461,,,731,461',
'461,461,461,,,,,,461,,,,,,,,461,461,,461,461,461,461,461,461,461,461',
'461,461,461,,,461,,,,,763,763,,,763,,,,,,,,,763,763,461,763,763,763',
'763,763,763,763,,,763,763,,,,763,763,763,763,,,,,,763,,,,,,,,763,763',
',763,763,763,763,763,763,763,763,763,763,763,,,763,,,,,263,263,,,263',
',,,,,,,,263,263,763,263,263,263,263,263,263,263,,,263,263,,,,263,263',
'263,263,,,,,,,,,,,,,,263,263,,263,263,263,263,263,263,263,263,263,263',
'263,,,263,,,,,601,601,,,601,,,,,,,,,601,601,263,601,601,601,601,601',
'601,601,,,601,601,,,,601,601,601,601,,,,,,601,,,,,,,,601,601,,601,601',
'601,601,601,601,601,601,601,601,601,,,601,,,,,542,542,,,542,,,,,,,,',
'542,542,601,542,542,542,542,542,542,542,,,542,542,,,,542,542,542,542',
',,,,,542,,,,,,,,542,542,,542,542,542,542,542,542,542,542,542,542,542',
',1031,542,1031,1031,1031,1031,1031,,,541,541,,,541,,,1031,,,,,542,541',
'541,,541,541,541,541,541,541,541,,,541,541,,,1031,541,541,541,541,,',
',,,541,1031,1031,,,,,,541,541,,541,541,541,541,541,541,541,541,541,541',
'541,,935,541,935,935,935,935,935,,,,,,1031,,,,935,,,,933,541,933,933',
'933,933,933,,,,,,,,,,933,,935,,,,,,,,,,,935,935,,,,,,,,933,1029,1029',
',,1029,,,,933,933,933,933,,1029,1029,,1029,1029,1029,1029,1029,1029',
'1029,,935,1029,1029,,,,1029,1029,1029,1029,,,,,,1029,,,,,933,,,1029',
'1029,,1029,1029,1029,1029,1029,1029,1029,1029,1029,1029,1029,,,1029',
',,,,1028,1028,,,1028,,,,,,,,,1028,1028,1029,1028,1028,1028,1028,1028',
'1028,1028,,,1028,1028,,,,1028,1028,1028,1028,,,,,,1028,,,,,,,,1028,1028',
',1028,1028,1028,1028,1028,1028,1028,1028,1028,1028,1028,,1018,1028,1018',
'1018,1018,1018,1018,1016,,1016,1016,1016,1016,1016,,,1018,,,,,1028,',
'1016,,,,,,,,,,,,,,,1018,,,,,,,1016,,213,213,1018,1018,213,,,,,1016,1016',
',,213,213,,213,213,213,213,213,213,213,,,213,213,,,,213,213,213,213',
',,1018,,,213,,,,1016,,,,213,213,,213,213,213,213,213,213,213,213,213',
'213,213,,,213,,,,,540,540,,,540,,,,,,,,,540,540,213,540,540,540,540',
'540,540,540,,,540,540,,,,540,540,540,540,,,,,,540,,,,,,,,540,540,,540',
'540,540,540,540,540,540,540,540,540,540,,,540,,,,,979,979,,,979,,,,',
',,,,979,979,540,979,979,979,979,979,979,979,,,979,979,,,,979,979,979',
'979,,,,,,979,,,,,,,,979,979,,979,979,979,979,979,979,979,979,979,979',
'979,,,979,,,,,214,214,,,214,,,,,,,,,214,214,979,214,214,214,214,214',
'214,214,,,214,214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214',
'214,214,214,214,214,214,214,214,214,,614,214,614,614,614,614,614,,,',
',,,,,,614,,,,,214,,,,,939,,939,939,939,939,939,,,,,,614,614,215,215',
'939,,215,,,614,614,614,614,,,215,215,,215,215,215,215,215,215,215,,939',
'215,215,,,,215,215,215,215,,939,939,,,215,,,,614,,,,215,215,,215,215',
'215,215,215,215,215,215,215,215,215,,905,215,905,905,905,905,905,939',
',,,,,,,,905,,,,,215,,,,,,,,,,,,,,,,,905,531,531,,,531,,,,905,905,905',
'905,,531,531,,531,531,531,531,531,531,531,,,531,531,,,,531,531,531,531',
',,,,,531,,,,,905,,,531,531,,531,531,531,531,531,531,531,531,531,531',
'531,,,531,,,,,530,530,,,530,,,,,,,,,530,530,531,530,530,530,530,530',
'530,530,,,530,530,,,,530,530,530,530,,,,,,530,,,,,,,,530,530,,530,530',
'530,530,530,530,530,530,530,530,530,,,530,,,,,529,529,,,529,,,,,,,,',
'529,529,530,529,529,529,529,529,529,529,,,529,529,,,,529,529,529,529',
',,,,,529,,,,,,,,529,529,,529,529,529,529,529,529,529,529,529,529,529',
',,529,,,,,602,602,,,602,,,,,,,,,602,602,529,602,602,602,602,602,602',
'602,,,602,602,,,,602,602,602,602,,,,,,602,,,,,,,,602,602,,602,602,602',
'602,602,602,602,602,602,602,602,,908,602,908,908,908,908,908,962,,962',
'962,962,962,962,,,908,,,,,602,,962,1012,,1012,1012,1012,1012,1012,,',
',,,,,908,,1012,,,,,962,962,908,908,908,908,,,,962,962,962,962,,,,,1012',
',,,,,,,,1012,1012,1012,1012,,,,,,,,,908,,,,,,,962,,,,,,,,,,,,,,,,,1012' ]
        racc_action_check = arr = ::Array.new(27024, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    46,  5646,  1446,   nil,   663,   nil,   nil, 20346,  1135,
   nil, 24126, 24259,  1333,   nil,  1290,  1346,   929,   769,  1288,
   645,   nil,    66, 21326,  3672,  1404,   nil,   580,   nil,   138,
  1567,  1185, 19086, 18666, 18246,   nil,  3390, 18106, 17406,   nil,
  1270,   644,   682,  1341,   334, 12086, 11806, 11666,  1266,   422,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1053,
   nil,  9146,  7746,  7606,    87,   nil,  5926,  6066,   nil,   nil,
  6206,  6346,  1308,   nil, 24791,   nil,   nil,   nil,   nil,   nil,
    74,   nil,   nil,   nil,   nil,   nil,   nil,  1246,  1245,  1243,
  1228, 24658,   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,
   nil,   138,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  7886,   nil,   nil,   nil,   nil,  8026,
  8166,  8306,  8446,  8586,  1244,   nil,   407,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1226,   nil,  5364,
  9286,  9426,  9566, 26192, 26396, 26498,  9706, 10266, 10406, 10546,
 10686, 10826,   nil,   nil,   865,   234,   359,  1290,   110,  1200,
  1256,   nil, 11946,  4518,  1250, 12366, 12506, 12646, 12786, 12926,
 13066, 13206, 13346, 13486, 13626, 13766, 13906, 14046, 14186, 14326,
 14466, 14606, 14746, 14886, 15026, 15166, 15306, 15446, 15586, 15726,
 15866,   nil,   nil, 25687,   nil,   nil,  1233, 16286,   nil,  1239,
   nil,   nil,   nil, 16566,   nil,   nil, 16706,   nil,  2967,   nil,
  1192,  1186,   nil, 17266,  1212, 17546,   nil, 17686,   nil, 17826,
 17966,   nil,   nil,   338,   nil,  1003, 18386,  1153,  3108,  1159,
  1192,  1152, 19226,  2403,   768,   735,   674,  1219,   638,   nil,
  1182,  1145,   128,   nil,   nil,   nil,  1149,   397,  1108, 21046,
   nil,   714,  1167,   642,   nil,  1163,   nil, 21746,  2685,   568,
   nil,  1128,   nil,   690,   634,  1118,  1097,   nil,   239,  1121,
   nil,   nil, 25480,   818,   298,   286, 23706, 23846,   635,  1192,
  1076,   131,   146,  1020,  1140,   296,  1144,   nil,   nil, 19366,
   nil,  7466,   492,   616,   506,   478,   222,   383,   648,   621,
   679,   nil,   608,   nil,   nil,   nil,   nil,   nil,   407,   nil,
   412,   nil,   581,   nil,  1042,   541,   nil,  1032,   547,   nil,
  1023,   129,   nil,  1019,   350,   nil,   489,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  4095,
 24924,   nil,   nil,   nil,   nil,  1027,   nil,   nil,  1010, 23426,
   983,   nil,   nil,  1839,   985,   nil,   nil,   980,   975,   449,
   807,   796,   nil,   nil,   nil,   546,   671,  1011,   nil,   nil,
   921,  1310,  1442,    58,    57,   nil,   nil,  2544,   nil,   956,
   nil,   nil,  1698,   nil,   nil,   nil,   nil,   398,   nil, 25411,
 25234, 25551, 22726,   289, 22586, 22446, 22306,  4236,  4518,   631,
   873,  1032,  1030,  1008,  1007,  5786,  5646,  5247,  4659,  1258,
  1392,  5223,  1515,  5364,  5082,  5505,  4941,  4800,  1228,  1457,
  4377,  4095,  3108,   361, 25043,   nil,   nil,   nil,   nil,   nil,
   nil,    73,   257,   945,   937,   nil,   nil, 21186,   nil,   nil,
 20906,   nil, 20766,   nil,    62,   nil,   nil,   nil,   nil, 20626,
  1148,   910,   892,   nil,   nil,   888, 20486,   887, 23986, 26735,
 26667, 26599,   746,   921,   nil, 20066,   881,   nil, 19786, 19646,
 26260, 25894, 25823,  3954, 19506,   979,   970,   848,   nil,   nil,
  5786,   nil,   nil, 18526,   nil,   nil,   nil,    -3,  1116,   nil,
   786,   767,   nil,   759,   756,   753,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   733,  1250,   nil,   nil, 16846,   nil,
   nil,   nil,   673,   nil,   nil,   nil,   658,   nil,   nil,   654,
  4941,   685,   nil,  5082,   205,   275,   675,   674,   nil, 10126,
 25343, 25755, 26803,   206,   nil,   610,   549,   518,   nil,   767,
   nil,    62,  9986,   nil, 26458,   nil,  9846,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   450,   nil,
   nil,   446,   nil,   nil,   nil,   536,   nil,   nil,   526,   nil,
   535,   nil, 24525,   nil,   517,  9006,  8866,   642,   543,  8726,
  7326,  7046,  6906,   535,   nil,   nil,   nil,  6486, 18806,   495,
   nil,   nil,   nil, 11246, 11526,   nil,    52,    27,   147,   130,
   414,   276,   464,  1980,   451,   nil,   nil,   984,   nil,   nil,
   524,   333,   387,   nil,   nil,   nil,   nil,   402,   nil,   426,
 19926,   nil,   nil, 20206,  1016,   308, 21466,   383,   nil,   378,
    32,   167,   388,   179,   271,   373,   196,   888,   358,   287,
 21886,  3249,   171,   131,   186, 23146,   nil,   nil,   351,   nil,
  2826,  3954,    34,   508,   nil,   nil,   727, 25009,   nil,  1373,
   nil, 25497,   nil, 23566,   nil,  1149,   nil,    -8,   664,   -26,
   nil,   nil,   nil,   nil,   793,   nil,    76,   nil,   nil,   nil,
   nil,    51,   nil, 12226,  1228,   212,   303,   302,   282, 16426,
   nil,   763,   nil, 25619, 25095, 25166, 23006,   nil,   nil,   nil,
   211,   136,     0,  1698, 25473,   661, 24392,   292,  1049,  2544,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   452, 17126,  3531,
  6766,   nil,   507,   nil,  3390,   nil,  2121,   nil,   nil,  2403,
   nil,  2685,   nil,  2826, 10966, 11106, 11386, 16006,   408, 16146,
   599,   608,   nil,   638,   662,   670,   nil,   735,   725,   728,
   716, 16986,   nil,   nil,  3813,   nil,   nil,   nil,  3672,  3531,
   nil,   nil,   nil,   763,   133,   nil,   nil,   904,   nil,  3249,
   790,   836,   nil,   nil,   nil,   813,   922,   806,   812,   nil,
   nil,   nil,   813,   815,   nil,   824,   826,   nil,   827,   nil,
   nil,   844,  1189,   846,   863,   nil,   971,   nil, 18946,   993,
  2262,  2121,   nil,   318,   170,   208,   454,   740,   nil,   942,
  1839, 22026,   nil,   716,  1067,  1069,   961,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   975,   962,   nil,  3813, 22166,
 22866,  2262,   494,   nil,   nil, 26560,   nil,   nil, 26865,   nil,
 25296,   nil,   nil,  1025,   914, 23286,   860,  1088,  1136,  5223,
  1036,  1144,   nil,  5505,   nil,   nil,   243,  6626,   nil,   nil,
   nil,   nil,   nil, 25976,   nil, 25956,   nil, 25036,   nil, 26484,
   nil,   nil,   nil,   nil,   545,   930,  1089,   nil,   260,   nil,
  1211,  1214, 21606,  1980,   nil,   nil,  1227,   664,   nil,   nil,
   nil,   nil, 26872,   nil,  1112,   nil,   nil,  1116,  1119,  1120,
  1122,   nil,  1137,   nil,   477,   nil,   nil,   nil,   582, 26328,
   nil,   nil,  1164,   nil,   nil,   nil,  2967,   282,   312,   992,
  1244,   345,   nil,  1173,  1177,  1179,  1180,  1184,  1178,  1191,
  1062,  4236,   nil,   nil,   nil,   374,  4377,   nil,   nil,  4659,
  4800,   nil, 26889,   nil, 25303,   nil, 26152,   nil, 26145,   nil,
   nil,   nil,  1435,  1270,  1275,   nil,  1359,  7186, 26083, 26015,
   267, 25885,   nil,   nil,   nil,   nil,  1317,  1268,   836,   nil,
   nil,   nil,  1391,  1393,  1394,  1279,  1281,  1283,  1291,   nil,
   nil,  1299,   122,   183,   137,   207,  1306,  1315,   nil,   nil,
   nil,   nil, 25157,   nil,   nil,   nil,   nil,   268,   nil,  1318,
   nil ]

racc_action_default = [
    -1,  -633,  -632,  -633,    -2,  -619,    -4,    -5,  -633,    -8,
    -9,  -633,  -633,  -633,   -29,  -633,  -633,  -633,  -285,  -633,
   -40,   -43,  -621,  -633,   -48,   -50,   -51,   -52,   -57,  -262,
  -262,  -262,  -297,  -336,  -337,   -70,  -632,   -74,   -82,   -84,
  -633,  -521,  -522,  -633,  -633,  -633,  -633,  -633,  -621,  -243,
  -276,  -277,  -278,  -279,  -280,  -281,  -282,  -283,  -284,  -609,
  -287,  -621,  -632,  -632,  -305,  -408,  -633,  -633,  -310,  -313,
  -619,  -633,  -321,  -328,  -633,  -338,  -339,  -452,  -453,  -454,
  -455,  -456,  -457,  -632,  -460,  -632,  -632,  -632,  -632,  -632,
  -632,  -632,  -497,  -503,  -505,  -506,  -507,  -508,  -607,  -510,
  -511,  -608,  -513,  -514,  -515,  -516,  -517,  -518,  -519,  -520,
  -525,  -526,  1071,    -3,  -620,  -628,  -629,  -630,    -7,  -633,
  -633,  -633,  -633,  -633,  -633,   -17,  -633,  -117,  -118,  -119,
  -120,  -121,  -122,  -123,  -124,  -125,  -129,  -130,  -131,  -132,
  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,
  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,
  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,
  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,
  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,
  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,
  -193,  -194,  -195,  -196,  -197,  -198,  -199,   -22,  -126,  -632,
  -633,  -633,  -632,  -633,  -633,  -633,  -633,  -633,  -633,  -633,
  -633,  -621,  -622,   -47,  -633,  -521,  -522,  -633,  -285,  -633,
  -633,  -235,  -633,  -632,  -633,  -633,  -633,  -633,  -633,  -633,
  -633,  -633,  -633,  -633,  -633,  -633,  -633,  -633,  -633,  -633,
  -633,  -633,  -633,  -633,  -633,  -633,  -633,  -633,  -633,  -633,
  -633,  -414,  -417,  -633,  -617,  -618,   -58,  -633,  -304,  -633,
  -433,  -436,   -65,  -632,  -430,   -66,  -621,   -67,  -244,  -257,
  -632,  -632,  -261,  -633,  -267,  -633,  -632,  -497,  -600,  -633,
  -633,   -68,   -69,  -619,   -13,   -14,  -633,   -72,  -632,  -621,
  -633,   -75,   -78,  -632,   -90,   -91,  -633,  -633,  -100,  -297,
  -300,  -621,  -421,  -336,  -337,  -340,  -431,  -633,   -80,  -633,
   -86,  -294,  -504,  -633,  -220,  -221,  -236,  -633,  -632,  -290,
  -289,  -633,  -245,  -625,  -625,  -633,  -633,  -598,  -625,  -633,
  -306,  -307,  -553,   -49,  -633,  -633,  -633,  -633,  -619,  -633,
  -620,  -521,  -522,  -633,  -633,  -285,  -633,  -361,  -362,  -633,
  -324,  -633,  -117,  -118,  -159,  -160,  -161,  -177,  -182,  -189,
  -192,  -331,  -633,  -521,  -522,  -595,  -596,  -458,  -633,  -481,
  -633,  -483,  -633,  -485,  -633,  -633,  -465,  -633,  -633,  -471,
  -633,  -633,  -477,  -633,  -633,  -479,  -633,  -496,  -498,  -499,
  -500,  -501,    -6,  -631,   -23,   -24,   -25,   -26,   -27,  -632,
  -633,   -19,   -20,   -21,  -127,  -633,   -30,   -39,  -272,  -633,
  -633,  -271,   -31,  -202,  -621,  -252,  -253,  -632,  -632,  -610,
  -611,  -262,  -427,  -612,  -613,  -611,  -610,  -262,  -426,  -429,
  -612,  -613,  -262,  -610,  -611,  -428,   -37,  -210,   -38,  -633,
   -41,   -42,  -200,  -267,   -44,   -45,   -46,  -621,  -303,  -633,
  -633,  -633,  -632,  -294,  -633,  -633,  -633,  -211,  -212,  -213,
  -214,  -215,  -216,  -217,  -218,  -222,  -223,  -224,  -225,  -226,
  -227,  -228,  -229,  -230,  -231,  -232,  -233,  -234,  -237,  -238,
  -239,  -240,  -621,  -632,  -262,  -610,  -611,   -54,   -59,  -263,
  -422,  -632,  -632,  -621,  -621,  -299,  -258,  -633,  -266,  -259,
  -633,  -264,  -633,  -268,  -633,  -605,  -603,  -606,   -12,  -620,
   -16,  -621,   -71,  -292,   -87,   -76,  -633,  -621,  -632,  -633,
  -633,  -633,   -99,  -633,  -504,  -633,   -83,   -88,  -633,  -633,
  -633,  -633,  -633,  -241,  -633,  -444,  -633,  -621,  -623,  -246,
  -627,  -626,  -248,  -627,  -295,  -296,  -599,  -633,  -553,  -411,
  -594,  -594,  -536,  -538,  -538,  -538,  -552,  -554,  -555,  -556,
  -557,  -558,  -559,  -560,  -561,  -633,  -565,  -567,  -569,  -574,
  -576,  -577,  -579,  -584,  -586,  -587,  -589,  -590,  -591,  -633,
  -632,  -352,  -353,  -632,  -633,  -633,  -633,  -633,  -439,  -632,
  -633,  -633,  -633,  -294,  -318,  -112,  -113,  -633,  -115,  -633,
  -285,  -633,  -633,  -329,  -553,  -333,  -633,  -459,  -482,  -487,
  -488,  -490,  -461,  -484,  -462,  -486,  -463,  -464,  -633,  -467,
  -469,  -633,  -470,  -473,  -474,  -633,  -475,  -476,  -633,  -502,
  -633,   -18,  -633,   -28,  -275,  -633,  -633,  -432,  -633,  -254,
  -256,  -633,  -633,   -60,  -250,  -251,  -423,  -633,  -633,   -63,
  -425,   -61,  -424,  -633,  -633,  -302,  -610,  -611,  -610,  -611,
  -610,  -611,  -621,  -200,  -633,  -397,  -398,  -621,  -400,  -415,
   -53,  -418,  -632,  -434,  -437,  -249,  -298,  -632,  -265,  -269,
  -633,  -601,  -602,  -633,   -15,   -73,  -633,   -79,   -85,  -621,
  -610,  -611,  -632,  -610,  -611,  -632,  -614,   -98,  -633,   -81,
  -633,  -209,  -219,  -621,  -632,  -632,  -288,  -291,  -625,  -409,
  -632,  -632,  -621,  -633,  -534,  -535,  -633,  -633,  -545,  -633,
  -548,  -633,  -550,  -633,  -363,  -633,  -365,  -367,  -374,  -621,
  -568,  -578,  -588,  -592,  -632,  -354,  -632,  -311,  -355,  -356,
  -314,  -633,  -317,  -633,  -621,  -610,  -611,  -614,  -293,  -633,
  -112,  -113,  -114,  -633,  -633,  -633,  -632,  -322,  -527,  -528,
  -633,  -325,  -632,  -632,  -553,  -633,  -633,  -621,  -633,  -632,
  -466,  -468,  -472,  -478,  -480,   -10,  -128,  -273,  -633,  -203,
  -633,  -624,  -632,   -33,  -205,   -34,  -206,   -62,   -35,  -208,
   -36,  -207,   -64,  -201,  -633,  -633,  -633,  -633,  -432,  -633,
  -594,  -594,  -379,  -632,  -632,  -632,  -396,  -633,  -621,  -402,
  -561,  -571,  -572,  -582,  -632,  -420,  -419,   -55,  -632,  -632,
  -260,  -270,  -604,   -77,  -432,   -89,  -301,  -632,  -359,  -632,
  -445,  -632,  -446,  -447,  -247,  -633,  -633,  -621,  -594,  -575,
  -593,  -537,  -538,  -538,  -566,  -538,  -538,  -585,  -538,  -561,
  -580,  -621,  -633,  -372,  -633,  -562,  -633,  -357,  -633,  -633,
  -632,  -632,  -316,  -633,  -432,  -633,  -112,  -113,  -116,  -621,
  -632,  -633,  -530,  -633,  -633,  -633,  -621,  -532,  -334,  -597,
  -489,  -492,  -493,  -494,  -495,  -633,  -274,   -32,  -204,  -255,
  -633,  -242,  -633,  -377,  -378,  -387,  -381,  -389,  -633,  -392,
  -633,  -394,  -399,  -633,  -633,  -633,  -570,  -633,  -633,  -632,
  -633,  -633,   -11,  -632,  -451,  -360,  -633,  -633,  -449,  -412,
  -413,  -410,  -533,  -633,  -541,  -633,  -543,  -633,  -546,  -633,
  -549,  -551,  -364,  -366,  -370,  -633,  -375,  -308,  -633,  -309,
  -633,  -633,  -633,  -632,  -319,  -432,  -633,  -633,  -326,  -330,
  -332,  -531,  -553,  -491,  -594,  -573,  -380,  -632,  -632,  -632,
  -632,  -583,  -632,  -401,  -621,  -404,  -406,  -407,  -581,  -633,
  -294,  -416,  -633,  -435,  -438,  -450,  -632,  -521,  -522,  -633,
  -633,  -285,  -448,  -538,  -538,  -538,  -538,  -368,  -633,  -373,
  -633,  -632,  -312,  -315,  -269,  -632,  -632,  -323,  -529,  -632,
  -632,  -376,  -633,  -384,  -633,  -386,  -633,  -390,  -633,  -393,
  -395,  -403,  -633,  -293,  -614,   -56,  -444,  -632,  -633,  -633,
  -294,  -633,  -539,  -542,  -544,  -547,  -633,  -371,  -632,  -440,
  -441,  -442,  -633,  -633,  -633,  -632,  -632,  -632,  -632,  -405,
  -443,  -621,  -610,  -611,  -614,  -293,  -538,  -369,  -358,  -320,
  -327,  -335,  -633,  -382,  -385,  -388,  -391,  -432,  -540,  -632,
  -383 ]

clist = [
'6,220,279,279,279,262,424,371,223,546,597,451,431,437,442,130,130,340',
'509,566,647,714,315,315,398,536,300,327,421,117,773,135,135,866,4,448',
'263,330,133,133,857,280,280,280,344,345,125,208,348,559,590,593,318',
'113,114,498,315,274,691,9,332,337,494,724,725,9,814,503,762,688,329',
'333,688,739,811,343,343,378,130,343,837,379,946,381,383,386,389,392',
'395,381,322,854,301,817,117,130,977,404,405,406,407,691,118,549,552',
'747,750,943,556,975,971,342,869,281,281,281,628,299,349,631,848,297',
'662,277,291,292,380,883,343,343,343,343,396,1009,266,272,275,611,847',
'613,361,772,815,334,338,614,623,776,625,679,962,629,880,359,629,1006',
'759,683,684,816,871,347,623,999,870,509,346,818,547,328,372,9,767,974',
'681,356,341,557,719,612,408,336,279,375,493,824,501,828,502,734,829',
'1039,853,753,855,416,422,458,691,415,841,446,450,926,977,377,335,642',
'402,382,425,688,688,385,971,919,1037,1049,441,420,682,388,391,300,878',
'394,420,454,455,456,457,890,697,861,913,566,778,279,779,397,432,709',
'445,279,857,943,279,881,410,417,852,358,505,207,1057,922,672,751,431',
'442,437,849,965,124,2,722,616,1,808,854,,425,,,,522,280,,508,508,514',
',,,379,280,,315,300,,533,566,,300,967,834,500,,,964,17,,811,854,315',
'811,17,811,,,,,,903,904,,525,117,,,,224,699,,594,595,,1058,702,705,224',
'224,224,,17,306,306,,827,702,705,518,519,274,315,,315,,281,734,874,932',
'863,520,,343,343,281,499,224,,,,534,224,224,,504,224,353,968,1040,117',
'969,537,,,,1010,521,,615,854,297,527,662,954,,297,,,,,754,781,,596,781',
'993,702,705,,833,648,,,,6,,811,,811,17,811,130,811,,224,224,224,224',
'17,574,,830,508,508,,,654,135,,279,665,,,,133,,,654,640,797,,,641,,691',
'802,,,566,,884,885,,,451,655,811,425,688,,,660,441,9,1011,,655,,674',
',,,955,734,1045,734,685,686,886,,,,,432,445,844,,,675,654,728,730,732',
',695,279,675,675,,1050,698,,,,17,224,224,224,315,,,224,224,224,224,224',
'224,315,655,,717,,,425,,,830,,17,,842,,441,653,,,,,,659,,,,441,661,',
',,,,713,,,432,445,997,734,879,956,,702,705,224,,432,445,279,,224,,,224',
',694,,,953,744,537,,746,,,,,687,,537,,,,17,,17,425,,680,306,17,,,,,441',
',,,,,734,,734,,,306,748,748,,771,,,,777,17,432,445,,,718,986,,826,768',
'793,795,574,566,,,798,800,224,224,130,1067,450,,734,648,,,1001,,819',
'609,19,609,825,,135,,19,,1041,,,133,,,,,,,,786,648,,675,315,,,,508,',
',,836,1043,1044,19,,574,315,,,,,654,819,,654,,,,17,,888,845,846,838',
'843,,865,,,,,,,,,420,,,357,,655,792,,655,648,,660,279,875,,,,,838,,838',
',,,,,,537,,889,,,,820,,,224,,873,,425,835,,441,343,895,19,,,,,897,,',
',19,130,,934,936,,938,940,,941,,508,432,445,,882,,,819,,887,,,,,821',
',315,574,,574,,906,906,906,918,,,17,920,921,,1051,,931,306,,224,702',
',925,,,,306,,924,,942,,928,,,224,,,,948,,,813,,,,,574,,812,,648,957',
'950,951,961,,,19,,,,,,,,449,,,,343,,,,,,,,,,,17,19,343,17,,,,,,224,',
'748,315,856,850,858,,850,,958,,982,224,,315,985,224,,,,,,,,,1032,1033',
'1034,1035,,,,,,,,,,,,,,,29,,1005,,,,29,,224,224,,19,1021,19,224,224',
',,19,,224,29,,,906,906,906,906,,906,29,29,29,,29,1026,,,,,1008,,441',
'19,820,1068,,820,,,1038,,,306,,1042,279,,,29,,,838,,29,29,,306,29,,',
',574,,,,,17,17,,,,,,425,907,909,911,821,648,,821,441,,821,838,821,,',
',16,574,906,906,906,906,16,,,,,,29,,432,,224,29,29,29,29,29,,224,19',
',906,,,17,17,,,,16,,17,,,970,850,972,,812,,,812,224,812,,,820,,,18,',
',,,,18,,,,994,,995,,996,,,,,,,,,,916,,,17,,,,17,17,,18,308,308,,,,,',
'17,,821,,821,,821,,821,,,29,29,29,29,,16,,29,29,29,29,29,29,,16,,355',
',224,,17,17,,,29,,,19,,,17,224,1013,1015,1017,1019,1046,1020,1047,,1048',
'821,,812,,812,,812,,812,,,,,,1056,,,29,18,,,,,29,978,,29,18,17,,,,17',
',,,989,,,,,,,,,1069,29,,29,,,,812,29,,,,19,,16,19,,17,,,,,,,1063,1064',
'1065,1066,,,,,,29,,,,,16,,,,,,,,,,1070,,17,29,29,,,,,,,,,,,,,17,,,18',
',17,,,17,17,,42,,,,,,42,,,449,,,,,,224,18,,,,,,,,,16,,16,,,,,16,,42',
'305,305,,29,,,,,,,,,,,,,,,,,,,16,,,,,,,,,19,19,,352,,,374,,,,,,,18,',
'18,,,,308,18,,,,,29,,,,,,,,,,,308,,,,,,,,,18,42,,,,,,19,19,,42,,,,19',
',,,,,,,,,,,,16,,,,610,,610,,,,29,,,,,,,,,29,,,,,,,,,,,,,19,,,29,19,19',
',,,,,,,,,19,,,,,,,18,,,,,,,,,,,,,,,42,,,,,,,,,19,19,,29,,,29,,,,19,',
'29,,,42,,,,,,,,,,29,,,,29,,,16,,,,,,,,,,,,,,,,,19,,,,19,,,,992,,,,,',
',29,29,,,,,29,29,,,,,29,,42,,42,,,19,305,42,18,,,,,,,308,,,,,,,,305',
'308,16,,,16,,,,42,,,,,,19,,,,,,,,,,,,,,,19,,29,29,,19,,,19,19,374,,374',
',,,,,,,,,,,,,18,,,18,,,,,,,,,,,,29,,,,,,,29,,,,,,29,29,,,,,42,29,,,',
',,,,,,,29,,,,,,,41,,,,,,41,,,,,,,,,,,,,,,,,16,16,,,29,,,,29,29,,41,304',
'304,,,,,,29,,,,,,,,,,,308,,,,,,,,,,,,,,308,,351,,29,373,29,29,16,16',
'18,18,,,,16,29,29,,,,,,,42,,,,,,,305,,,,,339,,,,305,,,,,41,,,,,,,,,41',
'29,,,,29,16,,18,18,16,16,,,894,18,,,,,,16,,,,,,,,,,,,,,29,,,,,,42,,',
'42,,,,,,,,16,16,,,,610,,,18,,16,,18,18,,,29,,,,,,,18,,,,,,,,29,,,41',
',29,,,29,29,,,,,,,,,16,,,,16,18,18,,29,41,,,,,,18,,,,,,,,,,,,,418,,',
',,,16,453,,,,,,,,,,,305,,,,610,,,,18,,,,18,,305,,991,,,,,16,,,42,42',
'41,,41,,,,304,41,,,16,,,,,16,18,,16,16,,,,304,,,,,,511,,513,41,515,',
'516,517,,,,,,,,,,,,,18,42,42,,,,,,42,,,,,,373,18,373,,,,18,,,18,18,',
',,,,,,,,,,,,,,,,,,,,,,,,374,,,42,,,,42,42,,,,,,41,,,,42,,,,,,231,,,',
',,,,,278,278,278,,,,,,,,,,,324,325,326,42,42,,,,,,,,,42,,,,278,278,',
'644,,,,,,,,,,,,,,,,,,,,,,,,,,,,374,,,,42,,,,42,,,,988,,,,,,,,,,,,,,',
',,,41,,,,,,,304,42,,,,,,,,304,,,,,,,,,,,,,,689,,,339,,692,,,,,,42,,',
',,,,,,,,,,,,42,,,,,42,,,42,42,,,,,,41,,689,41,,339,,,,,,,,,,,278,423',
'278,,,,447,452,,,,,,,740,,,,,,,,231,,,467,468,469,470,471,472,473,474',
'475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491',
'492,,,,,,,278,,,,,,278,,,278,,,,,,,278,,278,,278,,278,278,787,,,,689',
'339,,,,304,,,,,,,,,,,,,,304,,,,,,,,,,41,41,,543,,,,,,,,,831,,,832,,',
',,,,,,,,,,,,,,,,,,,840,,,,,,,,,,,,,,,41,41,,860,,,,41,,,,,,,,,,,,,,',
',453,,,,,,,,,,,,,,,,,,,,278,,,,,,373,,,41,,,,41,41,896,,,,,,,,,41,,',
',,,,,,,,,,,,,,,,278,,447,673,423,,,,,,,,41,41,,,,,,,,,41,,,,,,,,,,,',
',,,,,,,,,,,278,,,278,,278,,,,,,,373,,,,41,,,,41,278,,,987,,,,,,,711',
'712,,,,,,339,,,,,278,,,278,,,,41,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,',
'41,,,,,,,,1004,278,,,,,,41,,,,,41,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,278,789,,,278,278,794,796,,,,,799,801,,,,,673,803,,,,,,,,,,,,,,',
',,,,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,278,',
',,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,278,,898',
',,,,,,,,,,,,,794,796,801,799,,901,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,898,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(3158, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,35,35,35,152,25,59,22,10,94,20,39,39,39,60,60,88,75,182,26,13,67',
'67,59,54,12,33,29,97,98,64,64,92,2,29,38,50,63,63,192,70,70,70,19,19',
'17,17,19,151,91,91,53,5,8,41,67,73,197,9,6,6,39,136,136,9,141,25,57',
'76,31,70,76,131,135,31,31,168,60,31,14,6,132,6,6,6,6,6,6,6,66,187,52',
'144,97,60,147,19,19,19,19,197,7,71,71,93,93,129,71,146,193,150,14,72',
'72,72,172,49,5,172,135,48,74,47,47,47,169,111,31,31,31,31,169,112,40',
'40,40,58,144,58,113,114,142,72,72,115,173,116,173,42,117,173,109,108',
'173,107,106,42,42,133,105,104,173,132,103,75,102,139,101,100,99,9,96',
'145,74,95,90,148,149,110,9,87,35,86,153,154,157,158,159,130,160,161',
'142,162,142,22,22,50,197,12,163,22,22,164,147,167,69,65,7,170,6,76,76',
'171,193,45,132,146,60,70,44,174,175,12,57,176,70,31,31,31,31,177,54',
'131,144,182,178,35,179,180,73,54,73,35,192,129,35,181,32,30,185,21,50',
'18,132,15,25,94,39,39,39,189,190,11,3,151,196,1,26,187,,6,,,,50,70,',
'6,6,168,,,,6,70,,67,12,,33,182,,12,141,26,73,,,135,24,,135,187,67,135',
'24,135,,,,,,136,136,,53,97,,,,24,25,,19,19,,92,39,39,24,24,24,,24,24',
'24,,42,39,39,5,8,73,67,,67,,72,130,26,136,130,9,,31,31,72,47,24,,,,66',
'24,24,,47,24,24,142,14,97,142,52,,,,98,49,,38,187,48,49,74,93,,48,,',
',,25,173,,5,173,142,39,39,,54,33,,,,6,,135,,135,24,135,60,135,,24,24',
'24,24,24,186,,75,6,6,,,6,64,,35,50,,,,63,,,6,2,41,,,17,,197,41,,,182',
',10,10,,,20,73,135,6,76,,,73,60,9,136,,73,,33,,,,26,130,142,130,50,50',
'151,,,,,73,73,71,,,6,6,184,184,184,,50,35,6,6,,13,50,,,,24,24,24,24',
'67,,,24,24,24,24,24,24,67,73,,50,,,6,,,75,,24,,29,,60,40,,,,,,40,,,',
'60,40,,,,,,31,,,73,73,130,130,25,10,,39,39,24,,73,73,35,,24,,,24,,9',
',,91,12,52,,12,,,,,72,,52,,,,24,,24,6,,40,24,24,,,,,60,,,,,,130,,130',
',,24,97,97,,31,,,,31,24,73,73,,,72,91,,88,97,22,22,186,182,,,22,22,24',
'24,60,26,22,,130,33,,,91,,33,24,28,24,152,,64,,28,,94,,,63,,,,,,,,17',
'33,,6,67,,,,6,,,,50,10,10,28,,186,67,,,,,6,33,,6,,,,24,,59,12,12,6,6',
',50,,,,,,,,,70,,,28,,73,72,,73,33,,73,35,19,,,,,6,,6,,,,,,,52,,50,,',
',186,,,24,,70,,6,52,,60,31,12,28,,,,,22,,,,28,60,,184,184,,184,184,',
'184,,6,73,73,,97,,,33,,97,,,,,188,,67,186,,186,,6,6,6,12,,,24,12,12',
',25,,50,24,,24,39,,12,,,,24,,6,,50,,6,,,24,,,,19,,,140,,,,,186,,137',
',33,19,12,12,50,,,28,,,,,,,,28,,,,31,,,,,,,,,,,24,28,31,24,,,,,,24,',
'97,67,140,137,140,,137,,97,,12,24,,67,12,24,,,,,,,,,184,184,184,184',
',,,,,,,,,,,,,,43,,12,,,,43,,24,24,,28,33,28,24,24,,,28,,24,43,,,6,6',
'6,6,,6,43,43,43,,43,12,,,,,97,,60,28,186,184,,186,,,12,,,24,,12,35,',
',43,,,6,,43,43,,24,43,,,,186,,,,,24,24,,,,,,6,138,138,138,188,33,,188',
'60,,188,6,188,,,,23,186,6,6,6,6,23,,,,,,43,,73,,24,43,43,43,43,43,,24',
'28,,6,,,24,24,,,,23,,24,,,140,137,140,,137,,,137,24,137,,,186,,,27,',
',,,,27,,,,140,,140,,140,,,,,,,,,,24,,,24,,,,24,24,,27,27,27,,,,,,24',
',188,,188,,188,,188,,,43,43,43,43,,23,,43,43,43,43,43,43,,23,,27,,24',
',24,24,,,43,,,28,,,24,24,138,138,138,138,140,138,140,,140,188,,137,',
'137,,137,,137,,,,,,140,,,43,27,,,,,43,24,,43,27,24,,,,24,,,,24,,,,,',
',,,140,43,,43,,,,137,43,,,,28,,23,28,,24,,,,,,,138,138,138,138,,,,,',
'43,,,,,23,,,,,,,,,,138,,24,43,43,,,,,,,,,,,,,24,,,27,,24,,,24,24,,56',
',,,,,56,,,28,,,,,,24,27,,,,,,,,,23,,23,,,,,23,,56,56,56,,43,,,,,,,,',
',,,,,,,,,,23,,,,,,,,,28,28,,56,,,56,,,,,,,27,,27,,,,27,27,,,,,43,,,',
',,,,,,,27,,,,,,,,,27,56,,,,,,28,28,,56,,,,28,,,,,,,,,,,,,23,,,,27,,27',
',,,43,,,,,,,,,43,,,,,,,,,,,,,28,,,43,28,28,,,,,,,,,,28,,,,,,,27,,,,',
',,,,,,,,,,56,,,,,,,,,28,28,,43,,,43,,,,28,,43,,,56,,,,,,,,,,43,,,,43',
',,23,,,,,,,,,,,,,,,,,28,,,,28,,,,28,,,,,,,43,43,,,,,43,43,,,,,43,,56',
',56,,,28,56,56,27,,,,,,,27,,,,,,,,56,27,23,,,23,,,,56,,,,,,28,,,,,,',
',,,,,,,,28,,43,43,,28,,,28,28,56,,56,,,,,,,,,,,,,,27,,,27,,,,,,,,,,',
',43,,,,,,,43,,,,,,43,43,,,,,56,43,,,,,,,,,,,43,,,,,,,55,,,,,,55,,,,',
',,,,,,,,,,,,23,23,,,43,,,,43,43,,55,55,55,,,,,,43,,,,,,,,,,,27,,,,,',
',,,,,,,,27,,55,,43,55,43,43,23,23,27,27,,,,23,43,43,,,,,,,56,,,,,,,56',
',,,,68,,,,56,,,,,55,,,,,,,,,55,43,,,,43,23,,27,27,23,23,,,27,27,,,,',
',23,,,,,,,,,,,,,,43,,,,,,56,,,56,,,,,,,,23,23,,,,27,,,27,,23,,27,27',
',,43,,,,,,,27,,,,,,,,43,,,55,,43,,,43,43,,,,,,,,,23,,,,23,27,27,,43',
'55,,,,,,27,,,,,,,,,,,,,68,,,,,,23,68,,,,,,,,,,,56,,,,27,,,,27,,,,27',
',56,,27,,,,,23,,,56,56,55,,55,,,,55,55,,,23,,,,,23,27,,23,23,,,,55,',
',,,,68,,68,55,68,,68,68,,,,,,,,,,,,,27,56,56,,,,,,56,,,,,,55,27,55,',
',,27,,,27,27,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,56,,,,56,56,,,,,,55,,,,56',
',,,,,34,,,,,,,,,34,34,34,,,,,,,,,,,34,34,34,56,56,,,,,,,,,56,,,,34,34',
',68,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,56,,,,56,,,,56,,,,,,,,,,,,,,,,',
',55,,,,,,,55,56,,,,,,,,55,,,,,,,,,,,,,,68,,,68,,68,,,,,,56,,,,,,,,,',
',,,,,56,,,,,56,,,56,56,,,,,,55,,68,55,,68,,,,,,,,,,,34,34,34,,,,34,34',
',,,,,,68,,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,,,,,,,34,,,,,,34,,,34,,,,,,,34,,34,,34',
',34,34,68,,,,68,68,,,,55,,,,,,,,,,,,,,55,,,,,,,,,,55,55,,34,,,,,,,,',
'68,,,68,,,,,,,,,,,,,,,,,,,,,,68,,,,,,,,,,,,,,,55,55,,68,,,,55,,,,,,',
',,,,,,,,,68,,,,,,,,,,,,,,,,,,,,34,,,,,,55,,,55,,,,55,55,68,,,,,,,,,55',
',,,,,,,,,,,,,,,,,,34,,34,34,34,,,,,,,,55,55,,,,,,,,,55,,,,,,,,,,,,,',
',,,,,,,,,34,,,34,,34,,,,,,,55,,,,55,,,,55,34,,,55,,,,,,,34,34,,,,,,68',
',,,,34,,,34,,,,55,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,55,,,,,,,,68,34',
',,,,,55,,,,,55,,,55,55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,34,34,34',
'34,,,,,34,34,,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,,,,,,,,,,,',
',,,,,,,,,34,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,34',
',,,,,,,,,,,,,,,,,,,,,34,,34,,,,,,,,,,,,,,34,34,34,34,,34,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3158, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   267,    32,   264,   nil,    48,    -2,    94,    49,    57,
  -319,   253,   -10,  -524,  -634,  -582,   nil,    35,   241,   -22,
  -206,   180,   -15,  1039,   298,  -206,  -404,  1093,   656,  -182,
    39,     9,   123,   -21,  2130,   -30,   nil,   nil,     9,  -201,
   105,  -211,  -344,   939,  -277,  -612,   nil,    91,    85,    81,
   -24,   nil,    55,    14,  -294,  1734,  1308,  -539,  -222,   -67,
     4,   nil,   nil,    27,    20,  -207,    46,   -15,  1776,   144,
     9,  -230,    81,    27,  -320,  -263,  -438,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   109,   118,   -47,   nil,
   111,  -294,  -711,  -489,  -339,   104,  -439,    24,  -584,    96,
   109,  -161,    98,  -583,    92,  -590,  -448,  -799,    81,  -615,
  -181,  -644,  -825,    67,  -472,  -226,  -468,  -738,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -755,
  -386,  -502,  -782,  -518,   nil,  -603,  -497,   179,   213,  -510,
   172,  -611,  -535,   nil,  -584,  -741,  -805,  -818,  -165,  -379,
    46,  -293,   -20,   -77,  -494,   nil,   nil,   -84,  -496,   -83,
  -494,  -814,  -405,  -515,  -638,   nil,   nil,   125,    -6,    41,
   123,   126,  -269,  -234,   133,   133,   135,  -547,  -384,  -383,
   148,  -522,  -323,   nil,   -70,  -477,    80,  -636,   127,  -462,
  -640,   nil,  -689,  -798,   nil,   nil,  -110,  -452 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   294,     7,   350,   295,
   nil,   nil,   545,   nil,   867,   nil,   293,   nil,   nil,   nil,
    14,    15,    21,   230,   323,   nil,   nil,   228,   229,   nil,
   nil,    20,   nil,   331,    24,    25,    26,    27,   nil,   708,
   nil,   nil,   nil,   312,   nil,   nil,    28,   426,    35,   nil,
   nil,    37,    40,    39,   nil,   225,   226,   608,   nil,   132,
   434,   131,   134,    78,    79,   nil,    93,    49,   284,   nil,
   427,   nil,   428,   439,   656,   506,   282,   267,    50,    51,
    52,    53,    54,    55,    56,    57,    58,   nil,   268,    64,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   591,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   736,
   573,   nil,   737,   966,   810,   561,   nil,   562,   nil,   nil,
   563,   nil,   565,   676,   nil,   nil,   nil,   571,   nil,   nil,
   nil,   775,   nil,   nil,   nil,   438,   269,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,   nil,
   nil,   nil,   nil,   618,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   851,   560,   nil,   564,   859,   576,   578,   579,
   822,   582,   583,   823,   586,   589,   nil,   288 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  5, 153, :_reduce_10,
  4, 156, :_reduce_11,
  2, 158, :_reduce_12,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  0, 178, :_reduce_17,
  4, 155, :_reduce_18,
  3, 155, :_reduce_19,
  3, 155, :_reduce_20,
  3, 155, :_reduce_21,
  2, 155, :_reduce_22,
  3, 155, :_reduce_23,
  3, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  4, 155, :_reduce_28,
  1, 155, :_reduce_none,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  6, 155, :_reduce_32,
  5, 155, :_reduce_33,
  5, 155, :_reduce_34,
  5, 155, :_reduce_35,
  5, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  3, 155, :_reduce_39,
  1, 155, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  1, 177, :_reduce_none,
  3, 177, :_reduce_44,
  3, 177, :_reduce_45,
  3, 177, :_reduce_46,
  2, 177, :_reduce_47,
  1, 177, :_reduce_none,
  1, 165, :_reduce_49,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 182, :_reduce_none,
  4, 182, :_reduce_53,
  0, 190, :_reduce_54,
  0, 191, :_reduce_55,
  6, 187, :_reduce_56,
  1, 189, :_reduce_57,
  2, 181, :_reduce_58,
  3, 181, :_reduce_59,
  4, 181, :_reduce_60,
  4, 181, :_reduce_61,
  5, 181, :_reduce_62,
  4, 181, :_reduce_63,
  5, 181, :_reduce_64,
  2, 181, :_reduce_65,
  2, 181, :_reduce_66,
  2, 181, :_reduce_67,
  2, 181, :_reduce_68,
  2, 181, :_reduce_69,
  1, 167, :_reduce_none,
  3, 167, :_reduce_71,
  1, 195, :_reduce_none,
  3, 195, :_reduce_73,
  1, 194, :_reduce_74,
  2, 194, :_reduce_75,
  3, 194, :_reduce_76,
  5, 194, :_reduce_77,
  2, 194, :_reduce_78,
  4, 194, :_reduce_79,
  2, 194, :_reduce_80,
  4, 194, :_reduce_81,
  1, 194, :_reduce_82,
  3, 194, :_reduce_83,
  1, 198, :_reduce_none,
  3, 198, :_reduce_85,
  2, 197, :_reduce_86,
  3, 197, :_reduce_87,
  1, 200, :_reduce_88,
  3, 200, :_reduce_89,
  1, 199, :_reduce_90,
  1, 199, :_reduce_91,
  4, 199, :_reduce_92,
  3, 199, :_reduce_93,
  3, 199, :_reduce_94,
  3, 199, :_reduce_95,
  3, 199, :_reduce_96,
  3, 199, :_reduce_97,
  3, 199, :_reduce_98,
  2, 199, :_reduce_99,
  1, 199, :_reduce_100,
  1, 174, :_reduce_101,
  1, 174, :_reduce_102,
  4, 174, :_reduce_103,
  3, 174, :_reduce_104,
  3, 174, :_reduce_105,
  3, 174, :_reduce_106,
  3, 174, :_reduce_107,
  3, 174, :_reduce_108,
  3, 174, :_reduce_109,
  2, 174, :_reduce_110,
  1, 174, :_reduce_111,
  1, 203, :_reduce_112,
  1, 203, :_reduce_none,
  2, 204, :_reduce_114,
  1, 204, :_reduce_115,
  3, 204, :_reduce_116,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_120,
  1, 205, :_reduce_121,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 163, :_reduce_124,
  1, 163, :_reduce_none,
  1, 164, :_reduce_126,
  0, 211, :_reduce_127,
  4, 164, :_reduce_128,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  3, 180, :_reduce_200,
  5, 180, :_reduce_201,
  3, 180, :_reduce_202,
  5, 180, :_reduce_203,
  6, 180, :_reduce_204,
  5, 180, :_reduce_205,
  5, 180, :_reduce_206,
  5, 180, :_reduce_207,
  5, 180, :_reduce_208,
  4, 180, :_reduce_209,
  3, 180, :_reduce_210,
  3, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  3, 180, :_reduce_214,
  3, 180, :_reduce_215,
  3, 180, :_reduce_216,
  3, 180, :_reduce_217,
  3, 180, :_reduce_218,
  4, 180, :_reduce_219,
  2, 180, :_reduce_220,
  2, 180, :_reduce_221,
  3, 180, :_reduce_222,
  3, 180, :_reduce_223,
  3, 180, :_reduce_224,
  3, 180, :_reduce_225,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  3, 180, :_reduce_229,
  3, 180, :_reduce_230,
  3, 180, :_reduce_231,
  3, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  2, 180, :_reduce_235,
  2, 180, :_reduce_236,
  3, 180, :_reduce_237,
  3, 180, :_reduce_238,
  3, 180, :_reduce_239,
  3, 180, :_reduce_240,
  3, 180, :_reduce_241,
  6, 180, :_reduce_242,
  1, 180, :_reduce_none,
  1, 214, :_reduce_244,
  1, 215, :_reduce_none,
  2, 215, :_reduce_246,
  4, 215, :_reduce_247,
  2, 215, :_reduce_248,
  3, 219, :_reduce_249,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 171, :_reduce_252,
  1, 171, :_reduce_253,
  2, 171, :_reduce_254,
  4, 171, :_reduce_255,
  2, 171, :_reduce_256,
  1, 193, :_reduce_257,
  2, 193, :_reduce_258,
  2, 193, :_reduce_259,
  4, 193, :_reduce_260,
  1, 193, :_reduce_261,
  0, 223, :_reduce_262,
  2, 186, :_reduce_263,
  2, 222, :_reduce_264,
  2, 221, :_reduce_265,
  1, 221, :_reduce_none,
  1, 216, :_reduce_267,
  2, 216, :_reduce_268,
  3, 216, :_reduce_269,
  4, 216, :_reduce_270,
  1, 176, :_reduce_271,
  1, 176, :_reduce_272,
  3, 175, :_reduce_273,
  4, 175, :_reduce_274,
  2, 175, :_reduce_275,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_286,
  0, 246, :_reduce_287,
  4, 213, :_reduce_288,
  2, 213, :_reduce_289,
  0, 247, :_reduce_290,
  4, 213, :_reduce_291,
  3, 213, :_reduce_292,
  3, 213, :_reduce_293,
  2, 213, :_reduce_294,
  3, 213, :_reduce_295,
  3, 213, :_reduce_296,
  1, 213, :_reduce_297,
  4, 213, :_reduce_298,
  3, 213, :_reduce_299,
  1, 213, :_reduce_300,
  5, 213, :_reduce_301,
  4, 213, :_reduce_302,
  3, 213, :_reduce_303,
  2, 213, :_reduce_304,
  1, 213, :_reduce_none,
  2, 213, :_reduce_306,
  2, 213, :_reduce_307,
  6, 213, :_reduce_308,
  6, 213, :_reduce_309,
  0, 248, :_reduce_310,
  0, 249, :_reduce_311,
  7, 213, :_reduce_312,
  0, 250, :_reduce_313,
  0, 251, :_reduce_314,
  7, 213, :_reduce_315,
  5, 213, :_reduce_316,
  4, 213, :_reduce_317,
  0, 252, :_reduce_318,
  0, 253, :_reduce_319,
  9, 213, :_reduce_320,
  0, 254, :_reduce_321,
  0, 255, :_reduce_322,
  7, 213, :_reduce_323,
  0, 256, :_reduce_324,
  0, 257, :_reduce_325,
  0, 258, :_reduce_326,
  9, 213, :_reduce_327,
  0, 259, :_reduce_328,
  0, 260, :_reduce_329,
  6, 213, :_reduce_330,
  0, 261, :_reduce_331,
  6, 213, :_reduce_332,
  0, 262, :_reduce_333,
  0, 263, :_reduce_334,
  9, 213, :_reduce_335,
  1, 213, :_reduce_336,
  1, 213, :_reduce_337,
  1, 213, :_reduce_338,
  1, 213, :_reduce_339,
  1, 170, :_reduce_340,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  2, 237, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 238, :_reduce_none,
  5, 238, :_reduce_358,
  1, 160, :_reduce_none,
  2, 160, :_reduce_360,
  1, 241, :_reduce_none,
  1, 241, :_reduce_362,
  1, 275, :_reduce_none,
  3, 275, :_reduce_364,
  1, 278, :_reduce_365,
  3, 278, :_reduce_366,
  1, 277, :_reduce_367,
  4, 277, :_reduce_368,
  6, 277, :_reduce_369,
  3, 277, :_reduce_370,
  5, 277, :_reduce_371,
  2, 277, :_reduce_372,
  4, 277, :_reduce_373,
  1, 277, :_reduce_374,
  3, 277, :_reduce_375,
  4, 279, :_reduce_376,
  2, 279, :_reduce_377,
  2, 279, :_reduce_378,
  1, 279, :_reduce_379,
  2, 284, :_reduce_380,
  1, 284, :_reduce_none,
  6, 285, :_reduce_382,
  8, 285, :_reduce_383,
  4, 285, :_reduce_384,
  6, 285, :_reduce_385,
  4, 285, :_reduce_386,
  2, 285, :_reduce_387,
  6, 285, :_reduce_388,
  2, 285, :_reduce_389,
  4, 285, :_reduce_390,
  6, 285, :_reduce_391,
  2, 285, :_reduce_392,
  4, 285, :_reduce_393,
  2, 285, :_reduce_394,
  4, 285, :_reduce_395,
  1, 285, :_reduce_396,
  1, 188, :_reduce_397,
  1, 188, :_reduce_none,
  3, 289, :_reduce_399,
  1, 289, :_reduce_400,
  4, 289, :_reduce_401,
  1, 290, :_reduce_none,
  4, 290, :_reduce_403,
  1, 291, :_reduce_404,
  3, 291, :_reduce_405,
  1, 292, :_reduce_406,
  1, 292, :_reduce_none,
  0, 296, :_reduce_408,
  3, 236, :_reduce_409,
  4, 294, :_reduce_410,
  1, 294, :_reduce_411,
  3, 295, :_reduce_412,
  3, 295, :_reduce_413,
  0, 299, :_reduce_414,
  0, 300, :_reduce_415,
  6, 298, :_reduce_416,
  2, 183, :_reduce_417,
  4, 183, :_reduce_418,
  5, 183, :_reduce_419,
  5, 183, :_reduce_420,
  0, 302, :_reduce_421,
  3, 235, :_reduce_422,
  4, 235, :_reduce_423,
  4, 235, :_reduce_424,
  4, 235, :_reduce_425,
  3, 235, :_reduce_426,
  3, 235, :_reduce_427,
  3, 235, :_reduce_428,
  3, 235, :_reduce_429,
  2, 235, :_reduce_430,
  1, 235, :_reduce_431,
  4, 235, :_reduce_432,
  0, 303, :_reduce_433,
  0, 304, :_reduce_434,
  6, 234, :_reduce_435,
  0, 305, :_reduce_436,
  0, 306, :_reduce_437,
  6, 234, :_reduce_438,
  0, 308, :_reduce_439,
  6, 240, :_reduce_440,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  6, 159, :_reduce_443,
  0, 159, :_reduce_444,
  1, 309, :_reduce_445,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  2, 310, :_reduce_448,
  1, 310, :_reduce_none,
  2, 161, :_reduce_450,
  1, 161, :_reduce_none,
  1, 224, :_reduce_452,
  1, 224, :_reduce_453,
  1, 224, :_reduce_none,
  1, 225, :_reduce_455,
  1, 312, :_reduce_456,
  1, 312, :_reduce_none,
  2, 312, :_reduce_458,
  3, 313, :_reduce_459,
  1, 313, :_reduce_460,
  3, 226, :_reduce_461,
  3, 227, :_reduce_462,
  3, 228, :_reduce_463,
  3, 228, :_reduce_464,
  1, 317, :_reduce_465,
  3, 317, :_reduce_466,
  1, 318, :_reduce_none,
  2, 318, :_reduce_468,
  3, 230, :_reduce_469,
  3, 230, :_reduce_470,
  1, 320, :_reduce_471,
  3, 320, :_reduce_472,
  3, 229, :_reduce_473,
  3, 229, :_reduce_474,
  3, 231, :_reduce_475,
  3, 231, :_reduce_476,
  1, 321, :_reduce_477,
  3, 321, :_reduce_478,
  1, 322, :_reduce_479,
  3, 322, :_reduce_480,
  1, 314, :_reduce_481,
  2, 314, :_reduce_482,
  1, 315, :_reduce_483,
  2, 315, :_reduce_484,
  1, 316, :_reduce_485,
  2, 316, :_reduce_486,
  1, 319, :_reduce_487,
  0, 324, :_reduce_488,
  3, 319, :_reduce_489,
  0, 325, :_reduce_490,
  4, 319, :_reduce_491,
  1, 323, :_reduce_492,
  1, 323, :_reduce_493,
  1, 323, :_reduce_494,
  1, 323, :_reduce_none,
  2, 209, :_reduce_496,
  1, 209, :_reduce_497,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  3, 210, :_reduce_502,
  1, 311, :_reduce_none,
  2, 311, :_reduce_504,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_514,
  1, 202, :_reduce_515,
  1, 202, :_reduce_516,
  1, 202, :_reduce_517,
  1, 202, :_reduce_518,
  1, 202, :_reduce_519,
  1, 202, :_reduce_520,
  1, 232, :_reduce_521,
  1, 232, :_reduce_522,
  1, 169, :_reduce_523,
  1, 169, :_reduce_524,
  1, 173, :_reduce_525,
  1, 173, :_reduce_526,
  1, 242, :_reduce_527,
  0, 327, :_reduce_528,
  4, 242, :_reduce_529,
  2, 242, :_reduce_530,
  3, 244, :_reduce_531,
  2, 244, :_reduce_532,
  4, 328, :_reduce_533,
  2, 328, :_reduce_534,
  2, 328, :_reduce_535,
  1, 328, :_reduce_none,
  2, 330, :_reduce_537,
  0, 330, :_reduce_538,
  6, 297, :_reduce_539,
  8, 297, :_reduce_540,
  4, 297, :_reduce_541,
  6, 297, :_reduce_542,
  4, 297, :_reduce_543,
  6, 297, :_reduce_544,
  2, 297, :_reduce_545,
  4, 297, :_reduce_546,
  6, 297, :_reduce_547,
  2, 297, :_reduce_548,
  4, 297, :_reduce_549,
  2, 297, :_reduce_550,
  4, 297, :_reduce_551,
  1, 297, :_reduce_552,
  0, 297, :_reduce_553,
  1, 293, :_reduce_554,
  1, 293, :_reduce_555,
  1, 293, :_reduce_556,
  1, 293, :_reduce_557,
  1, 276, :_reduce_none,
  1, 276, :_reduce_559,
  1, 332, :_reduce_none,
  1, 333, :_reduce_none,
  3, 333, :_reduce_562,
  1, 333, :_reduce_none,
  3, 333, :_reduce_564,
  1, 286, :_reduce_565,
  3, 286, :_reduce_566,
  1, 334, :_reduce_none,
  2, 335, :_reduce_568,
  1, 335, :_reduce_569,
  2, 336, :_reduce_570,
  1, 336, :_reduce_571,
  1, 280, :_reduce_none,
  3, 280, :_reduce_573,
  1, 329, :_reduce_none,
  3, 329, :_reduce_575,
  1, 337, :_reduce_none,
  1, 337, :_reduce_none,
  2, 281, :_reduce_578,
  1, 281, :_reduce_579,
  3, 338, :_reduce_580,
  3, 339, :_reduce_581,
  1, 287, :_reduce_582,
  3, 287, :_reduce_583,
  1, 331, :_reduce_584,
  3, 331, :_reduce_585,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 288, :_reduce_588,
  1, 288, :_reduce_589,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  2, 283, :_reduce_592,
  2, 282, :_reduce_593,
  0, 282, :_reduce_594,
  1, 245, :_reduce_none,
  0, 342, :_reduce_596,
  4, 245, :_reduce_597,
  1, 233, :_reduce_598,
  2, 233, :_reduce_599,
  1, 218, :_reduce_none,
  3, 218, :_reduce_601,
  3, 343, :_reduce_602,
  2, 343, :_reduce_603,
  4, 343, :_reduce_604,
  2, 343, :_reduce_605,
  2, 343, :_reduce_606,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 196, :_reduce_none,
  2, 172, :_reduce_none,
  0, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 243, :_reduce_628,
  1, 243, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_631,
  0, 152, :_reduce_632 ]

racc_reduce_n = 633

racc_shift_n = 1071

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      result[0] = :safe_call
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgnx, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_96(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_97(val, _values, result)
                      result = s(:attrasgnx, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_98(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_99(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_100(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_103(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      result = s(:safe_attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_106(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_107(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_108(val, _values, result)
                      result = s(:safe_attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_109(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_110(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_111(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_112(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 113 omitted

def _reduce_114(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_115(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_116(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_121(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 125 omitted

def _reduce_126(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_127(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_128(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

def _reduce_200(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_201(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_204(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_208(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_209(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_210(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_211(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_212(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_235(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_236(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_237(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_242(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 250 omitted

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_253(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_255(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_257(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_258(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_262(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_263(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 266 omitted

def _reduce_267(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_268(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_271(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_273(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_275(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

def _reduce_286(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_287(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_288(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_289(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_290(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_291(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_292(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_295(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_298(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_299(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_301(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_303(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_304(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 305 omitted

def _reduce_306(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_307(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_316(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_317(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_318(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_319(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_320(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_322(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_323(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_324(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_325(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_329(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_332(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_334(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_335(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_338(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_339(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_340(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 361 omitted

def _reduce_362(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 363 omitted

def _reduce_364(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_367(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_369(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_370(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_371(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_372(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_373(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_374(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_375(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
 result = 0 
    result
end

# reduce 398 omitted

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 407 omitted

def _reduce_408(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_409(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_410(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_411(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_412(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_414(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_415(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_416(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_417(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_419(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_420(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_421(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_422(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      result[0] = :safe_call
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_427(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = new_call val[0], :call, val[2]
                      result[0] = :safe_call
                    
    result
end

def _reduce_429(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_431(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_432(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_433(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_435(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_436(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_437(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_438(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_439(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_440(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_444(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_445(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 446 omitted

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 454 omitted

def _reduce_455(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_456(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 457 omitted

def _reduce_458(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_461(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_463(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_466(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0].dup << word
                    
    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_472(val, _values, result)
                      list, sym, _ = val

                      case sym[0]
                      when :dstr then
                        sym[0] = :dsym
                      when :str then
                        sym = s(:lit, sym.last.to_sym)
                      else
                        debug20 24
                        sym = s(:dsym, "", result)
                      end

                      result = list.dup << sym
                    
    result
end

def _reduce_473(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_475(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[0].dup << s(:str, val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].dup << s(:lit, val[1].to_sym)
                    
    result
end

def _reduce_481(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_482(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_484(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_486(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_488(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_489(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = [lexer.lex_strterm, 
                                lexer.brace_nest, 
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store, 
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_491(val, _values, result)
#if   defined(RUBY21) || defined(RUBY22 || defined(RUBY23))
                      # TODO: tRCURLY -> tSTRING_END
#endif
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_492(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_493(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_494(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 495 omitted

def _reduce_496(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_497(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

def _reduce_502(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 503 omitted

def _reduce_504(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

# reduce 513 omitted

def _reduce_514(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_515(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_516(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_517(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_518(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_519(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_520(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_521(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_522(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_523(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_524(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_525(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_526(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_527(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_528(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_529(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_530(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_531(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_532(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

# reduce 536 omitted

def _reduce_537(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_550(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_551(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_552(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_553(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_554(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_555(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_556(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_557(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 560 omitted

# reduce 561 omitted

def _reduce_562(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_565(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_566(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_569(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_570(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_571(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 574 omitted

def _reduce_575(val, _values, result)
                      result = args val
                    
    result
end

# reduce 576 omitted

# reduce 577 omitted

def _reduce_578(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_579(val, _values, result)
                      debug20 36, val, result
                    
    result
end

def _reduce_580(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_581(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_582(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_583(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_584(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 586 omitted

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_589(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 590 omitted

# reduce 591 omitted

def _reduce_592(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_593(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_594(val, _values, result)
                      result = nil
                    
    result
end

# reduce 595 omitted

def _reduce_596(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_597(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_598(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_599(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 600 omitted

def _reduce_601(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_602(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_603(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_604(val, _values, result)
                      _, sym, _, value = val
                      sym[0] = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_605(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_606(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

# reduce 623 omitted

# reduce 624 omitted

# reduce 625 omitted

# reduce 626 omitted

# reduce 627 omitted

def _reduce_628(val, _values, result)
 yyerrok 
    result
end

# reduce 629 omitted

# reduce 630 omitted

def _reduce_631(val, _values, result)
 yyerrok 
    result
end

def _reduce_632(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby23Parser
